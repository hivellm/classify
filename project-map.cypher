// Project: vectorizer
CREATE (project:Project {
  name: "vectorizer",
  type: "rust",
  primaryLanguage: "rust",
  totalFiles: 213,
  rootDir: "/mnt/f/Node/hivellm/vectorizer"
})

// File: /mnt/f/Node/hivellm/vectorizer/src/lib.rs
CREATE (doc:Document {
      id: "Vectorizer Rust Library - Core Module",
      title: "Vectorizer Rust Library - Core Module",
      domain: "software",
      doc_type: "rust_library_core"
    })
CREATE (e0:Module {name: "vectorizer", version: "env!(\"CARGO_PKG_VERSION\")", language: "rust", description: "High-performance, efficient queries, AI-driven discovery"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "batch", description: "Batch processing functionality"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "db", description: "Database and vector store operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "embedding", description: "Embedding models and algorithms"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "error", description: "Error handling and result types"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "evaluation", description: "Search quality evaluation metrics"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "models", description: "Data models and configurations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Module {name: "summarization", description: "Document summarization functionality"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "VectorStore", description: "Main vector database implementation"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "Collection", description: "Vector collection management"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "BatchProcessor", description: "Batch processing operations"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "Vector", description: "Vector data structure with payload"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "CollectionConfig", description: "Collection configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "BatchConfig", description: "Batch processing configuration"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "SummarizationConfig", description: "Summarization configuration"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "search", description: "Vector search API"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "insert", description: "Vector insertion API"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "create_collection", description: "Collection creation API"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Test {name: "test_concurrent_workload_simulation", description: "Concurrent workload testing"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Test {name: "test_collection_management", description: "Collection management testing"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde_json", type: "external"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "tempfile", type: "external"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "Vectorizer Rust Library - Core Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/hybrid_search.rs
CREATE (doc:Document {
      id: "Hybrid Retrieval System Implementation",
      title: "Hybrid Retrieval System Implementation",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "HybridRetriever", description: "Hybrid retrieval system combining sparse and dense methods", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "HybridRetriever", description: "Generic hybrid retriever with sparse and dense components", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Constructor for HybridRetriever", visibility: "public", parameters: "sparse_retriever: T,dense_reranker: U,first_stage_k: usize,query: &str,documents: &[String],final_k: usize,query: &str,documents: &[String],k: usize,query: &str,documents: &[String],candidates: Vec<(usize, f32)>,final_k: usize,a: &[f32],b: &[f32]"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "search_hybrid", description: "Main hybrid search method", visibility: "public", parameters: "query: &str,documents: &[String],final_k: usize", return_type: "Result<Vec<QueryResult>>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "sparse_retrieval", description: "First stage sparse retrieval using BM25/TF-IDF", visibility: "private", parameters: "query: &str,documents: &[String],k: usize", return_type: "Result<Vec<(usize, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "dense_reranking", description: "Second stage dense reranking using BERT/MiniLM", visibility: "private", parameters: "query: &str,documents: &[String],candidates: Vec<(usize, f32)>,final_k: usize", return_type: "Result<Vec<QueryResult>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "cosine_similarity", description: "Calculate cosine similarity between two vectors", visibility: "private", parameters: "a: &[f32],b: &[f32]", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "crate::embedding::EmbeddingProvider", description: "Trait for embedding providers", type: "trait"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "crate::error::Result", description: "Error handling type", type: "type_alias"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "crate::evaluation::QueryResult", description: "Query result structure", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "EmbeddingProvider", description: "Trait for embedding operations", methods: "embed"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Hybrid Retrieval System Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/guardrails.rs
CREATE (doc:Document {
      id: "System Guardrails Implementation",
      title: "System Guardrails Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "guardrails", language: "Rust", purpose: "System resource monitoring and protection"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ViolationType", type: "enum", visibility: "public", purpose: "Defines types of system violations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "GuardrailsConfig", type: "struct", visibility: "public", purpose: "Configuration for guardrails system"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "Guardrails", type: "struct", visibility: "public", purpose: "Main guardrails runtime system"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "OperationPermit", type: "struct", visibility: "public", purpose: "Permit for operation execution"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", visibility: "public", purpose: "Create new guardrails system"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "check_safe", visibility: "public", purpose: "Check if system is safe to proceed"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "acquire_permit", visibility: "public", purpose: "Acquire operation permit"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "record_violation", visibility: "private", purpose: "Record system violation"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_violations", visibility: "public", purpose: "Get violation statistics"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "MAX_MEMORY_PERCENT", value: "75.0", type: "constant", purpose: "Maximum memory usage percentage"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "MAX_CPU_PERCENT", value: "90.0", type: "constant", purpose: "Maximum CPU usage percentage"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "MIN_FREE_MEMORY_MB", value: "512", type: "constant", purpose: "Minimum required free memory"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "MAX_CONCURRENT_OPS", value: "4", type: "constant", purpose: "Maximum concurrent operations"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::sync::atomic", type: "standard_library", purpose: "Atomic operations for thread safety"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::time", type: "standard_library", purpose: "Time and duration handling"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "sysinfo", type: "external_crate", purpose: "System information gathering"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tracing", type: "external_crate", purpose: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "parking_lot", type: "external_crate", purpose: "Fast mutex implementation"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "System Guardrails Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/gpu_adapter.rs
CREATE (doc:Document {
      id: "GPU Adapter Module",
      title: "GPU Adapter Module",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "GpuAdapter", description: "Adapter module that translates vectorizer types to GPU types", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "vector_to_gpu_vector", description: "Convert vectorizer Vector to hive-gpu GpuVector", parameters: "vector: &Vector,gpu_vector: &HiveGpuVector,metric: crate::models::DistanceMetric,gpu_metric: HiveGpuDistanceMetric,config: &crate::models::HnswConfig,gpu_config: &HiveGpuHnswConfig,error: HiveGpuError,error: VectorizerError", return_type: "HiveGpuVector"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "gpu_vector_to_vector", description: "Convert GpuVector to vectorizer Vector", parameters: "gpu_vector: &HiveGpuVector", return_type: "Vector"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "distance_metric_to_gpu_metric", description: "Convert vectorizer distance metric to GPU metric", parameters: "metric: crate::models::DistanceMetric", return_type: "HiveGpuDistanceMetric"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "gpu_metric_to_distance_metric", description: "Convert GPU metric to vectorizer distance metric", parameters: "gpu_metric: HiveGpuDistanceMetric", return_type: "crate::models::DistanceMetric"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "hnsw_config_to_gpu_config", description: "Convert vectorizer HNSW config to GPU config", parameters: "config: &crate::models::HnswConfig", return_type: "HiveGpuHnswConfig"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "gpu_config_to_hnsw_config", description: "Convert GPU HNSW config to vectorizer config", parameters: "gpu_config: &HiveGpuHnswConfig", return_type: "crate::models::HnswConfig"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "gpu_error_to_vectorizer_error", description: "Convert GPU error to vectorizer error", parameters: "error: HiveGpuError", return_type: "VectorizerError"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "vectorizer_error_to_gpu_error", description: "Convert vectorizer error to GPU error", parameters: "error: VectorizerError", return_type: "HiveGpuError"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "hive_gpu", type: "External Crate", description: "GPU backend for vector operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde_json", type: "External Crate", description: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", type: "Standard Library", description: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "GpuAdapter", description: "Main adapter struct for GPU operations", methods: "vector_to_gpu_vector,gpu_vector_to_vector,distance_metric_to_gpu_metric,gpu_metric_to_distance_metric,hnsw_config_to_gpu_config,gpu_config_to_hnsw_config,gpu_error_to_vectorizer_error,vectorizer_error_to_gpu_error"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "GPU Adapter Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/error.rs
CREATE (doc:Document {
      id: "Vectorizer Error Types and Result Definitions",
      title: "Vectorizer Error Types and Result Definitions",
      domain: "software",
      doc_type: "rust_error_definitions"
    })
CREATE (e0:Module {name: "types", description: "Main Vectorizer module containing error types and result definitions"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "VectorizerError", description: "Main error enum for Vectorizer operations", derives: "Error,Debug"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "with_context", description: "Add context to an error", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "is_retryable", description: "Check if error is retryable", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "severity", description: "Get error severity", return_type: "ErrorSeverity"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "Result", description: "Vectorizer Result type alias", generic_params: "T,VectorizerError"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "serde_json", type: "external_crate", usage: "JSON serialization error handling"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde_yaml", type: "external_crate", usage: "YAML serialization error handling"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "candle_core", type: "external_crate", usage: "ML model operations", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "umicp_core", type: "external_crate", usage: "UMICP protocol operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "crate::embedding", type: "internal_module", usage: "Embedding operations error handling"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Vectorizer Error Types and Result Definitions"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/workspace/validator.rs
CREATE (doc:Document {
      id: "Workspace Configuration Validation Module",
      title: "Workspace Configuration Validation Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "workspace_validation", language: "rust", description: "Workspace configuration validation module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ValidationResult", visibility: "public", description: "Structure to hold validation results with errors and warnings"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "validate_workspace_config", visibility: "public", description: "Main function to validate workspace configuration"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "validate_workspace_metadata", visibility: "private", description: "Validates workspace metadata fields"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "validate_global_settings", visibility: "private", description: "Validates global workspace settings"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "validate_projects", visibility: "private", description: "Validates all projects in workspace"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "validate_project_config", visibility: "private", description: "Validates individual project configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "validate_collections", visibility: "private", description: "Validates project collections"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "validate_collection_config", visibility: "private", description: "Validates individual collection configuration"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "validate_embedding_config", visibility: "private", description: "Validates embedding configuration for different models"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "WorkspaceConfig", description: "Main workspace configuration structure"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "ProjectConfig", description: "Individual project configuration structure"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "CollectionConfig", description: "Collection configuration structure"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "EmbeddingConfig", description: "Embedding model configuration structure"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashSet", type: "standard_library", description: "HashSet for duplicate detection"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::path::Path", type: "standard_library", description: "Path handling for file system operations"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tracing", type: "external_crate", description: "Logging framework for debug, error, info, warn macros"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Workspace Configuration Validation Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/workspace/simplified_config.rs
CREATE (doc:Document {
      id: "Rust Vector Database Configuration Structures",
      title: "Rust Vector Database Configuration Structures",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "structures", language: "rust", purpose: "Configuration data structures for vector database workspace"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "SimplifiedWorkspaceConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", purpose: "Main workspace configuration container"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "WorkspaceMetadata", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Workspace identification and versioning"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "DefaultConfiguration", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Global defaults for all collections"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "EmbeddingConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Embedding model configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "IndexingConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Vector indexing configuration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ProcessingConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "File processing parameters"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "SimplifiedProjectConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Individual project configuration"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "SimplifiedCollectionConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Collection-specific configuration with overrides"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "default", visibility: "public", return_type: "Self", purpose: "Create default configuration instance"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", version: "latest", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde_yaml", version: "latest", purpose: "YAML serialization support"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::path::PathBuf", version: "standard", purpose: "Path handling"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Rust Vector Database Configuration Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/workspace/parser.rs
CREATE (doc:Document {
      id: "Workspace Configuration Parser",
      title: "Workspace Configuration Parser",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "workspace", language: "Rust", description: "Workspace configuration parsing and management module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "parse_workspace_config", visibility: "pub", description: "Parse YAML workspace configuration from file path", return_type: "Result<WorkspaceConfig>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "parse_workspace_config_from_str", visibility: "pub", description: "Parse workspace configuration from string content", return_type: "Result<WorkspaceConfig>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "parse_simplified_workspace_config_from_str", visibility: "pub", description: "Parse simplified workspace configuration from string", return_type: "Result<SimplifiedWorkspaceConfig>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "save_workspace_config", visibility: "pub", description: "Save workspace configuration to YAML file", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "find_workspace_config", visibility: "pub", description: "Search for workspace config file in directory hierarchy", return_type: "Result<Option<std::path::PathBuf>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "create_default_workspace_config", visibility: "pub", description: "Create default workspace configuration", return_type: "WorkspaceConfig"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "validate_workspace_config_file", visibility: "pub", description: "Validate workspace configuration file", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "WorkspaceConfig", description: "Main workspace configuration structure"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "SimplifiedWorkspaceConfig", description: "Simplified version of workspace configuration"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "VectorizerError", description: "Custom error type for vectorizer operations"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde_yaml", type: "external", description: "YAML serialization/deserialization library"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tracing", type: "external", description: "Structured logging framework"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_parse_workspace_config_from_str", description: "Test parsing workspace config from string content"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "vectorize-workspace.yml", type: "YAML", description: "Workspace configuration file"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "Workspace Configuration Parser"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/workspace/mod.rs
CREATE (doc:Document {
      id: "Workspace and Management Module",
      title: "Workspace and Management Module",
      domain: "software",
      doc_type: "rust_module_documentation"
    })
CREATE (e0:Module {name: "workspace_management", description: "Provides functionality for managing multiple projects through centralized workspace file", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "config", description: "Configuration management module"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "manager", description: "Project management functionality"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "simplified_config", description: "Simplified configuration handling"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "validator", description: "Validation functionality"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "parser", description: "Parsing functionality"})
CREATE (doc)-[:MENTIONS]->(e5)

MATCH (doc:Document {title: "Workspace and Management Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/workspace/manager.rs
CREATE (doc:Document {
      id: "WorkspaceManager Rust Module",
      title: "WorkspaceManager Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "WorkspaceManager", language: "rust", description: "Manages workspace configuration and project discovery"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "WorkspaceManager", visibility: "public", description: "Main workspace management struct"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create a new workspace manager instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "load_from_file", visibility: "public", description: "Load workspace configuration from file"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "try_load_simplified_config", visibility: "private", description: "Attempt to load simplified workspace configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "find_and_load", visibility: "public", description: "Find and load workspace configuration from directory"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "create_default", visibility: "public", description: "Create default workspace configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_project", visibility: "public", description: "Get project configuration by name"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_project_path", visibility: "public", description: "Get project directory path"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_collection_config", visibility: "public", description: "Get collection configuration for a project"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "add_project", visibility: "public", description: "Add new project to workspace"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "WorkspaceConfig", description: "Workspace configuration structure"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "SimplifiedWorkspaceConfig", description: "Simplified workspace configuration format"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "ProjectConfig", description: "Project configuration structure"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "CollectionConfig", description: "Collection configuration structure"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::path::{Path, PathBuf}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tracing::{debug, error, info, warn}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::workspace::config::*", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "crate::workspace::simplified_config::*", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::workspace::parser", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "WorkspaceManager Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/workspace/config.rs
CREATE (doc:Document {
      id: "Rust Vector Database Configuration Structures",
      title: "Rust Vector Database Configuration Structures",
      domain: "software",
      doc_type: "code_structures"
    })
CREATE (e0:Module {name: "structures", language: "rust", purpose: "Configuration structures for vector database workspace"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "WorkspaceConfig", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Main workspace configuration container"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "WorkspaceMetadata", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Workspace metadata information"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "GlobalSettings", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Global settings applied to all projects"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ProjectConfig", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Individual project configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CollectionConfig", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Vector collection configuration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "EmbeddingConfig", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Embedding model configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Enum {name: "EmbeddingModel", traits: "Debug,Clone,Serialize,Deserialize,PartialEq,Debug,Clone,Serialize,Deserialize,PartialEq", purpose: "Available embedding model types"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Enum {name: "DistanceMetric", traits: "Debug,Clone,Serialize,Deserialize,PartialEq", purpose: "Distance calculation methods for vector similarity"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "CollectionDefaults", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Default collection settings"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "QuantizationDefaults", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Quantization configuration defaults"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "CompressionConfig", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize", purpose: "Data compression settings"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "default", class: "CollectionConfig", visibility: "public", purpose: "Create default collection configuration"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "default", class: "EmbeddingConfig", visibility: "public", purpose: "Create default embedding configuration"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "default", class: "EmbeddingModel", visibility: "public", purpose: "Get default embedding model"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "default", class: "DistanceMetric", visibility: "public", purpose: "Get default distance metric"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::path::PathBuf", type: "standard_library", purpose: "Path buffer for file system paths"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "workspace_config", type: "yaml_configuration", purpose: "Main workspace configuration file"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "file_watcher_config", type: "yaml_configuration", purpose: "File system monitoring configuration"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Rust Vector Database Configuration Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/utils/mod.rs
CREATE (doc:Document {
      id: "Utility modules",
      title: "Utility modules",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "file_hash", visibility: "pub", path: "file_hash"})
CREATE (doc)-[:MENTIONS]->(e0)

MATCH (doc:Document {title: "Utility modules"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/utils/file_hash.rs
CREATE (doc:Document {
      id: "Rust File Hash Utilities",
      title: "Rust File Hash Utilities",
      domain: "software",
      doc_type: "source_code"
    })
CREATE (e0:Module {name: "sha2", description: "SHA256 hashing module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "calculate_file_hash", description: "Calculates SHA256 hash of a file", parameters: "file_path: &Path,file_path: &Path", return_type: "Result<String>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "get_file_modified_time", description: "Gets file modification time", parameters: "file_path: &Path", return_type: "Result<chrono::DateTime<chrono::Utc>>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Test {name: "test_calculate_file_hash_empty_file", description: "Tests hash calculation for empty file"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Test {name: "test_calculate_file_hash_with_content", description: "Tests hash calculation for file with content"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Test {name: "test_calculate_file_hash_consistency", description: "Tests hash consistency for same content"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Test {name: "test_calculate_file_hash_different_content", description: "Tests hash difference for different content"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "sha2", type: "crate", usage: "hashing"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "chrono", type: "crate", usage: "datetime handling"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tempfile", type: "crate", usage: "testing"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "Rust File Hash Utilities"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/umicp/transport.rs
CREATE (doc:Document {
      id: "UMICP Transport HTTP Handler",
      title: "UMICP Transport HTTP Handler",
      domain: "software",
      doc_type: "Rust HTTP Handler Module"
    })
CREATE (e0:Module {name: "umicp_handler", language: "Rust", framework: "axum", purpose: "HTTP request handler for UMICP protocol"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "umicp_handler", parameters: "State<UmicpState>,Request,State<UmicpState>", return_type: "impl IntoResponse", async: "true"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "umicp_discover_handler", parameters: "State<UmicpState>", return_type: "impl IntoResponse", async: "true"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Dependency {name: "axum", type: "HTTP framework", modules: "extract,http,response,body,json,debug,error,info,DiscoverableService,Envelope"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "serde_json", type: "JSON serialization", modules: "json"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "tracing", type: "Logging framework", modules: "debug,error,info"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "umicp_core", type: "Core UMICP protocol", modules: "DiscoverableService,Envelope"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "UmicpState", type: "Application state"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "VectorizerDiscoveryService", type: "Discovery service"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "Envelope", type: "UMICP message envelope", methods: "validate,serialize,deserialize,from,to,operation"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "UMICP HTTP API", endpoints: "/umicp,/umicp/discover", methods: "POST,GET", protocol: "HTTP"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "HTTP Status Codes", values: "BAD_REQUEST,OK,INTERNAL_SERVER_ERROR"})
CREATE (doc)-[:MENTIONS]->(e11)

MATCH (doc:Document {title: "UMICP Transport HTTP Handler"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/umicp/mod.rs
CREATE (doc:Document {
      id: "UMICP Protocol Vectorizer",
      title: "UMICP Protocol Vectorizer",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "umicp_protocol_vectorizer", version: "0.2.1", description: "provides UMICP protocol enabling HTTP"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "health_check", return_type: "Json<serde_json::Value>", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "UmicpState", derive: "Clone", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Dependency {name: "serde_json", usage: "JSON serialization"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "crate::db::VectorStore", usage: "vector storage"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "crate::embedding::EmbeddingManager", usage: "embedding management"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:API {name: "UMICP", version: "1.0", transport: "streamable-http"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Test {name: "test_umicp_module_exists", type: "module_compilation_test"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "CARGO_PKG_VERSION", type: "environment_variable"})
CREATE (doc)-[:MENTIONS]->(e8)

MATCH (doc:Document {title: "UMICP Protocol Vectorizer"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/umicp/handlers.rs
CREATE (doc:Document {
      id: "UMICP Handlers MCP",
      title: "UMICP Handlers MCP",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "umicp_handlers", description: "UMICP MCP handlers for processing envelopes and tool requests"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "handle_umicp_request", description: "Main handler for processing UMICP envelopes and converting to MCP requests", parameters: "state: UmicpState,envelope: Envelope,tool_name: &str,caps: &HashMap<String, Value>,content: &[Content],request: Envelope,result: Value", return_type: "Result<Envelope, VectorizerError>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "capabilities_to_mcp_request", description: "Converts UMICP capabilities to MCP CallToolRequest format", parameters: "tool_name: &str,caps: &HashMap<String, Value>", return_type: "Result<CallToolRequestParam>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "content_to_json", description: "Converts MCP Content array to JSON Value", parameters: "content: &[Content]", return_type: "serde_json::Value"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "create_success_response", description: "Creates success response envelope with JSON result", parameters: "request: Envelope,result: Value", return_type: "Envelope"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "rmcp::model", type: "external_crate", items: "CallToolRequestParam,Content,Value,json,debug,error,Envelope,OperationType"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde_json", type: "external_crate", items: "Value,json"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "tracing", type: "external_crate", items: "debug,error"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "umicp_core", type: "external_crate", items: "Envelope,OperationType"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "UmicpState", description: "State container for UMICP operations"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "Envelope", description: "UMICP message envelope with operation and routing info"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "CallToolRequestParam", description: "MCP tool request parameter structure"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "MCP Tool Handler", description: "Interface for handling MCP tool requests", endpoint: "crate::server::mcp_handlers::handle_mcp_tool"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "UMICP Handlers MCP"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/umicp/discovery.rs
CREATE (doc:Document {
      id: "UMICP Tool Vectorizer Discovery Service",
      title: "UMICP Tool Vectorizer Discovery Service",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "VectorizerDiscoveryService", language: "rust", purpose: "UMICP discovery service for vectorizer MCP tools"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "VectorizerDiscoveryService", type: "struct", implements: "DiscoverableService"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "server_info", return_type: "ServerInfo", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "list_operations", return_type: "Vec<OperationSchema>", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "serde_json", type: "external_crate", usage: "JSON serialization"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "umicp_core", type: "external_crate", usage: "UMICP protocol implementation"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:API {name: "MCP Tools API", endpoint: "get_mcp_tools", purpose: "Retrieve MCP tool definitions"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Test {name: "test_server_info", type: "unit_test", purpose: "Test server info generation"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Test {name: "test_list_operations", type: "unit_test", purpose: "Test operations listing"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Test {name: "test_operation_has_required_fields", type: "unit_test", purpose: "Validate operation schema structure"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_search_vectors_operation", type: "unit_test", purpose: "Test search operation specific properties"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "Server Features", type: "feature_list", values: "semantic-search,vector-storage,intelligent-discovery,file-operations,batch-operations,workspace-management,mcp-compatible"})
CREATE (doc)-[:MENTIONS]->(e11)

MATCH (doc:Document {title: "UMICP Tool Vectorizer Discovery Service"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/transmutation_integration/types.rs
CREATE (doc:Document {
      id: "Rust Document Converter Module",
      title: "Rust Document Converter Module",
      domain: "software",
      doc_type: "code_module"
    })
CREATE (e0:Module {name: "document_converter", language: "rust", description: "Module for converting documents to markdown with pagination support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "PageInfo", visibility: "public", description: "Information about page boundaries in converted documents"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ConvertedDocument", visibility: "public", description: "Result structure containing converted markdown content and metadata"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Create a new converted document with basic content"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "with_pages", visibility: "public", description: "Create a converted document with pagination information"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "with_metadata", visibility: "public", description: "Add metadata to a converted document"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Standard HashMap for key-value storage"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e7)

MATCH (doc:Document {title: "Rust Document Converter Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/transmutation_integration/mod.rs
CREATE (doc:Document {
      id: "TransmutationProcessor - Document Conversion Module",
      title: "TransmutationProcessor - Document Conversion Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "transmutation_processor", description: "Provides document conversion functionality for various formats (PDF, DOCX, XLSX, PPTX, etc.) to Markdown", language: "rust", features: "transmutation"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "TransmutationProcessor", description: "Main processor for document conversion operations", visibility: "pub", fields: "converter"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new transmutation processor", visibility: "pub", return_type: "Result<Self>", async: "false"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "is_supported_format", description: "Check if file format is supported for conversion", visibility: "pub", parameters: "file_path: &Path,file_path: &Path,result: &transmutation::ConversionResult", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "convert_to_markdown", description: "Convert document to Markdown format", visibility: "pub", parameters: "file_path: &Path", return_type: "Result<ConvertedDocument>", async: "true"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "extract_page_info", description: "Extract page information from conversion result", visibility: "pub", parameters: "result: &transmutation::ConversionResult", return_type: "Option<Vec<PageInfo>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "transmutation", type: "external_crate", description: "Document conversion library", features: "transmutation"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "tracing", type: "external_crate", description: "Logging and tracing framework"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::path::Path", type: "standard_library", description: "Path handling utilities"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Type {name: "ConvertedDocument", description: "Result type for converted documents", source: "types module"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Type {name: "PageInfo", description: "Page information structure", source: "types module"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Type {name: "ConversionOptions", description: "Configuration options for document conversion", source: "transmutation crate"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Type {name: "OutputFormat", description: "Output format specification", source: "transmutation crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "ConversionOptions", description: "Document conversion configuration", properties: "split_pages,optimize_for_llm,preserve_layout,extract_tables,extract_images,include_metadata,normalize_whitespace"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "cfg(test)", description: "Test configuration block", scope: "module"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "TransmutationProcessor - Document Conversion Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/writer.rs
CREATE (doc:Document {
      id: "Storage Writer Module",
      title: "Storage Writer Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "storage::writer", description: "Storage writer for vectorizer data with compression and atomic operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "StorageWriter", description: "Writer for creating compressed vectorizer archives", fields: "compression_level,data_dir"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new storage writer instance", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "write_archive", description: "Write archive from directory with atomic operations", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "write_from_memory", description: "Write archive from memory collections with atomic operations", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "create_archive", description: "Create archive from source directory", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "create_archive_from_memory", description: "Create archive from persisted collections in memory", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::fs", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::io", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::path", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "sha2", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "tracing", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "walkdir", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "zip", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "compression_level", type: "i32", range: "1-22", description: "Zstd compression level"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "data_dir", type: "PathBuf", description: "Data directory path"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "StorageIndex", description: "Index for storage operations"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "CollectionIndex", description: "Index for collection data"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "PersistedCollection", description: "Persisted collection data structure"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Storage Writer Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/snapshot.rs
CREATE (doc:Document {
      id: "SnapshotManager Rust Module",
      title: "SnapshotManager Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "management", language: "rust", description: "Snapshot management module for vectorizer storage"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "SnapshotManager", visibility: "public", description: "Manages snapshots of vectorizer database files"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Self", description: "Create a new snapshot manager instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "create_snapshot", visibility: "public", return_type: "Result<SnapshotInfo>", description: "Create a new snapshot of the database"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "list_snapshots", visibility: "public", return_type: "Result<Vec<SnapshotInfo>>", description: "List all available snapshots"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_snapshot", visibility: "public", return_type: "Result<Option<SnapshotInfo>>", description: "Get a specific snapshot by ID"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "restore_snapshot", visibility: "public", return_type: "Result<()>", description: "Restore database from a snapshot"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "delete_snapshot", visibility: "public", return_type: "Result<bool>", description: "Delete a specific snapshot"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "cleanup_old_snapshots", visibility: "private", return_type: "Result<usize>", description: "Clean up old snapshots based on retention policy"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "save_snapshot_metadata", visibility: "private", return_type: "Result<()>", description: "Save snapshot metadata to JSON file"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "load_snapshot_metadata", visibility: "private", return_type: "Result<SnapshotInfo>", description: "Load snapshot metadata from JSON file"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::fs", type: "standard_library", description: "File system operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::io", type: "standard_library", description: "Input/output operations"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::path", type: "standard_library", description: "Path manipulation"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "chrono", type: "external_crate", description: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "serde", type: "external_crate", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tracing", type: "external_crate", description: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "data_dir", type: "PathBuf", description: "Data directory containing .vecdb file"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "snapshots_dir", type: "PathBuf", description: "Snapshots directory"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "max_snapshots", type: "usize", description: "Maximum number of snapshots to keep"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "retention_days", type: "i64", description: "Retention period in days"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Database {name: "VECDB_FILE", type: "vector_database", description: "Vector database file"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Database {name: "VECIDX_FILE", type: "vector_index", description: "Vector index file"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "SnapshotManager Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/reader.rs
CREATE (doc:Document {
      id: "Storage Reader Implementation",
      title: "Storage Reader Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "StorageReader", language: "Rust", description: "Reader for compressed vector database storage with caching"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "StorageReader", visibility: "public", description: "Main storage reader struct with caching capabilities"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create a new storage reader instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "get_index", visibility: "public", description: "Get the storage index"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "list_collections", visibility: "public", description: "List all available collections"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_collection", visibility: "public", description: "Get a specific collection by name"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "read_file", visibility: "public", description: "Read a file with caching support"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "read_file_from_archive", visibility: "private", description: "Read file directly from ZIP archive"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "read_collection_files", visibility: "public", description: "Read all files in a collection"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "clear_cache", visibility: "public", description: "Clear the file cache"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "cache_stats", visibility: "public", description: "Get cache statistics"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "extract_all_collections", visibility: "public", description: "Extract all collections from compressed archive in memory"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "read_collection_in_memory", visibility: "private", description: "Read collection data in memory without temp files"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for caching"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::fs::File", type: "standard_library", description: "File I/O operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::io::{Read, Seek}", type: "standard_library", description: "I/O traits for reading and seeking"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::path::{Path, PathBuf}", type: "standard_library", description: "Path handling utilities"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library", description: "Thread-safe reference counting and read-write locks"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "zip::ZipArchive", type: "external_crate", description: "ZIP archive handling"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module", description: "Error handling types"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::storage::{CollectionIndex, StorageIndex}", type: "internal_module", description: "Storage index types"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "max_cache_size", type: "usize", default_value: "100 * 1024 * 1024", description: "Maximum cache size in bytes (100MB default)"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "vecdb_path", type: "PathBuf", description: "Path to .vecdb file"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "file_cache", type: "HashMap<String, Vec<u8>>", description: "Cache for decompressed files"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "Storage Reader Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/mod.rs
CREATE (doc:Document {
      id: "Storage Vectorizer Module",
      title: "Storage Vectorizer Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "storage", description: "Storage vectorizer with unified (.vecdb/.vecidx) format support", version: "1.0"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "detect_format", description: "Detects storage format (Legacy vs Compact) based on file presence", parameters: "data_dir: &Path,data_dir: &Path,data_dir: &Path,data_dir: &Path,data_dir: &Path", return_type: "StorageFormat"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "load_or_initialize", description: "Loads or initializes storage, handling format detection and migration", parameters: "data_dir: &Path", return_type: "Result<usize>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "vecdb_path", description: "Returns path to .vecdb file", parameters: "data_dir: &Path", return_type: "PathBuf"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "vecidx_path", description: "Returns path to .vecidx file", parameters: "data_dir: &Path", return_type: "PathBuf"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "snapshots_dir", description: "Returns path to snapshots directory", parameters: "data_dir: &Path", return_type: "PathBuf"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "StorageFormat", description: "Enum representing storage format types", variants: "Legacy,Compact"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "STORAGE_VERSION", value: "1.0", description: "Storage format version"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "VECDB_FILE", value: "vectorizer.vecdb", description: "Default .vecdb filename"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "VECIDX_FILE", value: "vectorizer.vecidx", description: "Default .vecidx filename"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "TEMP_SUFFIX", value: ".tmp", description: "Temporary file suffix"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "SNAPSHOT_DIR", value: "snapshots", description: "Snapshots directory name"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_detect_format_legacy", description: "Tests legacy format detection"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_detect_format_compact", description: "Tests compact format detection"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "test_paths", description: "Tests path generation functions"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "test_storage_version", description: "Tests storage version constant"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Test {name: "test_file_constants", description: "Tests file constant values"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Test {name: "test_detect_format_legacy_with_files", description: "Tests legacy format detection with actual files"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "Storage Vectorizer Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/migration.rs
CREATE (doc:Document {
      id: "StorageMigrator - Vector Database Migration System",
      title: "StorageMigrator - Vector Database Migration System",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "StorageMigrator", language: "Rust", purpose: "Handles migration from legacy vector storage format to .vecdb format"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "StorageMigrator", visibility: "public", fields: "data_dir: PathBuf,compression_level: i32"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", parameters: "data_dir: impl AsRef<Path>,compression_level: i32,src: &Path,dst: &Path", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "needs_migration", visibility: "public", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "migrate", visibility: "public", return_type: "Result<MigrationResult>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "create_backup", visibility: "private", return_type: "Result<PathBuf>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "find_legacy_data_dir", visibility: "private", return_type: "Result<PathBuf>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "count_legacy_collections", visibility: "private", return_type: "Result<usize>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "remove_legacy_files", visibility: "private", return_type: "Result<usize>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "copy_dir_recursive", visibility: "private", parameters: "src: &Path,dst: &Path", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::fs", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::path::{Path, PathBuf}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "chrono::Utc", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tracing::{error, info, warn}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::storage::{StorageCompactor, StorageFormat, detect_format}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "compression_level", type: "i32", purpose: "Controls compression level during migration"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "data_dir", type: "PathBuf", purpose: "Directory containing vector data to migrate"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "MigrationResult", fields: "success: bool,collections_migrated: usize,backup_path: Option<PathBuf>,message: String"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "StorageMigrator - Vector Database Migration System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/index.rs
CREATE (doc:Document {
      id: "Vectorizer Storage Index Management",
      title: "Vectorizer Storage Index Management",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "storage_index", language: "rust", purpose: "Management of .vecidx files for vector storage"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "StorageIndex", visibility: "public", purpose: "Main index structure for .vecdb archives"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CollectionIndex", visibility: "public", purpose: "Index for a single collection within the archive"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "FileEntry", visibility: "public", purpose: "Individual file entry within a collection"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "FileType", visibility: "public", purpose: "Enumeration of file types in the archive"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", class: "StorageIndex", visibility: "public", purpose: "Create a new storage index"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "add_collection", class: "StorageIndex", visibility: "public", purpose: "Add a collection to the index"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "update_compression_ratio", class: "StorageIndex", visibility: "private", purpose: "Update compression ratio calculation"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "find_collection", class: "StorageIndex", visibility: "public", purpose: "Find collection by name"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "find_collection_mut", class: "StorageIndex", visibility: "public", purpose: "Find collection by name (mutable reference)"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "remove_collection", class: "StorageIndex", visibility: "public", purpose: "Remove collection from index"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "save", class: "StorageIndex", visibility: "public", purpose: "Save index to file"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "load", class: "StorageIndex", visibility: "public", purpose: "Load index from file"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "total_vectors", class: "StorageIndex", visibility: "public", purpose: "Calculate total vectors across all collections"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "collection_count", class: "StorageIndex", visibility: "public", purpose: "Get number of collections"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "new", class: "CollectionIndex", visibility: "public", purpose: "Create a new collection index"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "add_file", class: "CollectionIndex", visibility: "public", purpose: "Add file to collection"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "total_size", class: "CollectionIndex", visibility: "public", purpose: "Calculate total size of files in collection"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "compressed_size", class: "CollectionIndex", visibility: "public", purpose: "Calculate compressed size of files in collection"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "std::fs", type: "standard_library", purpose: "File system operations"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "chrono::{DateTime, Utc}", type: "external_crate", purpose: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module", purpose: "Error handling types"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Configuration {name: "STORAGE_VERSION", type: "constant", purpose: "Storage format version"})
CREATE (doc)-[:MENTIONS]->(e24)

MATCH (doc:Document {title: "Vectorizer Storage Index Management"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/config.rs
CREATE (doc:Document {
      id: "Storage Configuration Structures",
      title: "Storage Configuration Structures",
      domain: "software",
      doc_type: "rust_code_structure"
    })
CREATE (e0:Module {name: "std::path", purpose: "Path handling utilities"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "serde", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "StorageConfig", purpose: "Main storage configuration container", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CompressionConfig", purpose: "Compression settings configuration", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "SnapshotConfig", purpose: "Snapshot management configuration", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CompactionConfig", purpose: "Data compaction configuration", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "default_enabled", purpose: "Default value for boolean enabled fields", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "default_format", purpose: "Default compression format", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "default_level", purpose: "Default compression level", return_type: "i32"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "default_interval_hours", purpose: "Default snapshot interval", return_type: "u64"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "default_retention_days", purpose: "Default retention period", return_type: "u64"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "default_max_snapshots", purpose: "Default maximum snapshots", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "default_snapshot_path", purpose: "Default snapshot directory path", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "default_batch_size", purpose: "Default compaction batch size", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "compression_settings", purpose: "Compression configuration options", fields: "enabled,format,level,enabled,interval_hours,retention_days,max_snapshots,path,batch_size,auto_compact"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "snapshot_settings", purpose: "Snapshot management options", fields: "enabled,interval_hours,retention_days,max_snapshots,path"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "compaction_settings", purpose: "Data compaction options", fields: "batch_size,auto_compact"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Storage Configuration Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/storage/compact.rs
CREATE (doc:Document {
      id: "StorageCompactor Implementation",
      title: "StorageCompactor Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "StorageCompactor", language: "Rust", purpose: "Storage compaction and vector database management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "StorageCompactor", visibility: "pub", fields: "data_dir,compression_level,batch_size,pending_operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "pub", parameters: "data_dir,compression_level,batch_size,store", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "compact_all", visibility: "pub", return_type: "Result<StorageIndex>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "compact_from_memory", visibility: "pub", parameters: "store", return_type: "Result<StorageIndex>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "std::ops::Deref", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std::path::{Path, PathBuf}", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "tracing::{debug, error, info, warn}", type: "External Crate"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "crate::error::{Result, VectorizerError}", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "crate::storage::{StorageIndex, StorageReader, StorageWriter}", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "crate::db::VectorStore", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "crate::persistence::PersistedVector", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "compression_level", type: "i32", purpose: "Controls compression level for storage"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "batch_size", type: "usize", purpose: "Controls batch size for incremental updates"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Database {name: "vectorizer.vecdb", type: "Vector Database", purpose: "Main vector storage file"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "compact_all", purpose: "Compact storage from directory"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "compact_from_memory", purpose: "Compact storage from memory store"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "StorageCompactor Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/summarization/types.rs
CREATE (doc:Document {
      id: "Rust Summarization Library Types and Configuration",
      title: "Rust Summarization Library Types and Configuration",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "std::collections::HashMap", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "serde::{Deserialize, Serialize}", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "SummarizationMethod", language: "Rust", visibility: "public", traits: "Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "MethodConfig", language: "Rust", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "LanguageConfig", language: "Rust", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "MetadataConfig", language: "Rust", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "SummarizationResult", language: "Rust", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "SummaryInfo", language: "Rust", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "fmt", language: "Rust", visibility: "public", trait: "Display"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "from_str", language: "Rust", visibility: "public", trait: "FromStr"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "default", language: "Rust", visibility: "public", trait: "Default"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", version: "latest", purpose: "Serialization/Deserialization"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "chrono", version: "latest", purpose: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "MethodConfig", type: "struct", purpose: "Configuration for summarization methods"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "LanguageConfig", type: "struct", purpose: "Language-specific configuration"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "MetadataConfig", type: "struct", purpose: "Metadata configuration for summaries"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Rust Summarization Library Types and Configuration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/summarization/mod.rs
CREATE (doc:Document {
      id: "Rust Module Structure Analysis",
      title: "Rust Module Structure Analysis",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "config", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "manager", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "methods", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "types", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "tests", language: "rust", conditional: "cfg(test)"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "SummarizationConfig", module: "config"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "SummarizationManager", module: "manager"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Trait {name: "SummarizationMethodTrait", module: "methods"})
CREATE (doc)-[:MENTIONS]->(e7)

MATCH (doc:Document {title: "Rust Module Structure Analysis"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/summarization/methods.rs
CREATE (doc:Document {
      id: "Rust Text Summarization Module",
      title: "Rust Text Summarization Module",
      domain: "software",
      doc_type: "source_code"
    })
CREATE (e0:Module {name: "std::collections::HashMap", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "crate::embedding", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Trait {name: "SummarizationMethodTrait", language: "Rust", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ExtractiveSummarizer", language: "Rust", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "summarize", language: "Rust", visibility: "public", return_type: "Result<String, SummarizationError>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "is_available", language: "Rust", visibility: "public", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "name", language: "Rust", visibility: "public", return_type: "&'static str"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new", language: "Rust", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "split_sentences", language: "Rust", visibility: "private", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "cosine_similarity", language: "Rust", visibility: "private", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "mmr_selection", language: "Rust", visibility: "private", return_type: "Result<Vec<usize>, SummarizationError>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "SummarizationParams", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "MethodConfig", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "SummarizationError", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "Bm25Embedding", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "TfIdfEmbedding", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Trait {name: "EmbeddingProvider", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Rust Text Summarization Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/summarization/manager.rs
CREATE (doc:Document {
      id: "SummarizationManager Rust Implementation",
      title: "SummarizationManager Rust Implementation",
      domain: "software",
      doc_type: "code_implementation"
    })
CREATE (e0:Class {name: "SummarizationManager", language: "Rust", visibility: "public", description: "Manager for text summarization operations with multiple methods"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "std::collections::HashMap", description: "Standard library HashMap for caching summaries"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "chrono::Utc", description: "Chrono library for UTC timestamps"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "crate::summarization::config::SummarizationConfig", description: "Configuration module for summarization settings"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "crate::summarization::methods", description: "Module containing summarization method implementations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ExtractiveSummarizer", description: "Extractive summarization implementation"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "KeywordSummarizer", description: "Keyword-based summarization implementation"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "SentenceSummarizer", description: "Sentence-based summarization implementation"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "AbstractiveSummarizer", description: "Abstractive summarization implementation"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "SummarizationMethodTrait", description: "Trait defining summarization method interface"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "SummarizationConfig", description: "Configuration structure for summarization settings"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "new", visibility: "public", description: "Constructor for SummarizationManager"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "with_default_config", visibility: "public", description: "Create manager with default configuration"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "with_enabled_config", visibility: "public", description: "Create manager with enabled configuration"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "get_config", visibility: "public", description: "Get configuration reference"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "summarize_text", visibility: "public", description: "Main text summarization function"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "summarize_context", visibility: "public", description: "Context-based summarization function"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "get_summary", visibility: "public", description: "Retrieve summary by ID"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "list_summaries", visibility: "public", description: "List summaries with filtering and pagination"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "is_auto_summarization_enabled", visibility: "public", description: "Check if auto-summarization is enabled"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "get_summary_collection_name", visibility: "public", description: "Get summary collection name"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "get_default_method", visibility: "public", description: "Get default summarization method"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Function {name: "validate_params", visibility: "private", description: "Validate summarization parameters"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:API {name: "SummarizationParams", description: "API structure for summarization parameters"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:API {name: "ContextSummarizationParams", description: "API structure for context summarization parameters"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:API {name: "SummarizationResult", description: "API structure for summarization results"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:API {name: "SummaryInfo", description: "API structure for summary information"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:API {name: "SummarizationError", description: "API structure for summarization errors"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:API {name: "SummarizationMethod", description: "API enum for summarization methods"})
CREATE (doc)-[:MENTIONS]->(e28)

MATCH (doc:Document {title: "SummarizationManager Rust Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/summarization/config.rs
CREATE (doc:Document {
      id: "SummarizationConfig Rust Module",
      title: "SummarizationConfig Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "summarization::config", language: "rust", purpose: "Configuration management for summarization functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "SummarizationConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Main configuration struct for summarization settings"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "default", visibility: "public", purpose: "Creates default configuration instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "from_yaml", visibility: "public", parameters: "config: &serde_yaml::Value", return_type: "Result<Self, String>", purpose: "Creates configuration from YAML values"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "crate::summarization::types", type: "internal_module", imports: "LanguageConfig,MetadataConfig,MethodConfig,SummarizationMethod", purpose: "Internal type definitions"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "enabled", type: "bool", purpose: "Enable automatic summarization"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "auto_summarize", type: "bool", purpose: "Summarize automatically during indexing"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "summary_collection", type: "String", purpose: "Collection name for storing summaries"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "default_method", type: "String", purpose: "Default summarization method"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "methods", type: "HashMap<String, MethodConfig>", purpose: "Method-specific configurations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "languages", type: "HashMap<String, LanguageConfig>", purpose: "Language-specific configurations"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "metadata", type: "MetadataConfig", purpose: "Metadata configuration settings"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "SummarizationConfig Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/rest_handlers.rs
CREATE (doc:Document {
      id: "REST API Vectorizer Server",
      title: "REST API Vectorizer Server",
      domain: "software",
      doc_type: "Rust API Implementation"
    })
CREATE (e0:Module {name: "vectorizer_server", language: "Rust", purpose: "REST API endpoints for vector search operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "health_check", return_type: "Json<Value>", purpose: "Health check endpoint returning system status"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "get_stats", parameters: "State<VectorizerServer>,State<VectorizerServer>,State<VectorizerServer>,Path<String>,Json<Value>,State<VectorizerServer>,Path<String>,Json<Value>,State<VectorizerServer>,Path<String>,Query<HashMap<String, String>>", return_type: "Json<Value>", purpose: "Get system statistics including collections and cache metrics"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "get_indexing_progress", parameters: "State<VectorizerServer>", return_type: "Json<Value>", purpose: "Get indexing progress status for all collections"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "search_vectors_by_text", parameters: "State<VectorizerServer>,Path<String>,Json<Value>", return_type: "Result<Json<Value>, StatusCode>", purpose: "Search vectors by text query with caching and metrics"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "search_by_file", parameters: "State<VectorizerServer>,Path<String>,Json<Value>", return_type: "Result<Json<Value>, StatusCode>", purpose: "Search vectors by file path (placeholder implementation)"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "list_vectors", parameters: "State<VectorizerServer>,Path<String>,Query<HashMap<String, String>>", return_type: "Result<Json<Value>, StatusCode>", purpose: "List vectors with pagination and filtering"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "VectorizerServer", purpose: "Main server state containing store, cache, and embedding manager"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "axum", type: "HTTP framework", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde_json", type: "JSON serialization", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "tracing", type: "Logging framework", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "chrono", type: "Date/time handling", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "Health Check API", endpoint: "/health", method: "GET", purpose: "System health monitoring"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "Stats API", endpoint: "/stats", method: "GET", purpose: "System statistics retrieval"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "Search API", endpoint: "/search/{collection}", method: "POST", purpose: "Vector search by text query"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "List Vectors API", endpoint: "/vectors/{collection}", method: "GET", purpose: "List vectors with pagination"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "Query Cache", purpose: "Caching layer for search queries", properties: "size,capacity,hits,misses,evictions,hit_rate,search_latency_seconds,search_requests_total,search_results_count"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "Metrics", purpose: "Performance monitoring and metrics collection", properties: "search_latency_seconds,search_requests_total,search_results_count"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "REST API Vectorizer Server"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/replication_handlers.rs
CREATE (doc:Document {
      id: "REST API Replication Configuration",
      title: "REST API Replication Configuration",
      domain: "software",
      doc_type: "API Documentation"
    })
CREATE (e0:Module {name: "replication", description: "Replication management module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "get_replication_status", description: "Get current replication status and statistics", return_type: "Result<Json<ReplicationStatusResponse>, (StatusCode, String)>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "configure_replication", description: "Configure replication settings and role", return_type: "Result<Json<Value>, (StatusCode, String)>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ConfigureReplicationRequest", description: "Request structure for replication configuration", fields: "role,bind_address,master_address,heartbeat_interval,log_size,role,enabled,stats,replicas"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ReplicationStatusResponse", description: "Response structure for replication status", fields: "role,enabled,stats,replicas"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "VectorizerServer", description: "Main server state containing replication nodes"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "axum", version: "latest", type: "web_framework"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde", version: "latest", type: "serialization"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "tracing", version: "latest", type: "logging"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "replication_status_endpoint", method: "GET", path: "/replication/status", description: "Get replication status"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "configure_replication_endpoint", method: "POST", path: "/replication/configure", description: "Configure replication settings"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "replication_role", type: "string", values: "master,replica,standalone"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "replication_bind_address", type: "string", description: "Address for master node binding"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "replication_master_address", type: "string", description: "Master node address for replicas"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "REST API Replication Configuration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/qdrant_vector_handlers.rs
CREATE (doc:Document {
      id: "Qdrant Operations REST API",
      title: "Qdrant Operations REST API",
      domain: "software",
      doc_type: "API Implementation"
    })
CREATE (e0:Module {name: "operations", description: "REST API operations for Qdrant vector database integration"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "qdrant_value_to_json_value", description: "Converts QdrantValue to serde_json::Value", parameters: "value: QdrantValue,value: serde_json::Value,State<VectorizerServer>,Path<String>,Json<QdrantPointUpsertRequest>,State<VectorizerServer>,Path<String>,Json<QdrantPointRetrieveRequest>,State<VectorizerServer>,Path<String>,Json<QdrantPointDeleteRequest>", return_type: "serde_json::Value"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "json_value_to_qdrant_value", description: "Converts serde_json::Value to QdrantValue", parameters: "value: serde_json::Value", return_type: "QdrantValue"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "upsert_points", description: "Upserts points to a Qdrant collection", parameters: "State<VectorizerServer>,Path<String>,Json<QdrantPointUpsertRequest>", return_type: "Result<Json<QdrantPointOperationResult>, ErrorResponse>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "retrieve_points", description: "Retrieves points from a Qdrant collection", parameters: "State<VectorizerServer>,Path<String>,Json<QdrantPointRetrieveRequest>", return_type: "Result<Json<QdrantPointRetrieveResponse>, ErrorResponse>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "delete_points", description: "Deletes points from a Qdrant collection", parameters: "State<VectorizerServer>,Path<String>,Json<QdrantPointDeleteRequest>", return_type: "Result<Json<QdrantPointOperationResult>, ErrorResponse>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:API {name: "Qdrant Operations API", description: "REST API for Qdrant vector database operations", endpoints: "upsert_points,retrieve_points,delete_points"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Database {name: "Qdrant", description: "Vector database for storing and querying vector embeddings"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "CollectionConfig", description: "Configuration for vector collections"})
CREATE (doc)-[:MENTIONS]->(e8)

MATCH (doc:Document {title: "Qdrant Operations REST API"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/qdrant_search_handlers.rs
CREATE (doc:Document {
      id: "Qdrant REST API Implementation",
      title: "Qdrant REST API Implementation",
      domain: "software",
      doc_type: "rust_api_implementation"
    })
CREATE (e0:Module {name: "qdrant_api", language: "rust", purpose: "REST API endpoints for Qdrant vector database operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "json_value_to_qdrant_value", return_type: "QdrantValue", parameters: "value: serde_json::Value,State<VectorizerServer>,Path<String>,Json<QdrantSearchRequest>,State<VectorizerServer>,Path<String>,Json<QdrantRecommendRequest>", purpose: "Convert JSON values to Qdrant-compatible values"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "search_points", return_type: "Result<Json<QdrantSearchResponse>, ErrorResponse>", parameters: "State<VectorizerServer>,Path<String>,Json<QdrantSearchRequest>", purpose: "Search for similar vectors in a collection"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "recommend_points", return_type: "Result<Json<QdrantRecommendResponse>, ErrorResponse>", parameters: "State<VectorizerServer>,Path<String>,Json<QdrantRecommendRequest>", purpose: "Recommend vectors based on positive and negative examples"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "VectorizerServer", purpose: "Main server state containing vector store"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QdrantValue", purpose: "Enum representing Qdrant-compatible value types"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QdrantScoredPoint", purpose: "Search result with score and metadata"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "axum", version: "latest", purpose: "Web framework for HTTP handlers"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "serde_json", version: "latest", purpose: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tracing", version: "latest", purpose: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "search_endpoint", method: "POST", path: "/collections/{collection_name}/search", purpose: "Search vectors in collection"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "recommend_endpoint", method: "POST", path: "/collections/{collection_name}/recommend", purpose: "Recommend vectors based on examples"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Database {name: "qdrant_vector_store", type: "vector_database", purpose: "Store and search vector embeddings"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Qdrant REST API Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/qdrant_handlers.rs
CREATE (doc:Document {
      id: "REST API Vectorizer Server - Qdrant Integration",
      title: "REST API Vectorizer Server - Qdrant Integration",
      domain: "software",
      doc_type: "Rust API Implementation"
    })
CREATE (e0:Module {name: "vectorizer_server", language: "Rust", purpose: "REST API server for vector operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "extract_payload_schema", return_type: "HashMap<String, QdrantPayloadSchema>", purpose: "Extract payload schema from collection vectors"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "analyze_payload_structure", parameters: "value: &serde_json::Value,schema: &mut HashMap<String, QdrantPayloadSchema>", purpose: "Recursively analyze JSON payload structure"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "convert_qdrant_hnsw_config", return_type: "crate::models::HnswConfig", purpose: "Convert Qdrant HNSW configuration to internal format"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "convert_qdrant_optimizer_config", return_type: "HashMap<String, serde_json::Value>", purpose: "Convert Qdrant optimizer configuration to internal format"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_collections", return_type: "Result<Json<QdrantCollectionListResponse>, ErrorResponse>", purpose: "Retrieve all collections from the vectorizer store"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "VectorizerServer", purpose: "Main server state container"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "axum", version: "latest", purpose: "Web framework for HTTP server"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "serde_json", version: "latest", purpose: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tracing", version: "latest", purpose: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "QdrantHnswConfig", purpose: "HNSW algorithm configuration for vector indexing"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "QdrantOptimizerConfig", purpose: "Optimizer settings for collection management"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "Collections API", endpoint: "/collections", method: "GET", purpose: "Retrieve all vector collections"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Database {name: "Qdrant", purpose: "Vector database for storing and querying vectors"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "REST API Vectorizer Server - Qdrant Integration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/mod.rs
CREATE (doc:Document {
      id: "Vectorizer Server Architecture Analysis",
      title: "Vectorizer Server Architecture Analysis",
      domain: "software",
      doc_type: "rust_server_architecture"
    })
CREATE (e0:Module {name: "discovery_handlers", description: "Handles discovery operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "error_middleware", description: "Error handling middleware"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "file_operations_handlers", description: "File operation handlers"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "mcp_connection_manager", description: "MCP connection management"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "mcp_handlers", description: "MCP request handlers"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "mcp_performance", description: "MCP performance monitoring"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "mcp_tools", description: "MCP tool definitions"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Module {name: "qdrant_handlers", description: "Qdrant database handlers"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Module {name: "qdrant_search_handlers", description: "Qdrant search operations"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Module {name: "qdrant_vector_handlers", description: "Qdrant vector operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Module {name: "replication_handlers", description: "Data replication handlers"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Module {name: "rest_handlers", description: "REST API handlers"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "ServerState", description: "Global server state management", fields: "file_watcher_system,store,embedding_manager,start_time,file_watcher_system,metrics_collector,auto_save_manager,master_node,replica_node,query_cache,workspace_manager,performance_monitor,background_task,system_collector_task"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "VectorizerServer", description: "Main vectorizer server implementation", fields: "store,embedding_manager,start_time,file_watcher_system,metrics_collector,auto_save_manager,master_node,replica_node,query_cache,workspace_manager,performance_monitor,background_task,system_collector_task"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "VectorizerServer::new", description: "Create a new vectorizer server instance", return_type: "anyhow::Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "axum", version: "latest", type: "web_framework"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tokio", version: "latest", type: "async_runtime"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tower_http", version: "latest", type: "http_middleware"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "tracing", version: "latest", type: "logging"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "file_watcher_config", description: "File watcher configuration settings", file: "config.yml"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "embedding_config", description: "Embedding manager configuration", type: "EmbeddingConfig"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Database {name: "VectorStore", description: "Vector database for embeddings storage"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:API {name: "MCP API", description: "Model Context Protocol API endpoints", methods: "handle_mcp_tool,get_mcp_tools,get,post,put,delete"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:API {name: "REST API", description: "RESTful API endpoints", methods: "get,post,put,delete"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "Vectorizer Server Architecture Analysis"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/mcp_tools.rs
CREATE (doc:Document {
      id: "MCP Vectorizer Tool Definitions",
      title: "MCP Vectorizer Tool Definitions",
      domain: "software",
      doc_type: "API Documentation"
    })
CREATE (e0:Module {name: "rmcp::model", description: "Core MCP model definitions"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "get_mcp_tools", description: "Returns vector of MCP tool definitions"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:API {name: "list_collections", title: "List Collections", description: "List all available collections with metadata including vector count, dimension, and configuration", read_only: "true", idempotent: "true"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:API {name: "create_collection", title: "Create Collection", description: "Create a new vector collection with specified dimension and distance metric", read_only: "false"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:API {name: "get_collection_info", title: "Get Collection Info", description: "Get detailed information about a specific collection including stats and configuration", read_only: "true", idempotent: "true"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:API {name: "insert_text", title: "Insert Text", description: "Insert a single text into a collection with automatic embedding generation", read_only: "false"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:API {name: "get_vector", title: "Get Vector", description: "Retrieve a specific vector by ID from a collection", read_only: "true", idempotent: "true"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:API {name: "update_vector", title: "Update Vector", description: "Update an existing vector with new text and/or metadata", read_only: "false"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "ToolAnnotations", description: "Tool metadata configuration including read_only and idempotent flags"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde_json", description: "JSON serialization library"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "MCP Vectorizer Tool Definitions"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/mcp_performance.rs
CREATE (doc:Document {
      id: "Classify CLI - Intelligent Document Classification System",
      title: "Classify CLI - Intelligent Document Classification System",
      domain: "software",
      doc_type: "software_architecture_documentation"
    })
CREATE (e0:Module {name: "ClassifyClient", description: "Main client for document classification", location: "src/client.ts"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "BatchProcessor", description: "Parallel batch processing for multiple documents", location: "src/batch/batch-processor.ts"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "ProjectMapper", description: "Maps entire codebases with relationship analysis", location: "src/project/project-mapper.ts"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "CacheManager", description: "SHA256-based persistent caching system", location: "src/cache/cache-manager.ts"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "ClassificationPipeline", description: "Orchestrates document classification workflow", location: "src/classification/pipeline.ts"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "DocumentProcessor", description: "Handles document conversion and preprocessing", location: "src/preprocessing/document-processor.ts"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "TemplateLoader", description: "Loads and validates classification templates", location: "src/templates/template-loader.ts"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Module {name: "TemplateSelector", description: "LLM-powered template selection", location: "src/templates/template-selector.ts"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Module {name: "Neo4jClient", description: "Neo4j graph database integration", location: "src/integrations/neo4j-client.ts"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Module {name: "ElasticsearchClient", description: "Elasticsearch full-text search integration", location: "src/integrations/elasticsearch-client.ts"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "classify", description: "Classifies a single document", module: "ClassifyClient"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "mapProject", description: "Maps entire project structure with relationships", module: "ProjectMapper"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "processFiles", description: "Processes multiple files in parallel", module: "BatchProcessor"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "BaseLLMProvider", description: "Base class for LLM provider implementations", location: "src/llm/base-provider.ts"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "ProviderFactory", description: "Factory for creating LLM provider instances", location: "src/llm/provider-factory.ts"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "@hivellm/transmutation-lite", version: "^0.6.1", type: "document_conversion"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "@hivellm/compression-prompt", version: "^0.1.0", type: "prompt_optimization"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "commander", version: "^14.0.2", type: "cli_framework"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "tsconfig.json", description: "TypeScript configuration", target: "ES2022", module: "ESNext"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "vitest.config.ts", description: "Test configuration", framework: "vitest"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "eslint.config.js", description: "Linting configuration", framework: "eslint"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:API {name: "CLI API", description: "Command-line interface for document classification", commands: "document,batch,map-project,list-templates"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:API {name: "Programmatic API", description: "TypeScript/JavaScript API for integration", main_class: "ClassifyClient"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Database {name: "Neo4j", type: "graph_database", integration: "REST API"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Database {name: "Elasticsearch", type: "fulltext_search", integration: "REST API"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Test {name: "Unit Tests", count: "180", pass_rate: "88.2%", framework: "vitest"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Test {name: "Integration Tests", description: "End-to-end tests with real LLM providers", coverage: "77.57%"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Script {name: "build", command: "tsup", description: "Builds the project"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Script {name: "test", command: "vitest --run", description: "Runs all tests"})
CREATE (doc)-[:MENTIONS]->(e28)
CREATE (e29:Script {name: "lint", command: "eslint src/**/*.ts", description: "Lints TypeScript code"})
CREATE (doc)-[:MENTIONS]->(e29)
CREATE (e30:Documentation {name: "README.md", type: "project_overview", location: "root"})
CREATE (doc)-[:MENTIONS]->(e30)
CREATE (e31:Documentation {name: "ARCHITECTURE.md", type: "system_architecture", location: "docs/"})
CREATE (doc)-[:MENTIONS]->(e31)
CREATE (e32:Documentation {name: "API_REFERENCE.md", type: "api_documentation", location: "docs/"})
CREATE (doc)-[:MENTIONS]->(e32)

MATCH (doc:Document {title: "Classify CLI - Intelligent Document Classification System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/mcp_handlers.rs
CREATE (doc:Document {
      id: "MCP Vectorizer Rust Implementation",
      title: "MCP Vectorizer Rust Implementation",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "rmcp::model", path: "rmcp::model"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "serde_json", path: "serde_json"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "discovery_handlers", path: "super::discovery_handlers"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "file_operations_handlers", path: "super::file_operations_handlers"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "VectorStore", path: "crate::VectorStore"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "discovery", path: "crate::discovery"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "embedding", path: "crate::embedding"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Module {name: "file_operations", path: "crate::file_operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Module {name: "intelligent_search", path: "crate::intelligent_search::mcp_tools"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "create_embedding_manager_for_collection", parameters: "embedding_type: &str,dimension: usize", return_type: "Result<EmbeddingManager, String>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "MCPError", derives: "Debug,thiserror::Error"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "EmbeddingConfig", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "DiscoveryConfig", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "ExpansionConfig", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "CallToolRequestParam", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "CallToolResult", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "Content", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "ErrorData", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Class {name: "EmbeddingManager", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Class {name: "BM25Factory", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Class {name: "BERTFactory", type: "struct"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Enum {name: "EmbeddingProviderType", variants: "BM25,BERT,Low,Medium,High,Critical"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Enum {name: "ErrorSeverity", variants: "Low,Medium,High,Critical"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "MCP Vectorizer Rust Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/mcp_connection_manager.rs
CREATE (doc:Document {
      id: "MCP Connection Pool Manager",
      title: "MCP Connection Pool Manager",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "mcp_pooling", language: "rust", description: "Connection pooling module for MCP (Model Context Protocol)"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ConnectionStats", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Statistics tracking for connection pool"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "MCPManager", visibility: "public", description: "Main connection pool manager"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", return_type: "Self", parameters: "max_connections: usize,connection_timeout: Duration,connection_id: String,connection_id: &str,,,,", description: "Create a new connection manager"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "register_connection", visibility: "public", return_type: "Result<(), String>", parameters: "connection_id: String", description: "Register a new connection"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "unregister_connection", visibility: "public", return_type: "()", parameters: "connection_id: &str", description: "Unregister a connection"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "cleanup_expired_connections", visibility: "public", return_type: "()", parameters: "", description: "Clean up expired connections"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_stats", visibility: "public", return_type: "ConnectionStats", parameters: "", description: "Get connection statistics"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "can_accept_connection", visibility: "public", return_type: "bool", parameters: "", description: "Check if can accept new connection"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "active_connection_count", visibility: "public", return_type: "usize", parameters: "", description: "Get current active connection count"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_module", framework: "tokio", description: "Test module for connection manager"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for storing connections"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::sync::Arc", type: "standard_library", description: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library", description: "Time utilities"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "tokio::sync::RwLock", type: "external_crate", description: "Async read-write lock"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "chrono", type: "external_crate", description: "Date and time library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "max_connections", type: "usize", default_value: "100", description: "Maximum number of concurrent connections"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "connection_timeout", type: "Duration", default_value: "300 seconds", description: "Connection timeout duration"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "MCP Connection Pool Manager"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/file_operations_handlers.rs
CREATE (doc:Document {
      id: "Rust MCP Vectorizer File Operations Handler",
      title: "Rust MCP Vectorizer File Operations Handler",
      domain: "software",
      doc_type: "source_code"
    })
CREATE (e0:Module {name: "rmcp::model", path: "rmcp::model"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "serde_json", path: "serde_json"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "crate::VectorStore", path: "crate::VectorStore"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "crate::embedding::EmbeddingManager", path: "crate::embedding::EmbeddingManager"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "crate::file_operations::FileOperations", path: "crate::file_operations::FileOperations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "handle_get_file_chunks_ordered", visibility: "public", async: "true", return_type: "Result<CallToolResult, ErrorData>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "handle_get_project_outline", visibility: "public", async: "true", return_type: "Result<CallToolResult, ErrorData>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "handle_get_related_files", visibility: "public", async: "true", return_type: "Result<CallToolResult, ErrorData>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "CallToolRequestParam", module: "rmcp::model"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "CallToolResult", module: "rmcp::model"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "Content", module: "rmcp::model"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "ErrorData", module: "rmcp::model"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "VectorStore", module: "crate::VectorStore"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "EmbeddingManager", module: "crate::embedding::EmbeddingManager"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "FileOperations", module: "crate::file_operations::FileOperations"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "Rust MCP Vectorizer File Operations Handler"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/error_middleware.rs
CREATE (doc:Document {
      id: "REST API Error Handling Module",
      title: "REST API Error Handling Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "error_handling", language: "rust", purpose: "REST API error handling and response standardization"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ErrorResponse", visibility: "public", derives: "Debug,serde::Serialize", purpose: "Standardized error response structure"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", purpose: "Create a new error response", parameters: "error_type: String,message: String,status_code: StatusCode,self,details: Value,self,request_id: String"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "with_details", visibility: "public", purpose: "Add additional error details", parameters: "self,details: Value"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "with_request_id", visibility: "public", purpose: "Add request ID for tracing", parameters: "self,request_id: String"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "error_type_from_variant", visibility: "private", purpose: "Extract error type from VectorizerError variant"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "axum", version: "latest", purpose: "Web framework for HTTP handling"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde_json", version: "latest", purpose: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "tracing", version: "latest", purpose: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "ErrorResponse API", type: "REST", purpose: "Standardized error response format"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "REST API Error Handling Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/server/discovery_handlers.rs
CREATE (doc:Document {
      id: "Discovery MCP Vector Store Implementation",
      title: "Discovery MCP Vector Store Implementation",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "discovery", path: "crate::discovery", description: "Discovery module containing search and analysis functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "embedding", path: "crate::embedding", description: "Embedding management module"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "handle_discover", signature: "async fn handle_discover(request: CallToolRequestParam, store: Arc<VectorStore>, embedding_manager: Arc<EmbeddingManager>) -> Result<CallToolResult, ErrorData>", description: "Main discovery handler function"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "handle_filter_collections", signature: "async fn handle_filter_collections(request: CallToolRequestParam, store: Arc<VectorStore>) -> Result<CallToolResult, ErrorData>", description: "Collection filtering handler function"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "handle_score_collections", signature: "async fn handle_score_collections(request: CallToolRequestParam, store: Arc<VectorStore>) -> Result<CallToolResult, ErrorData>", description: "Collection scoring handler function"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_collection_refs", signature: "fn get_collection_refs(store: &Arc<VectorStore>) -> Vec<CollectionRef>", description: "Utility function to retrieve collection references"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "Discovery", description: "Main discovery engine class"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "DiscoveryConfig", description: "Configuration structure for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "CollectionRef", description: "Reference structure for vector collections"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "ScoringConfig", description: "Configuration for collection scoring"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "VectorStore", description: "Vector storage interface"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "EmbeddingManager", description: "Embedding management interface"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::sync::Arc", type: "standard_library", description: "Atomic reference counting smart pointer"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "rmcp::model", type: "external_crate", description: "MCP model definitions"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "serde_json", type: "external_crate", description: "JSON serialization library"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "discover", description: "Main discovery API endpoint"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "filter_collections", description: "Collection filtering API endpoint"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "score_collections", description: "Collection scoring API endpoint"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "DiscoveryConfig", fields: "include_collections,exclude_collections,max_bullets,broad_k,focus_k,name_match_weight,term_boost_weight,signal_boost_weight", description: "Configuration for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "ScoringConfig", fields: "name_match_weight,term_boost_weight,signal_boost_weight", description: "Configuration for collection scoring"})
CREATE (doc)-[:MENTIONS]->(e19)

MATCH (doc:Document {title: "Discovery MCP Vector Store Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/security/tls.rs
CREATE (doc:Document {
      id: "TLS Configuration Module",
      title: "TLS Configuration Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "TLS", description: "provides TLS/mTLS support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "TlsConfig", description: "TLS configuration struct", visibility: "public", traits: "Debug,Clone"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "default", description: "Default implementation for TlsConfig", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "create_server_config", description: "Create ServerConfig from TLS configuration", visibility: "public", return_type: "Result<Arc<ServerConfig>>", parameters: "_config: &TlsConfig"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "enabled", type: "bool", description: "Enable TLS"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "cert_path", type: "Option<String>", description: "Certificate file path"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "key_path", type: "Option<String>", description: "Private key file path"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "mtls_enabled", type: "bool", description: "Enable mutual TLS (mTLS)"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "client_ca_path", type: "Option<String>", description: "Client CA certificate path (for mTLS)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "rustls", type: "external_crate", usage: "ServerConfig type"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "tracing", type: "external_crate", usage: "warn! macro for logging"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "TLS Configuration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/security/rbac.rs
CREATE (doc:Document {
      id: "Role-Based Access Control (RBAC) System",
      title: "Role-Based Access Control (RBAC) System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "rbac", language: "rust", description: "Role-Based Access Control implementation"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Permission", type: "enum", visibility: "public", traits: "Debug,Clone,Copy,PartialEq,Eq,Hash,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "Role", type: "struct", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "User", type: "struct", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "Role::new", visibility: "public", parameters: "name: impl Into<String>,permissions: Vec<Permission>,&self,permission: Permission,&mut self,permission: Permission,&mut self,permission: Permission,,,,id: impl Into<String>,roles: Vec<Role>,&self,permission: Permission,&mut self,role: Role,&mut self,role_name: &str", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "Role::has_permission", visibility: "public", parameters: "&self,permission: Permission", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "Role::add_permission", visibility: "public", parameters: "&mut self,permission: Permission", return_type: "void"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "Role::remove_permission", visibility: "public", parameters: "&mut self,permission: Permission", return_type: "void"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "Role::viewer", visibility: "public", parameters: "", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "Role::editor", visibility: "public", parameters: "", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "Role::admin", visibility: "public", parameters: "", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "User::new", visibility: "public", parameters: "id: impl Into<String>,roles: Vec<Role>", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "User::has_permission", visibility: "public", parameters: "&self,permission: Permission", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "User::add_role", visibility: "public", parameters: "&mut self,role: Role", return_type: "void"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "User::remove_role", visibility: "public", parameters: "&mut self,role_name: &str", return_type: "void"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "test_role_creation", description: "Test role creation functionality"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Test {name: "test_viewer_role", description: "Test viewer role permissions"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Test {name: "test_editor_role", description: "Test editor role permissions"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Test {name: "test_admin_role", description: "Test admin role permissions"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Test {name: "test_add_remove_permission", description: "Test permission management"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Test {name: "test_role_hierarchy", description: "Test role hierarchy validation"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "std::collections::HashSet", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "serde", type: "external_crate", features: "Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "Role-Based Access Control (RBAC) System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/security/rate_limit.rs
CREATE (doc:Document {
      id: "Rate Limiter Implementation",
      title: "Rate Limiter Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "rate_limiter", language: "Rust", description: "Rate limiting functionality for API requests"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "RateLimitConfig", visibility: "public", description: "Configuration for rate limiting parameters"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "RateLimiter", visibility: "public", description: "Main rate limiter implementation with global and per-key limits"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Create a new rate limiter instance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "check_global", visibility: "public", description: "Check global rate limit"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_per_key_limiter", visibility: "public", description: "Get or create per-key rate limiter"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "check_per_key_rate_limit", visibility: "public", description: "Check rate limit for specific API key"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "rate_limit_middleware", visibility: "public", description: "Axum middleware for rate limiting"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "extract_api_key", visibility: "public", description: "Extract API key from request headers"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::num::NonZeroU32", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "axum", type: "external_crate", description: "Web framework for async Rust"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "governor", type: "external_crate", description: "Rate limiting library"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tokio", type: "external_crate", description: "Async runtime"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "requests_per_second", type: "u32", default_value: "100", description: "Requests per second per API key"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "burst_size", type: "u32", default_value: "200", description: "Burst capacity for rate limiting"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "Authorization", type: "header", description: "Bearer token authentication"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Rate Limiter Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/security/mod.rs
CREATE (doc:Document {
      id: "Security Module Documentation",
      title: "Security Module Documentation",
      domain: "software",
      doc_type: "module_documentation"
    })
CREATE (e0:Module {name: "security", description: "Advanced security features including rate limiting, TLS/mTLS, audit, RBAC, MFA, and threat detection"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "rate_limit", description: "Prevent configurable API rate limiting"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "tls", description: "Encrypted communication"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "audit", description: "Track API compliance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "rbac", description: "Fine-grained access control with Viewer, Editor, Admin roles"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "mfa", description: "Multi-factor authentication"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "threat_detection", description: "Advanced threat response"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "encryption", description: "End-to-end data encryption"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "AuditLogger", module: "audit"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "RateLimitConfig", module: "rate_limit"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "RateLimiter", module: "rate_limit"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "Permission", module: "rbac"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "Role", module: "rbac"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "rate_limit_config", description: "Configurable API rate limiting settings"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "tls_config", description: "TLS/mTLS encryption configuration"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "Security Module Documentation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/security/enhanced_security.rs
CREATE (doc:Document {
      id: "Enhanced Security Manager - Multi-factor Authentication and Advanced Security Enforcement",
      title: "Enhanced Security Manager - Multi-factor Authentication and Advanced Security Enforcement",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "EnhancedSecurityManager", language: "Rust", description: "Provides multi-factor authentication and advanced security enforcement with monitoring and compliance features"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "EnhancedSecurityManager", visibility: "public", description: "Main security management class with comprehensive security features"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "SecurityConfig", visibility: "public", description: "Configuration structure for security settings"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "AuthenticationConfig", visibility: "public", description: "Authentication-specific configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "AuthorizationConfig", visibility: "public", description: "Authorization and access control configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "EncryptionConfig", visibility: "public", description: "Encryption settings and key management configuration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ThreatDetectionConfig", visibility: "public", description: "Threat detection and response configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "SecurityPolicyConfig", visibility: "public", description: "Security policy enforcement configuration"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "SessionManagementConfig", visibility: "public", description: "Session management and timeout configuration"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "AuditConfig", visibility: "public", description: "Audit logging and compliance configuration"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "MfaMethod", visibility: "public", description: "Multi-factor authentication method configuration"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "PasswordRequirements", visibility: "public", description: "Password complexity and security requirements"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "AccountLockoutConfig", visibility: "public", description: "Account lockout and security policy configuration"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for storing sessions and failed attempts"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library", description: "Thread-safe reference counting and read-write locks"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}", type: "standard_library", description: "Time handling utilities"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "anyhow::Result", type: "external_crate", description: "Error handling utilities"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "tokio::time::{interval, sleep}", type: "external_crate", description: "Async time utilities"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "crate::error::VectorizerError", type: "internal_crate", description: "Custom error type from the crate"})
CREATE (doc)-[:MENTIONS]->(e19)

MATCH (doc:Document {title: "Enhanced Security Manager - Multi-factor Authentication and Advanced Security Enforcement"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/security/audit.rs
CREATE (doc:Document {
      id: "Audit Logging System",
      title: "Audit Logging System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "audit_logging", language: "rust", description: "Audit logging system for API attempts and authentication events"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "AuditLogEntry", visibility: "public", description: "Represents a single audit log entry with timestamp, principal, method, endpoint, status code, duration, and metadata"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Struct {name: "AuditLogger", visibility: "public", description: "Main audit logger that manages a collection of audit log entries with configurable capacity"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Creates a new audit logger with specified maximum entries capacity"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "log", visibility: "public", description: "Logs an audit entry and maintains the maximum entries limit"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "log_auth_attempt", visibility: "public", description: "Logs authentication attempts with success/failure status and optional reason"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "get_entries", visibility: "public", description: "Retrieves the most recent audit log entries up to the specified limit"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "count", visibility: "public", description: "Returns the current number of stored audit log entries"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "clear", visibility: "public", description: "Clears all audit log entries (for testing purposes only)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "default", visibility: "public", description: "Creates a default audit logger with 10,000 entries capacity"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_audit_logger_creation", description: "Tests audit logger creation and initial state"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_log_entry", description: "Tests logging audit entries functionality"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "chrono", type: "external_crate", description: "Date and time handling library"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tokio", type: "external_crate", description: "Asynchronous runtime for Rust"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "tracing", type: "external_crate", description: "Structured logging framework"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Audit Logging System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/search/mod.rs
CREATE (doc:Document {
      id: "Advanced Discovery System Module",
      title: "Advanced Discovery System Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "advanced_search", description: "Advanced discovery system providing sophisticated capabilities", features: "multi-modal,text,vector,hybrid,ranking,deduplication,query suggestion,optimization,real-time updates"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Configuration {name: "module_config", type: "rust_module_declaration", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)

MATCH (doc:Document {title: "Advanced Discovery System Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/search/advanced_search.rs
CREATE (doc:Document {
      id: "Advanced Search Engine Configuration System",
      title: "Advanced Search Engine Configuration System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "discovery", description: "Multi-modal search algorithms with deduplication, suggestion, and optimization capabilities"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AdvancedSearchEngine", visibility: "public", description: "Advanced search engine with multi-modal search capabilities"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "SearchConfig", visibility: "public", description: "Configuration for search engine behavior"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "SearchModes", visibility: "public", description: "Configuration for different search modes"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "RankingConfig", visibility: "public", description: "Configuration for search result ranking"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "RankingAlgorithm", visibility: "public", description: "Enumeration of ranking algorithms"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "RankingWeights", visibility: "public", description: "Weight configuration for ranking factors"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "BoostFactors", visibility: "public", description: "Boost factors for different content types"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "DecayFactors", visibility: "public", description: "Decay factors for time and quality"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "QueryProcessingConfig", visibility: "public", description: "Configuration for query processing pipeline"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "SearchAnalyticsConfig", visibility: "public", description: "Configuration for search analytics"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "SearchSuggestionsConfig", visibility: "public", description: "Configuration for search suggestions"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "SuggestionType", visibility: "public", description: "Enumeration of suggestion types"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "SearchPerformanceConfig", visibility: "public", description: "Configuration for search performance optimization"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::{HashMap, HashSet}", type: "standard_library", description: "Standard collections for data structures"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library", description: "Thread-safe synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library", description: "Time-related utilities"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "anyhow::Result", type: "external_crate", description: "Error handling utilities"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tokio::time::{interval, sleep}", type: "external_crate", description: "Async runtime time utilities"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::error::VectorizerError", type: "internal_module", description: "Custom error type from internal module"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Advanced Search Engine Configuration System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/types.rs
CREATE (doc:Document {
      id: "Rust Vector Database Replication Structures",
      title: "Rust Vector Database Replication Structures",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "structures", language: "rust", description: "Core data structures for vector database replication system"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "NodeRole", visibility: "public", traits: "Debug,Clone,Copy,PartialEq,Eq,Default,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Copy,PartialEq,Eq,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", serde_config: "rename_all = lowercase"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ReplicationCommand", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Commands for replication operations between master and replica nodes"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ReplicationOperation", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Individual replication operation with offset and timestamp"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "VectorOperation", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Vector database operations (create, delete, insert, update)"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CollectionConfigData", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Configuration for vector collections"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ReplicationStats", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Statistics and monitoring data for replication"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "ReplicaStatus", visibility: "public", traits: "Debug,Clone,Copy,PartialEq,Eq,Serialize,Deserialize", serde_config: "rename_all = PascalCase"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "ReplicaInfo", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Information about replica nodes"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::net::SocketAddr", type: "standard_library", module: "std::net"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::time::SystemTime", type: "standard_library", module: "std::time"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "CollectionConfigData", fields: "dimension,metric", metric_types: "cosine,euclidean,dot_product"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "VectorOperation", operations: "CreateCollection,DeleteCollection,InsertVector,UpdateVector,DeleteVector"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Rust Vector Database Replication Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/sync.rs
CREATE (doc:Document {
      id: "Vector Store Synchronization Module",
      title: "Vector Store Synchronization Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "synchronization", description: "Provides snapshot creation and incremental synchronization for vector stores"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "create_snapshot", parameters: "store: &VectorStore,offset: u64,store: &VectorStore,snapshot: &[u8],metric: &str,", return_type: "Result<Vec<u8>, String>", description: "Creates a full snapshot of the vector store"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "apply_snapshot", parameters: "store: &VectorStore,snapshot: &[u8]", return_type: "Result<u64, String>", description: "Applies a snapshot to restore vector store state"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "parse_distance_metric", parameters: "metric: &str", return_type: "crate::models::DistanceMetric", description: "Parses string metric to DistanceMetric enum"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "current_timestamp", parameters: "", return_type: "u64", description: "Gets current Unix timestamp"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "SnapshotMetadata", fields: "offset: u64,timestamp: u64,total_collections: usize,total_vectors: usize,compressed: bool,checksum: u32,collections: Vec<CollectionSnapshot>,name: String,dimension: usize,metric: String,vectors: Vec<(String, Vec<f32>, Option<Vec<u8>>)>", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "SnapshotData", fields: "collections: Vec<CollectionSnapshot>", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "CollectionSnapshot", fields: "name: String,dimension: usize,metric: String,vectors: Vec<(String, Vec<f32>, Option<Vec<u8>>)>", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "serde", features: "Serialize,Deserialize,debug,info"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tracing", features: "debug,info"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "bincode", usage: "serialization"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "crc32fast", usage: "checksum calculation"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_snapshot_checksum_verification", framework: "tokio", description: "Tests snapshot checksum verification"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "VectorStore", methods: "list_collections,get_collection,create_collection,delete_collection,insert"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Vector Store Synchronization Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/replication_log.rs
CREATE (doc:Document {
      id: "ReplicationLog Rust Module",
      title: "ReplicationLog Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "replication", language: "rust", description: "Replication log implementation with ring buffer for vector operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ReplicationLog", visibility: "public", description: "Ring buffer-based replication log for vector operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create a new replication log with specified max size"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "append", visibility: "public", description: "Append a vector operation to the replication log"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "current_offset", visibility: "public", description: "Get the current offset counter"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_operations", visibility: "public", description: "Retrieve operations from a specific offset"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "size", visibility: "public", description: "Get current number of operations in the log"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "clear", visibility: "public", description: "Clear all operations and reset offset"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "current_timestamp", visibility: "private", description: "Get current timestamp in milliseconds"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Test {name: "test_replication_log_append", description: "Test basic append functionality"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_replication_log_circular", description: "Test circular buffer behavior when exceeding max size"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_get_operations_from_offset", description: "Test retrieving operations from specific offset"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_get_operations_too_old", description: "Test behavior when requesting operations older than available"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_clear_log", description: "Test clearing the replication log"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "test_all_vector_operation_types", description: "Test all supported vector operation types"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::collections::VecDeque", type: "standard_library", description: "Ring buffer implementation"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "parking_lot::RwLock", type: "external_crate", description: "Reader-writer lock for thread safety"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tracing::debug", type: "external_crate", description: "Debug logging macro"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "super::types::{ReplicationOperation, VectorOperation}", type: "module_import", description: "Type definitions for replication operations"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "ReplicationLog Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/replica.rs
CREATE (doc:Document {
      id: "Replica Node Implementation",
      title: "Replica Node Implementation",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "replica", language: "rust", description: "Replication module for vector database"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ReplicaNode", visibility: "public", description: "Main replica node implementation"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ReplicaState", visibility: "public", description: "State tracking for replica node"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Create a new replica node"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "start", visibility: "public", description: "Start replica node and connect to master"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "connect_and_sync", visibility: "private", description: "Connect to master and process updates"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "receive_command", visibility: "private", description: "Receive replication commands from master"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::time", type: "standard_library", description: "Time utilities"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "parking_lot", type: "external_crate", description: "RwLock implementation"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tokio", type: "external_crate", description: "Async runtime and networking"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "tracing", type: "external_crate", description: "Logging framework"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "bincode", type: "external_crate", description: "Binary serialization"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "ReplicationConfig", description: "Replication configuration settings"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "ReplicationCommand", description: "Commands sent between master and replica"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "ReplicationResult", description: "Result type for replication operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "ReplicationError", description: "Error type for replication failures"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Database {name: "VectorStore", description: "Vector database storage backend"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "VectorOperation", description: "Vector database operations"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "ReplicationStats", description: "Replication statistics tracking"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Replica Node Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/mod.rs
CREATE (doc:Document {
      id: "Replication Module Master-Replica Architecture",
      title: "Replication Module Master-Replica Architecture",
      domain: "software",
      doc_type: "rust_module_documentation"
    })
CREATE (e0:Module {name: "replication", description: "Master-Replica architecture for high availability", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Configuration {name: "ReplicationConfig", description: "Configuration for replication settings"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "MasterNode", description: "Master node that accepts writes"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ReplicaNode", description: "Read-only replica node"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ReplicationLog", description: "Log for replication operations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:API {name: "ReplicationCommand", description: "Commands for replication operations"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:API {name: "ReplicationOperation", description: "Operations that can be replicated"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:API {name: "VectorOperation", description: "Vector-specific operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:API {name: "ReplicationResult", description: "Result of replication operations"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "ReplicationError", description: "Error types for replication"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "ReplicationStats", description: "Statistics for replication monitoring"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "ReplicaInfo", description: "Information about replica nodes"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "ReplicaStatus", description: "Status of replica nodes"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "NodeRole", description: "Role of a node (master or replica)"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "CollectionConfigData", description: "Configuration data for collections"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "stats_tests", description: "Tests for replication statistics"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Replication Module Master-Replica Architecture"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/master.rs
CREATE (doc:Document {
      id: "Master Node Replication System",
      title: "Master Node Replication System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "master", path: "src/replication/master.rs", description: "Master node implementation for vector database replication"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "MasterNode", visibility: "public", description: "Main master node that maintains replicas and handles replication"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ReplicaConnection", visibility: "public", description: "Connection information for a connected replica"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ReplicationMessage", visibility: "public", description: "Message types sent to replication task"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "public", description: "Create a new master node instance"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "start", visibility: "public", description: "Start the master node and begin listening for connections"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "handle_replica", visibility: "private", description: "Handle individual replica connections"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for storing replica connections"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "tokio", type: "external_crate", description: "Async runtime for networking and concurrency"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "parking_lot::RwLock", type: "external_crate", description: "Reader-writer lock for replica connections"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "tracing", type: "external_crate", description: "Structured logging framework"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "uuid", type: "external_crate", description: "UUID generation for replica IDs"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "ReplicationConfig", description: "Configuration for replication settings"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Database {name: "VectorStore", description: "Main vector database storage"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "ReplicationLog", description: "Replication log for tracking operations"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "Master Node Replication System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/replication/config.rs
CREATE (doc:Document {
      id: "Replication Configuration Module",
      title: "Replication Configuration Module",
      domain: "software",
      doc_type: "Rust Configuration Module"
    })
CREATE (e0:Module {name: "replication", language: "Rust", description: "Replication configuration module for distributed system"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ReplicationConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Configuration structure for replication settings"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "default_heartbeat_interval", visibility: "private", return_type: "u64", description: "Default heartbeat interval of 5 seconds"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "default_replica_timeout", visibility: "private", return_type: "u64", description: "Default replica timeout of 30 seconds"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "default_log_size", visibility: "private", return_type: "usize", description: "Default replication log size of 1,000,000 operations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "default_reconnect_interval", visibility: "private", return_type: "u64", description: "Default auto-reconnect interval of 5 seconds"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "default", visibility: "public", return_type: "Self", description: "Default implementation for ReplicationConfig"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "replication_config", type: "ReplicationConfig", description: "Main replication configuration structure"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::net::SocketAddr", type: "standard_library", description: "Network socket address type"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::time::Duration", type: "standard_library", description: "Time duration type"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Replication Configuration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/quantization/traits.rs
CREATE (doc:Document {
      id: "Quantization Traits and Data Structures",
      title: "Quantization Traits and Data Structures",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "quantization", path: "crate::quantization"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QuantizedVectors", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QuantizationParams", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QualityMetrics", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QualityTrend", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Trait {name: "QuantizationMethod", visibility: "public", bounds: "Send"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Trait {name: "IncrementalQuantization", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Trait {name: "QuantizedSearch", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Trait {name: "QualityMonitoring", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "quantize", visibility: "public", return_type: "QuantizationResult<QuantizedVectors>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "dequantize", visibility: "public", return_type: "QuantizationResult<Vec<Vec<f32>>>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "memory_usage", visibility: "public", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "quality_loss", visibility: "public", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "method_type", visibility: "public", return_type: "crate::quantization::QuantizationType"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "validate_parameters", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "serialize_params", visibility: "public", return_type: "QuantizationResult<QuantizationParams>"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "deserialize_params", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "add_vector", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "remove_vector", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "update_vector", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "similarity", visibility: "public", return_type: "QuantizationResult<f32>"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "quantized_similarity", visibility: "public", return_type: "QuantizationResult<f32>"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Function {name: "batch_similarity", visibility: "public", return_type: "QuantizationResult<Vec<f32>>"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Function {name: "calculate_quality_metrics", visibility: "public", return_type: "QuantizationResult<QualityMetrics>"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Function {name: "monitor_quality_degradation", visibility: "public", return_type: "QuantizationResult<QualityTrend>"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "serde", features: "Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Dependency {name: "std", modules: "time::SystemTime"})
CREATE (doc)-[:MENTIONS]->(e26)

MATCH (doc:Document {title: "Quantization Traits and Data Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/quantization/storage.rs
CREATE (doc:Document {
      id: "Quantized Vector Storage System",
      title: "Quantized Vector Storage System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "quantized_vector_storage", language: "Rust", purpose: "Memory-mapped storage for quantized vectors"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "StorageConfig", visibility: "public", purpose: "Configuration for storage system"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "StorageMetadata", visibility: "public", purpose: "Metadata for stored quantized vectors"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CachedQuantizedVectors", visibility: "public", purpose: "Cached quantized vectors with metadata"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QuantizedVectorStorage", visibility: "public", purpose: "Main storage manager for quantized vectors"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", visibility: "public", purpose: "Create a new storage manager"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "store", visibility: "public", purpose: "Store quantized vectors"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "load", visibility: "public", purpose: "Load quantized vectors"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "crate::quantization", type: "internal_crate", purpose: "Quantization functionality"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde", type: "external_crate", purpose: "Serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map for caching"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::fs::File", type: "standard_library", purpose: "File operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::sync::Arc", type: "standard_library", purpose: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::sync::RwLock", type: "standard_library", purpose: "Read-write lock for thread safety"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "StorageConfig", type: "struct", purpose: "Storage system configuration"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "QuantizedVectorStorage", type: "public_interface", purpose: "Main storage API"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Quantized Vector Storage System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/quantization/scalar.rs
CREATE (doc:Document {
      id: "Quantization Module - ScalarQuantization Implementation",
      title: "Quantization Module - ScalarQuantization Implementation",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "quantization", description: "Implements scalar quantization with 8-bit, 4-bit, 2-bit, and 1-bit support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ScalarQuantization", description: "Scalar quantization implementation for vector compression", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new scalar quantization instance", visibility: "public", return_type: "QuantizationResult<Self>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "fit", description: "Fit quantization parameters to dataset", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "quantize_vector", description: "Quantize a vector based on bit depth", visibility: "public", return_type: "QuantizationResult<Vec<u8>>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "dequantize_vector", description: "Dequantize a vector back to float values", visibility: "public", return_type: "QuantizationResult<Vec<f32>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "quantize_8bit", description: "8-bit quantization implementation", visibility: "private", return_type: "QuantizationResult<Vec<u8>>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "dequantize_8bit", description: "8-bit dequantization implementation", visibility: "private", return_type: "QuantizationResult<Vec<f32>>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "quantize_4bit", description: "4-bit quantization with packed storage", visibility: "private", return_type: "QuantizationResult<Vec<u8>>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "dequantize_4bit", description: "4-bit dequantization from packed storage", visibility: "private", return_type: "QuantizationResult<Vec<f32>>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "quantize_2bit", description: "2-bit quantization with packed storage", visibility: "private", return_type: "QuantizationResult<Vec<u8>>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashMap", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "bits", type: "u8", description: "Number of bits per dimension (8, 4, 2, or 1)"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "min_value", type: "f32", description: "Minimum value in the dataset"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "max_value", type: "f32", description: "Maximum value in the dataset"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "scale", type: "f32", description: "Scaling factor for quantization"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "offset", type: "f32", description: "Offset for quantization"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "quantized_levels", type: "usize", description: "Number of possible quantized values"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Quantization Module - ScalarQuantization Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/quantization/product.rs
CREATE (doc:Document {
      id: "Product Quantization Implementation",
      title: "Product Quantization Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "ProductQuantization", language: "Rust", description: "Product Quantization implementation for high-dimensional vector compression"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ProductQuantization", visibility: "public", description: "Main Product Quantization implementation class"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ProductQuantizationConfig", visibility: "public", description: "Configuration struct for Product Quantization parameters"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Create a new Product Quantization instance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "train", visibility: "public", description: "Train the quantizer with training vectors"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "train_subvector", visibility: "private", description: "Train a single subvector using K-means"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "initialize_centroids", visibility: "private", description: "Initialize centroids using k-means++ algorithm"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "update_centroids", visibility: "private", description: "Update centroids based on current assignments"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "ProductQuantizationConfig", fields: "subvectors,centroids_per_subvector,training_samples,adaptive_assignment", description: "Configuration parameters for Product Quantization"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "crate::quantization::traits", type: "internal", description: "Quantization traits and types"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", type: "external", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", type: "standard", description: "Standard library HashMap"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "fastrand", type: "external", description: "Fast random number generation"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Product Quantization Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/quantization/mod.rs
CREATE (doc:Document {
      id: "Quantization System Implementation",
      title: "Quantization System Implementation",
      domain: "software",
      doc_type: "rust_code_module"
    })
CREATE (e0:Module {name: "quantization", language: "rust", description: "Vector quantization system with multiple quantization methods"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QuantizationType", type: "enum", description: "Enumeration of quantization methods", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QuantizationConfig", type: "struct", description: "Configuration for quantization parameters", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QuantizationStats", type: "struct", description: "Statistics and metrics for quantization performance", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QuantizationError", type: "enum", description: "Error types for quantization operations", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QuantizationManager", type: "struct", description: "Main quantization management system", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "memory_savings_percent", description: "Calculate memory savings percentage", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "meets_quality_threshold", description: "Check if quality threshold is met", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "new", description: "Create a new quantization manager", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "thiserror", type: "external_crate", description: "Error handling derive macros"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "QuantizationConfig", description: "Configuration for quantization system", properties: "method,auto_optimize,quality_threshold,monitor_quality"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "QuantizationManager API", description: "Public API for quantization operations", methods: "new,memory_savings_percent,meets_quality_threshold"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Quantization System Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/quantization/hnsw_integration.rs
CREATE (doc:Document {
      id: "HNSW Quantization Integration",
      title: "HNSW Quantization Integration",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "hnsw_quantization", description: "HNSW integration with quantization support", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "HnswQuantizationConfig", description: "Configuration for HNSW quantization", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QuantizedHnswIndex", description: "Integrated quantized HNSW index", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new quantized index", visibility: "public", return_type: "QuantizationResult<Self>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "add_vectors", description: "Add vectors to the quantized index", visibility: "public", return_type: "QuantizationResult<()>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "search_quantized", description: "Search using quantized vectors", visibility: "public", return_type: "QuantizationResult<Vec<(usize, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "search_brute_force", description: "Brute force search fallback", visibility: "public", return_type: "QuantizationResult<Vec<(usize, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "search_hybrid", description: "Hybrid search combining quantized and original vectors", visibility: "public", return_type: "QuantizationResult<Vec<(usize, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_quantization_stats", description: "Get quantization statistics", visibility: "public", return_type: "QuantizationResult<HnswQuantizationStats>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "crate::quantization", description: "Internal quantization module"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::collections::HashMap", description: "Standard HashMap collection"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::sync::{Arc, RwLock}", description: "Standard synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "quantization_type", description: "Quantization method type", data_type: "QuantizationType"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "enable_quantized_search", description: "Enable quantized similarity search", data_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "cache_size", description: "Cache size for quantized vectors", data_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "enable_hybrid_search", description: "Enable hybrid search mode", data_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "quality_threshold", description: "Quality threshold for hybrid search", data_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "HNSW Quantization Integration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/processing/mod.rs
CREATE (doc:Document {
      id: "Advanced Pipeline Module",
      title: "Advanced Pipeline Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "advanced_pipeline", description: "Advanced pipeline module providing sophisticated capabilities", features: "Multi-stage,Real-time,Data transformation,Quality validation,Performance optimization,Error handling recovery"})
CREATE (doc)-[:MENTIONS]->(e0)

MATCH (doc:Document {title: "Advanced Pipeline Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/processing/advanced_pipeline.rs
CREATE (doc:Document {
      id: "Advanced Processing Pipeline - Rust Implementation",
      title: "Advanced Processing Pipeline - Rust Implementation",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "AdvancedProcessingPipeline", description: "Advanced multi-stage streaming transformation pipeline with quality assurance, monitoring, and recovery capabilities", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AdvancedProcessingPipeline", description: "Main pipeline struct containing configuration, stages, sources, sinks, state, metrics, and error handler", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "PipelineConfig", description: "Configuration struct for pipeline settings including name, description, mode, parallelism, quality assurance, performance, and error handling", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ProcessingMode", description: "Enum defining different processing modes: Batch, Stream, MicroBatch, RealTime", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ParallelismConfig", description: "Configuration for parallel processing including worker settings and auto-scaling", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ScalingThresholds", description: "Thresholds for auto-scaling based on CPU, memory, and queue metrics", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QualityAssuranceConfig", description: "Configuration for data validation, quality scoring, and profiling", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "ValidationRule", description: "Individual validation rule with name, description, type, conditions, and severity", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "ValidationRuleType", description: "Enum defining validation rule types: DataType, Range, Pattern, Completeness, Consistency, Uniqueness, ReferentialIntegrity", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "ValidationCondition", description: "Individual validation condition with field, operator, value, and error message", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "ValidationOperator", description: "Enum defining validation operators: Equals, NotEquals, GreaterThan, LessThan, Contains, StartsWith, EndsWith, RegexMatch, IsNull, IsNotNull", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "ValidationSeverity", description: "Enum defining validation severity levels: Error, Warning, Info", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "QualityThresholds", description: "Thresholds for quality metrics including minimum quality score, error rates, completeness, and null rates", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "ProfilingConfig", description: "Configuration for data profiling settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Key-value storage for sources and sinks"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library", purpose: "Thread-safe shared state management"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library", purpose: "Time measurement and intervals"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "anyhow::Result", type: "external_crate", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tokio::sync::{mpsc, oneshot}", type: "external_crate", purpose: "Asynchronous message passing"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "tokio::time::{interval, sleep}", type: "external_crate", purpose: "Asynchronous timing utilities"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "crate::error::VectorizerError", type: "internal_module", purpose: "Custom error types"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "Advanced Processing Pipeline - Rust Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/persistence/wal.rs
CREATE (doc:Document {
      id: "Write-Ahead Log (WAL) Implementation",
      title: "Write-Ahead Log (WAL) Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "WriteAheadLog", language: "Rust", purpose: "Write-ahead logging for database operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "WriteAheadLog", visibility: "public", purpose: "Main WAL implementation struct"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "WALConfig", visibility: "public", purpose: "Configuration for WAL settings"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "WALError", visibility: "public", purpose: "Error types for WAL operations"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "public", purpose: "Create new WAL instance", async: "true"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "initialize_sequence", visibility: "private", purpose: "Initialize WAL sequence number", async: "true"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "append", visibility: "public", purpose: "Append single operation to WAL", async: "true"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "append_transaction", visibility: "public", purpose: "Append transaction to WAL", async: "true"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "write_entry", visibility: "private", purpose: "Write single WAL entry", async: "true"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "write_entry_to_file", visibility: "private", purpose: "Write entry to file system", async: "false"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::fs", type: "standard_library", purpose: "File system operations"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::io", type: "standard_library", purpose: "Input/output operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::path", type: "standard_library", purpose: "Path handling"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::sync", type: "standard_library", purpose: "Synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::time", type: "standard_library", purpose: "Time operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "serde_json", type: "external_crate", purpose: "JSON serialization"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "thiserror", type: "external_crate", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tracing", type: "external_crate", purpose: "Logging"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "AsyncMutex", type: "external_crate", purpose: "Async mutex implementation"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "crate::persistence::types", type: "internal_module", purpose: "Internal types for persistence"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "WALConfig", purpose: "WAL configuration settings", fields: "checkpoint_threshold,max_wal_size_mb,checkpoint_interval,compression"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Write-Ahead Log (WAL) Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/persistence/types.rs
CREATE (doc:Document {
      id: "Enhanced Collection Metadata and WAL System",
      title: "Enhanced Collection Metadata and WAL System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "collection_metadata", language: "rust", purpose: "Collection metadata management and WAL operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CollectionType", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,PartialEq,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", purpose: "Enum representing collection types"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CollectionSource", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Source information for collections"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "EnhancedCollectionMetadata", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Enhanced metadata structure for vector collections"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "WALEntry", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Write-Ahead Log entry structure"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "Operation", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "WAL operation types"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new_workspace", visibility: "public", purpose: "Create new workspace collection metadata"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new_dynamic", visibility: "public", purpose: "Create new dynamic collection metadata"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "update_after_operation", visibility: "public", purpose: "Update metadata after operation"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "is_workspace", visibility: "public", purpose: "Check if collection is workspace type"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "is_dynamic", visibility: "public", purpose: "Check if collection is dynamic type"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "calculate_data_checksum", visibility: "public", purpose: "Generate data integrity checksum"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "calculate_index_checksum", visibility: "public", purpose: "Generate index integrity checksum"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "update_checksums", visibility: "public", purpose: "Update both data and index checksums"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "chrono::{DateTime, Utc}", type: "external_crate", purpose: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::models::{CollectionConfig, DistanceMetric}", type: "internal_module", purpose: "Internal model definitions"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "Enhanced Collection Metadata and WAL System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/persistence/mod.rs
CREATE (doc:Document {
      id: "Vector Store Persistence Module",
      title: "Vector Store Persistence Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "persistence", language: "rust", purpose: "Vector store serialization and persistence"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "PersistedVectorStore", visibility: "public", purpose: "Root container for persisted vector store data", fields: "version,collections,name,config,vectors,hnsw_dump_basename,id,data,payload_json,normalized"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Struct {name: "PersistedCollection", visibility: "public", purpose: "Serialized collection with vectors and metadata", fields: "name,config,vectors,hnsw_dump_basename"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Struct {name: "PersistedVector", visibility: "public", purpose: "Serialized vector with payload and normalization info", fields: "id,data,payload_json,normalized"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "save", visibility: "public", purpose: "Save vector store to file", parameters: "path"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "into_runtime", visibility: "public", purpose: "Convert persisted vector to runtime vector", return_type: "Result<Vector>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "into_runtime_with_payload", visibility: "public", purpose: "Convert with payload normalization", return_type: "Result<Vector>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::fs", type: "standard_library", purpose: "File system operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::io", type: "standard_library", purpose: "Input/output operations"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "flate2", type: "external_crate", purpose: "Compression/decompression"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", type: "external_crate", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "tracing", type: "external_crate", purpose: "Logging framework"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "debug_test", condition: "cfg(test)", purpose: "Debug testing functionality"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "demo_test", condition: "cfg(test)", purpose: "Demo testing functionality"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Vector Store Persistence Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/persistence/enhanced_store.rs
CREATE (doc:Document {
      id: "Enhanced Vector Store Implementation",
      title: "Enhanced Vector Store Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "enhanced_vector_store", language: "Rust", description: "Enhanced vector store with workspace and dynamic collection support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "EnhancedVectorStore", visibility: "public", description: "Main struct providing enhanced vector store functionality"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "EnhancedStoreError", visibility: "public", description: "Error type for enhanced vector store operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Create new enhanced vector store instance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "initialize_metadata_cache", visibility: "private", description: "Initialize metadata cache with workspace and dynamic collections"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "create_workspace_metadata", visibility: "private", description: "Create enhanced metadata for workspace collections"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "get_collection_metadata", visibility: "public", description: "Get metadata for a specific collection"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "list_collections", visibility: "public", description: "List all collections"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "list_workspace_collections", visibility: "public", description: "List only workspace collections"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "list_dynamic_collections", visibility: "public", description: "List only dynamic collections"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "create_collection", visibility: "public", description: "Create a new dynamic collection"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "collection_exists", visibility: "public", description: "Check if a collection exists"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "is_workspace_collection", visibility: "public", description: "Check if collection is a workspace collection"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "is_dynamic_collection", visibility: "public", description: "Check if collection is a dynamic collection"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "delete_collection", visibility: "public", description: "Delete a collection"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "HashMap for metadata caching"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "thiserror::Error", type: "external_crate", description: "Error handling derive macro"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tracing", type: "external_crate", description: "Logging framework"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::db::VectorStore", type: "internal_module", description: "Base vector store implementation"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "crate::models", type: "internal_module", description: "Data models and configurations"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::persistence::dynamic", type: "internal_module", description: "Dynamic collection persistence layer"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "crate::persistence::types", type: "internal_module", description: "Persistence type definitions"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "PersistenceConfig", description: "Configuration for dynamic persistence"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "CollectionConfig", description: "Configuration for collections"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Database {name: "metadata_cache", type: "in_memory", description: "RwLock-protected HashMap for metadata caching"})
CREATE (doc)-[:MENTIONS]->(e24)

MATCH (doc:Document {title: "Enhanced Vector Store Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/persistence/dynamic.rs
CREATE (doc:Document {
      id: "Dynamic Collection Persistence Module",
      title: "Dynamic Collection Persistence Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "DynamicCollectionPersistence", language: "rust", purpose: "Manages persistence for dynamic collections with WAL support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "DynamicCollectionPersistence", visibility: "public", fields: "base_path,wal,active_transactions,checkpoint_interval,vector_store,data_dir,wal_config,checkpoint_interval,auto_recovery,verify_integrity"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "PersistenceConfig", visibility: "public", fields: "data_dir,wal_config,checkpoint_interval,auto_recovery,verify_integrity"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", async: "true", return_type: "Result<Self, PersistenceError>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "create_collection", visibility: "public", async: "true", return_type: "Result<EnhancedCollectionMetadata, PersistenceError>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "save_metadata", visibility: "public", async: "true", return_type: "Result<(), PersistenceError>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "load_metadata", visibility: "public", async: "true", return_type: "Result<EnhancedCollectionMetadata, PersistenceError>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "collection_exists", visibility: "public", async: "true", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::path::{Path, PathBuf}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::sync::{Arc, Mutex}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde_json", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "thiserror::Error", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tracing", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "crate::db::VectorStore", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::models", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::persistence::types", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::persistence::wal", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "PersistenceConfig", fields: "data_dir,wal_config,checkpoint_interval,auto_recovery,verify_integrity"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Database {name: "VectorStore", type: "vector_database"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Database {name: "WriteAheadLog", type: "wal_database"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Dynamic Collection Persistence Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/parallel/mod.rs
CREATE (doc:Document {
      id: "Parallel Processing Pipeline for Embedding and Indexing",
      title: "Parallel Processing Pipeline for Embedding and Indexing",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "parallel_processing", language: "Rust", description: "Parallel processing pipeline for embedding and indexing operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Configuration {name: "ParallelConfig", type: "struct", description: "Configuration for parallel processing with thread counts and batch settings"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "init_parallel_env", return_type: "Result<()>", description: "Initialize parallel environment with thread pools and BLAS configuration"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "embedding_pool", return_type: "ThreadPool", description: "Get the global embedding thread pool"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "indexing_pool", return_type: "ThreadPool", description: "Get the global indexing thread pool"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ProcessingPipeline", type: "struct", description: "Generic processing pipeline for handling input, embedding, and indexing"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std", version: "standard", description: "Standard library for environment variables and threading"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "anyhow", description: "Error handling library"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "crossbeam", description: "Concurrent data structures and channels"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "parking_lot", description: "Fast synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "rayon", description: "Data parallelism library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "tracing", description: "Structured logging framework"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "once_cell", description: "Thread-safe lazy initialization"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "num_cpus", description: "CPU core detection"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Parallel Processing Pipeline for Embedding and Indexing"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/normalizer.rs
CREATE (doc:Document {
      id: "Text Normalization Module",
      title: "Text Normalization Module",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "text_normalizer", language: "Rust", purpose: "Text normalization and content processing"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Enum {name: "NormalizationLevel", variants: "Conservative,Moderate,Aggressive", purpose: "Defines normalization intensity levels"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Struct {name: "NormalizationPolicy", fields: "version,level,preserve_case,collapse_whitespace,remove_html,text,content_hash,metadata,original_size,normalized_size,removed_bytes,policy_version,content_type,policy,hasher", purpose: "Configuration for normalization behavior"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Struct {name: "NormalizedContent", fields: "text,content_hash,metadata", purpose: "Container for normalized text and metadata"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Struct {name: "NormalizationMetadata", fields: "original_size,normalized_size,removed_bytes,policy_version,content_type", purpose: "Metadata about normalization process"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Struct {name: "TextNormalizer", fields: "policy,hasher", purpose: "Main text normalization processor"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", purpose: "Constructor for TextNormalizer"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "normalize", purpose: "Main normalization function with content type awareness"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "normalize_query", purpose: "Query-specific normalization (always aggressive)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "normalize_conservative", purpose: "Level 1 normalization - minimal changes"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "normalize_moderate", purpose: "Level 2 normalization - balanced approach"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "normalize_aggressive", purpose: "Level 3 normalization - maximum compression"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde", type: "External", usage: "Serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "unicode_normalization", type: "External", usage: "Unicode text normalization"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "ContentType", type: "Internal", usage: "Content type detection"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "ContentHash", type: "Internal", usage: "Content hashing for deduplication"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "ContentHashCalculator", type: "Internal", usage: "Hash calculation utility"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Text Normalization Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/mod.rs
CREATE (doc:Document {
      id: "Vectorizer Storage and Detection Module",
      title: "Vectorizer Storage and Detection Module",
      domain: "software",
      doc_type: "rust_module_documentation"
    })
CREATE (e0:Module {name: "vectorizer", description: "Storage and detection module for code, markdown, plain text, etc.", features: "content-aware hashing,BLAKE3 hashing,type detection,normalization"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "TextNormalizer::new", module: "vectorizer::normalization", description: "Creates a new TextNormalizer instance"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "normalize", module: "vectorizer::normalization::TextNormalizer", description: "Normalizes raw text content"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "TextNormalizer", module: "vectorizer::normalization", description: "Handles text normalization with configurable policies"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "NormalizationPolicy", module: "vectorizer::normalization", description: "Configuration policy for text normalization"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ContentTypeDetector", module: "vectorizer::detector", description: "Detects content types from raw data"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CacheManager", module: "vectorizer::cache", description: "Manages caching operations and statistics"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "CacheConfig", module: "vectorizer::cache", description: "Configuration settings for cache operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "NormalizationConfig", module: "vectorizer::config", description: "Configuration for text normalization settings"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Enum {name: "ContentType", module: "vectorizer::detector", description: "Enumeration of supported content types"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Enum {name: "NormalizationLevel", module: "vectorizer::normalization", description: "Levels of normalization (conservative, moderate, aggressive)"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "normalization API", description: "Text normalization and content hashing API"})
CREATE (doc)-[:MENTIONS]->(e11)

MATCH (doc:Document {title: "Vectorizer Storage and Detection Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/integration.rs
CREATE (doc:Document {
      id: "Normalization Pipeline Implementation",
      title: "Normalization Pipeline Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "normalization_pipeline", language: "Rust", description: "Integration utilities and pipelines for document normalization"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "NormalizationPipeline", visibility: "public", description: "Main pipeline for document normalization processing"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ProcessedDocument", visibility: "public", description: "Result structure for processed documents"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", visibility: "public", description: "Create a new normalization pipeline from configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "process_document", visibility: "public", description: "Process document normalization"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "process_query", visibility: "public", description: "Process queries for normalization"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "is_duplicate", visibility: "public", description: "Check if document is already processed"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "cache_stats", visibility: "public", description: "Get cache statistics"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "clear_cache", visibility: "public", description: "Clear the cache"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "embedding_text", visibility: "public", description: "Get text for embedding generation"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "display_text", visibility: "public", description: "Get text for display purposes"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_pipeline_basic", description: "Basic pipeline functionality test"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "parking_lot", type: "external", usage: "RwLock for thread-safe caching"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tempfile", type: "external", usage: "Temporary directory creation for tests"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tokio", type: "external", usage: "Async runtime for tests"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "NormalizationConfig", description: "Configuration for normalization pipeline"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "CacheConfig", description: "Configuration for cache management"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Normalization Pipeline Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/hasher.rs
CREATE (doc:Document {
      id: "BLAKE3 Content Hash Implementation",
      title: "BLAKE3 Content Hash Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "content_hash", language: "Rust", description: "Provides BLAKE3 content hashing functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ContentHash", visibility: "public", traits: "Clone,Copy,PartialEq,Eq,Hash,Serialize,Deserialize,Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize,Debug,Display,Error", size: "32 bytes"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ContentHashCalculator", visibility: "public", description: "BLAKE3 hash calculator"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "VectorKey", visibility: "public", traits: "Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize", description: "Vector key containing content hash and embedding configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "FromHexError", visibility: "public", traits: "Debug,Display,Error", description: "Hex decoding error type"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "from_bytes", class: "ContentHash", visibility: "public", parameters: "bytes: [u8; 32],s: &str,content: &str,content: &[u8],content: &str,expected: &ContentHash,content_hash: ContentHash,embedding_model: String,embedding_dim: usize,quant_version: u32,bytes: &[u8],bytes: impl AsRef<[u8]>,s: &str", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "as_bytes", class: "ContentHash", visibility: "public", return_type: "&[u8; 32]"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "to_hex", class: "ContentHash", visibility: "public", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "from_hex", class: "ContentHash", visibility: "public", parameters: "s: &str", return_type: "Result<Self, hex::FromHexError>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "new", class: "ContentHashCalculator", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "hash", class: "ContentHashCalculator", visibility: "public", parameters: "content: &str", return_type: "ContentHash"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "hash_bytes", class: "ContentHashCalculator", visibility: "public", parameters: "content: &[u8]", return_type: "ContentHash"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "verify", class: "ContentHashCalculator", visibility: "public", parameters: "content: &str,expected: &ContentHash", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "new", class: "VectorKey", visibility: "public", parameters: "content_hash: ContentHash,embedding_model: String,embedding_dim: usize,quant_version: u32", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "to_bytes", class: "VectorKey", visibility: "public", return_type: "Vec<u8>"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "from_bytes", class: "VectorKey", visibility: "public", parameters: "bytes: &[u8]", return_type: "Result<Self, bincode::Error>"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "encode", visibility: "public", parameters: "bytes: impl AsRef<[u8]>", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "decode", visibility: "public", parameters: "s: &str", return_type: "Result<Vec<u8>, FromHexError>"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Test {name: "test_content_hash", description: "Test content hash functionality"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "blake3", type: "external", description: "BLAKE3 hashing algorithm"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde", type: "external", features: "Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "bincode", type: "external", description: "Binary serialization"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "hex", type: "external", description: "Hex encoding/decoding"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "BLAKE3 Content Hash Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/detector.rs
CREATE (doc:Document {
      id: "Content Type Detection Module",
      title: "Content Type Detection Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "content_type_detection", description: "Detects content types from file content and extensions", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ContentType", description: "Enum representing different content types", visibility: "public", derives: "Debug,Clone,PartialEq,Eq,Debug,Clone,PartialEq,Eq"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "TableFormat", description: "Enum for table format types", visibility: "public", derives: "Debug,Clone,PartialEq,Eq"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ContentTypeDetector", description: "Main detector class with cached regex patterns", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", description: "Create a new content type detector", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "detect", description: "Main detection function", visibility: "public", parameters: "content: &str,file_path: Option<&Path>,ext: &str,content: &str,lines: &[&str],lines: &[&str]", return_type: "ContentType"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "detect_by_extension", description: "Detect content type by file extension", visibility: "private", parameters: "ext: &str", return_type: "Option<ContentType>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "detect_by_heuristics", description: "Detect content type using content analysis", visibility: "private", parameters: "content: &str", return_type: "ContentType"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "is_likely_table", description: "Check if content is likely a table", visibility: "private", parameters: "lines: &[&str]", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "detect_table_format", description: "Detect specific table format", visibility: "private", parameters: "lines: &[&str]", return_type: "TableFormat"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "regex", type: "crate", description: "Regular expression library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::fmt", type: "standard_library", description: "Standard formatting traits"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::path", type: "standard_library", description: "Path manipulation utilities"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Content Type Detection Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/config.rs
CREATE (doc:Document {
      id: "NormalizationConfig Rust Module",
      title: "NormalizationConfig Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "NormalizationConfig", language: "Rust", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "NormalizationConfig", type: "struct", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "default", type: "impl Default", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "enabled", type: "impl method", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "conservative", type: "impl method", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "moderate", type: "impl method", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "aggressive", type: "impl method", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "enabled", type: "bool", description: "Enable text normalization for this collection"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "policy", type: "NormalizationPolicy", description: "Normalization policy to apply"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "cache_enabled", type: "bool", description: "Enable multi-tier caching for normalized text"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "hot_cache_size", type: "usize", description: "Hot cache size in bytes (in-memory LFU cache)"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "normalize_queries", type: "bool", description: "Apply normalization to queries as well"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "store_raw_text", type: "bool", description: "Store both raw and normalized text in payload"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "super", type: "parent_module", items: "NormalizationLevel,NormalizationPolicy"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "NormalizationConfig Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/telemetry.rs
CREATE (doc:Document {
      id: "OpenTelemetry Integration Module",
      title: "OpenTelemetry Integration Module",
      domain: "software",
      doc_type: "rust_module_documentation"
    })
CREATE (e0:Module {name: "vectorizer::monitoring::telemetry", description: "OpenTelemetry integration module for tracing and monitoring", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "try_init", signature: "try_init(service_name: &str, otlp_endpoint: Option<String>) -> anyhow::Result<()>", description: "Initialize OpenTelemetry tracing with optional OTLP endpoint", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "shutdown", signature: "shutdown()", description: "Shutdown OpenTelemetry and flush all pending spans", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Test {name: "test_try_init", description: "Test function for try_init functionality", module: "vectorizer::monitoring::telemetry"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "OTLP_ENDPOINT", type: "environment_variable", default_value: "http://localhost:4317", description: "OTLP collector endpoint configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "anyhow", type: "crate", description: "Error handling library"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "tracing", type: "crate", description: "Structured logging and tracing library"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:API {name: "OpenTelemetry OTLP", type: "external_api", endpoint: "http://localhost:4317", description: "OpenTelemetry Protocol for trace export"})
CREATE (doc)-[:MENTIONS]->(e7)

MATCH (doc:Document {title: "OpenTelemetry Integration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/system_collector.rs
CREATE (doc:Document {
      id: "System Collector Module",
      title: "System Collector Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "collector", description: "System-level metrics collection module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "SystemCollectorConfig", description: "Configuration for system metrics collector", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "SystemCollector", description: "Main system metrics collector implementation", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new system metrics collector with default config", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "with_config", description: "Create a new system metrics collector with custom config", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "start", description: "Start the metrics collection loop", visibility: "public", return_type: "tokio::task::JoinHandle<()>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "collect_metrics", description: "Collect all system metrics", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "collect_memory_metrics", description: "Collect memory usage metrics", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "collect_vector_store_metrics", description: "Collect vector store metrics (collections and vectors count)", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "interval_secs", description: "Interval between metric collections in seconds", default_value: "15", type: "u64"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "tracing", description: "Logging and tracing framework", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "tokio", description: "Async runtime for Rust", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "memory_stats", description: "Memory statistics collection library", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "VectorStore", description: "Vector storage interface", type: "internal_api"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "METRICS", description: "Global metrics registry", type: "internal_api"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "test_collector_creation", description: "Test collector creation with default config", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Test {name: "test_custom_config", description: "Test collector creation with custom config", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "System Collector Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/registry.rs
CREATE (doc:Document {
      id: "Prometheus Metrics Registry Management",
      title: "Prometheus Metrics Registry Management",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "management", language: "rust", purpose: "Prometheus metrics registry management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "init", visibility: "public", return_type: "Result<(), prometheus::Error>", purpose: "Initialize metrics registry (idempotent)"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "get_registry", visibility: "public", return_type: "Arc<RwLock<Registry>>", purpose: "Get reference to global registry"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Configuration {name: "REGISTRY", type: "Lazy<Arc<RwLock<Registry>>>", scope: "global", purpose: "Global Prometheus registry instance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Test {name: "test_registry_init_idempotent", purpose: "Verify multiple init calls don't fail"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Test {name: "test_registry_access", purpose: "Verify registry can be accessed and contains metrics"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Test {name: "test_metrics_export", purpose: "Verify metrics can be recorded and exported"})
CREATE (doc)-[:MENTIONS]->(e6)

MATCH (doc:Document {title: "Prometheus Metrics Registry Management"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/performance.rs
CREATE (doc:Document {
      id: "Vectorizer Performance Monitoring System",
      title: "Vectorizer Performance Monitoring System",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "utilities", description: "Vectorizer utilities module for performance monitoring"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "OperationMetrics", visibility: "public", description: "Metrics for tracking operation performance", fields: "operation,count,total_duration,avg_duration,min_duration,max_duration,success_count,error_count,p50_duration,p95_duration,p99_duration,recent_durations,throughput,error_rate,memory_usage,cpu_usage,thread_count,file_handles,disk_io_ops,network_io_bytes,available_memory,total_memory,memory_usage_percent,load_average_1m,load_average_5m,load_average_15m,disk_usage_percent,network_connections,process_count,uptime_seconds,name,vector_count,memory_usage,search_count,insert_count,update_count,delete_count,avg_search_time,last_access,system,operations,collections,uptime,generated_at,operations,collections,start_time,system_metrics"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "SystemMetrics", visibility: "public", description: "System resource usage metrics", fields: "memory_usage,cpu_usage,thread_count,file_handles,disk_io_ops,network_io_bytes,available_memory,total_memory,memory_usage_percent,load_average_1m,load_average_5m,load_average_15m,disk_usage_percent,network_connections,process_count,uptime_seconds"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CollectionMetrics", visibility: "public", description: "Collection-specific performance metrics", fields: "name,vector_count,memory_usage,search_count,insert_count,update_count,delete_count,avg_search_time,last_access"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "PerformanceReport", visibility: "public", description: "Comprehensive performance report", fields: "system,operations,collections,uptime,generated_at"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "PerformanceMonitor", visibility: "public", description: "Performance monitoring and tracking system", fields: "operations,collections,start_time,system_metrics"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", class: "PerformanceMonitor", visibility: "public", description: "Create a new performance monitor instance"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "record_operation", class: "PerformanceMonitor", visibility: "public", description: "Record operation timing and success metrics"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for storing metrics"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::sync::Arc", type: "standard_library", description: "Atomic reference counting for shared ownership"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library", description: "Time measurement utilities"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tokio::sync::RwLock", type: "external_crate", description: "Async read-write lock for concurrent access"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Vectorizer Performance Monitoring System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/mod.rs
CREATE (doc:Document {
      id: "Monitoring System Documentation",
      title: "Monitoring System Documentation",
      domain: "software",
      doc_type: "code_documentation"
    })
CREATE (e0:Module {name: "vectorizer::monitoring", description: "Monitoring capabilities module with OpenTelemetry integration"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "correlation", description: "Correlation ID management module"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "metrics", description: "Metrics collection and management"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "system_collector", description: "System metrics collection"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "registry", description: "Prometheus registry management"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "init", description: "Initialize monitoring system", return_type: "anyhow::Result<()>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "export_metrics", description: "Export metrics in Prometheus format", return_type: "Result<String>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "Metrics", description: "Main metrics class for recording and managing metrics"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "SystemCollector", description: "System metrics collector"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "SystemCollectorConfig", description: "Configuration for system collector"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "TextEncoder", description: "Prometheus text format encoder"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "anyhow", type: "crate", description: "Error handling library"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "prometheus", type: "crate", description: "Prometheus metrics library"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tracing", type: "crate", description: "Structured logging library"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "CORRELATION_ID_HEADER", description: "HTTP header name for correlation ID"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "correlation_middleware", description: "Middleware for correlation ID handling"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "current_correlation_id", description: "Get current correlation ID"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "generate_correlation_id", description: "Generate new correlation ID"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "registry::init", description: "Initialize Prometheus registry"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "registry::get_registry", description: "Get Prometheus registry instance"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Test {name: "test_init", description: "Test monitoring system initialization"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Test {name: "test_export_metrics", description: "Test metrics export functionality"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Test {name: "test_init_monitoring", description: "Test monitoring initialization"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Test {name: "test_export_metrics_format", description: "Test metrics export format validation"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Test {name: "test_metrics_initialization", description: "Test metrics initialization"})
CREATE (doc)-[:MENTIONS]->(e24)

MATCH (doc:Document {title: "Monitoring System Documentation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/metrics.rs
CREATE (doc:Document {
      id: "Vector Database Monitoring Metrics",
      title: "Vector Database Monitoring Metrics",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "monitoring", language: "Rust", description: "Centralized metrics collection for vector database operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Metrics", visibility: "public", description: "Centralized metrics structure containing all monitoring counters, gauges, and histograms"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Dependency {name: "once_cell", version: "latest", type: "external", usage: "Lazy initialization of global metrics"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Dependency {name: "prometheus", version: "latest", type: "external", usage: "Metrics collection and exposition"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "GLOBAL_METRICS", type: "Lazy<Metrics>", description: "Global metrics instance for application-wide access"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:API {name: "search_metrics", category: "Search", endpoints: "search_requests_total,search_latency_seconds,search_results_count,vectors_total,collections_total,insert_requests_total,insert_latency_seconds,replication_lag_ms,replication_bytes_sent_total,replication_bytes_received_total,replication_operations_pending,memory_usage_bytes,cache_requests_total,api_errors_total,cpu_usage_percent,disk_io_ops_per_second,network_io_bytes_per_second,db_connection_pool_size,db_active_connections,db_query_latency_seconds,cache_hit_ratio,cache_size_bytes,cache_evictions_total,documents_processed_total,embeddings_generated_total,avg_embedding_dimension,quantization_compression_ratio,index_build_time_seconds,index_size_bytes,errors_by_type_total,error_rate_percent,last_error_timestamp"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:API {name: "indexing_metrics", category: "Indexing", endpoints: "vectors_total,collections_total,insert_requests_total,insert_latency_seconds"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:API {name: "replication_metrics", category: "Replication", endpoints: "replication_lag_ms,replication_bytes_sent_total,replication_bytes_received_total,replication_operations_pending"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:API {name: "system_metrics", category: "System", endpoints: "memory_usage_bytes,cache_requests_total,api_errors_total"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "performance_metrics", category: "Performance", endpoints: "cpu_usage_percent,disk_io_ops_per_second,network_io_bytes_per_second,db_connection_pool_size,db_active_connections,db_query_latency_seconds,cache_hit_ratio,cache_size_bytes,cache_evictions_total"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "business_metrics", category: "Business", endpoints: "documents_processed_total,embeddings_generated_total,avg_embedding_dimension,quantization_compression_ratio,index_build_time_seconds,index_size_bytes"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "error_metrics", category: "Error", endpoints: "errors_by_type_total,error_rate_percent,last_error_timestamp"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "new", visibility: "public", description: "Create a new metrics instance"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Vector Database Monitoring Metrics"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/monitoring/correlation.rs
CREATE (doc:Document {
      id: "Correlation ID Middleware for Axum",
      title: "Correlation ID Middleware for Axum",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "correlation_id", description: "Provides ID tracking and correlation middleware for Axum HTTP requests"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "generate_correlation_id", description: "Generates a new unique correlation ID using UUID v4", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "correlation_middleware", description: "Axum middleware that extracts or generates correlation ID and adds it to request context", parameters: "req: Request,next: Next", return_type: "Response"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "current_correlation_id", description: "Retrieves the current correlation ID from task-local storage", return_type: "Option<String>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "CORRELATION_ID_HEADER", value: "X-Correlation-ID", description: "HTTP header name for correlation ID"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "CORRELATION_ID", description: "Task-local storage for correlation ID", type: "Arc<String>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Test {name: "test_generate_correlation_id", description: "Tests that generated correlation IDs are unique and non-empty"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Test {name: "test_correlation_middleware", description: "Tests that correlation middleware adds ID header to response"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Test {name: "test_correlation_id_propagation", description: "Tests that correlation ID is available in request handlers"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "axum", description: "Web framework for Rust", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "tokio", description: "Async runtime for Rust", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "uuid", description: "UUID generation library", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tower", description: "Tower service trait and middleware", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Correlation ID Middleware for Axum"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/mod.rs
CREATE (doc:Document {
      id: "Data Vectorizer Rust Implementation",
      title: "Data Vectorizer Rust Implementation",
      domain: "software",
      doc_type: "code_analysis"
    })
CREATE (e0:Module {name: "vectorizer", language: "rust", description: "Data vectorization module with quantization and normalization capabilities"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Vector", visibility: "public", description: "Main vector structure with f32 data and optional payload"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QuantizedVector", visibility: "public", description: "Memory-optimized vector with quantized u8 data"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "Payload", visibility: "public", description: "JSON payload structure with normalization capabilities"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CollectionConfig", visibility: "public", description: "Configuration for vector collections including dimensions and metrics"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "DistanceMetric", visibility: "public", description: "Enum for different distance calculation methods"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "HnswConfig", visibility: "public", description: "HNSW index configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "from_vector", visibility: "public", description: "Create QuantizedVector from full precision Vector"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "to_vector", visibility: "public", description: "Convert QuantizedVector back to Vector for search/API responses"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "memory_size", visibility: "public", description: "Calculate memory usage of quantized vector"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "quantize_to_u8", visibility: "public", description: "Quantize f32 vector data to u8 range (0-255)"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "dequantize_from_u8", visibility: "public", description: "Dequantize u8 data back to f32 vector"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "normalize", visibility: "public", description: "Normalize text content in payload using conservative normalization"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "normalize_value", visibility: "private", description: "Recursively normalize JSON values"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "normalized", visibility: "public", description: "Return normalized copy of payload"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::fmt", type: "standard_library", description: "Standard formatting traits"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "qdrant", type: "external_crate", description: "Vector database client"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde_json", type: "external_crate", description: "JSON serialization support"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "QuantizationConfig", description: "Configuration for vector quantization settings"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "CompressionConfig", description: "Configuration for data compression settings"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "NormalizationConfig", description: "Configuration for text normalization settings"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "Data Vectorizer Rust Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/collection_metadata.rs
CREATE (doc:Document {
      id: "Vectorizer Metadata Structures",
      title: "Vectorizer Metadata Structures",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "metadata", language: "Rust", description: "Metadata structures for vectorizer collections and files"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CollectionMetadataFile", visibility: "public", description: "Metadata container for a collection of indexed files", attributes: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "FileMetadata", visibility: "public", description: "Metadata for individual indexed files", attributes: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Standard HashMap collection"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "serde", type: "external_crate", description: "Serialization framework", features: "Deserialize,Serialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "chrono", type: "external_crate", description: "Date and time handling library"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "CollectionIndexingConfig", description: "Configuration for collection indexing"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "EmbeddingModelInfo", description: "Information about the embedding model used"})
CREATE (doc)-[:MENTIONS]->(e7)

MATCH (doc:Document {title: "Vectorizer Metadata Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/ml/mod.rs
CREATE (doc:Document {
      id: "Advanced Machine Learning Module",
      title: "Advanced Machine Learning Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "advanced_ml", description: "Advanced machine integration providing sophisticated ML capabilities", features: "Multiple embedding,fine-tuning,Transfer domain,versioning,A/B testing,performance,Automated selection"})
CREATE (doc)-[:MENTIONS]->(e0)

MATCH (doc:Document {title: "Advanced Machine Learning Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/ml/advanced_ml.rs
CREATE (doc:Document {
      id: "ML Manager System Architecture",
      title: "ML Manager System Architecture",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "ml_manager", language: "Rust", description: "Advanced ML management system with model registry, training, evaluation, and A/B testing"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AdvancedMlManager", visibility: "public", description: "Main ML management class with model registry, trainer, evaluator, monitor, and A/B testing"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "MlConfig", visibility: "public", description: "ML configuration structure"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ModelConfig", visibility: "public", description: "Model configuration structure"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ModelInfo", visibility: "public", description: "Model information structure"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ModelType", visibility: "public", description: "Model type enumeration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ModelParameters", visibility: "public", description: "Model parameters structure"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "ModelPerformance", visibility: "public", description: "Model performance metrics structure"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "ModelStatus", visibility: "public", description: "Model status enumeration"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "ModelSelectionStrategy", visibility: "public", description: "Model selection strategy enumeration"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "ModelCachingConfig", visibility: "public", description: "Model caching configuration"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "CacheEvictionPolicy", visibility: "public", description: "Cache eviction policy enumeration"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "TrainingConfig", visibility: "public", description: "Training configuration structure"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "DataSource", visibility: "public", description: "Data source configuration"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "DataSourceType", visibility: "public", description: "Data source type enumeration"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "TrainingParameters", visibility: "public", description: "Training parameters structure"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map collection"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library", description: "Thread-safe reference counting and read-write locks"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library", description: "Time utilities"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "anyhow::Result", type: "external_crate", description: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "tokio::time::{interval, sleep}", type: "external_crate", description: "Async time utilities"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "crate::error::VectorizerError", type: "internal_module", description: "Custom error type"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "ML Manager System Architecture"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/logging/mod.rs
CREATE (doc:Document {
      id: "Centralized Vectorizer Logging System",
      title: "Centralized Vectorizer Logging System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "vectorizer_logging", description: "Centralized logging system for vectorizer service", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "init_logging", description: "Initialize centralized logging system with file and console output", parameters: "service_name: &str,logs_dir: &Path,,,service_name: &str,date: Option<DateTime<Local>>", return_type: "Result<(), Box<dyn std::error::Error>>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "cleanup_old_logs", description: "Remove log files older than 24 hours", parameters: "logs_dir: &Path", return_type: "Result<(), Box<dyn std::error::Error>>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "cleanup_old_logs_manual", description: "Manually trigger log cleanup", parameters: "", return_type: "Result<(), Box<dyn std::error::Error>>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "get_logs_dir", description: "Get current logs directory path", parameters: "", return_type: "PathBuf"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_log_file_path", description: "Generate log file path for specific service and date", parameters: "service_name: &str,date: Option<DateTime<Local>>", return_type: "PathBuf"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Test {name: "test_get_log_file_path", description: "Test log file path generation", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Test {name: "test_cleanup_old_logs", description: "Test log cleanup functionality", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "logging_config", description: "Logging configuration with console and file output", log_level: "info", retention_days: "1"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std", type: "standard_library", modules: "path,time,fs,io,DateTime,Local,error,info,warn,EnvFilter,layer,util,fmt"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "chrono", type: "external_crate", modules: "DateTime,Local"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "tracing", type: "external_crate", modules: "error,info,warn"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tracing_subscriber", type: "external_crate", modules: "EnvFilter,layer,util,fmt"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Centralized Vectorizer Logging System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/simple_search_engine.rs
CREATE (doc:Document {
      id: "SimpleSearchEngine Rust Module",
      title: "SimpleSearchEngine Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "simple_search_engine", language: "rust", description: "Implements a simple search engine without std::collections::HashMap"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "SimpleSearchEngine", visibility: "public", description: "Main search engine struct"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Self", description: "Create a new simple search engine"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "add_documents", visibility: "public", parameters: "documents: Vec<Document>,query: &str,collections: Vec<String>,max_results: usize,content: &str,query: &str,content: &str,query: &str,collection: &str,query: &str,collection: &str", return_type: "Result<(), String>", description: "Add documents to the search engine"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "search", visibility: "public", parameters: "query: &str,collections: Vec<String>,max_results: usize", return_type: "Result<Vec<IntelligentSearchResult>, String>", description: "Perform search on documents"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "calculate_score", visibility: "private", parameters: "content: &str,query: &str", return_type: "f32", description: "Calculate relevance score between content and query"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "calculate_term_frequency", visibility: "private", parameters: "content: &str,query: &str", return_type: "f32", description: "Calculate term frequency for scoring"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "calculate_collection_relevance", visibility: "private", parameters: "collection: &str,query: &str", return_type: "f32", description: "Calculate collection relevance bonus"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_document_count", visibility: "public", return_type: "usize", description: "Get total document count"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_documents_by_collection", visibility: "public", parameters: "collection: &str", return_type: "Vec<&Document>", description: "Get documents filtered by collection"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "crate::intelligent_search", type: "internal_crate", imports: "Document,IntelligentSearchResult,ScoreBreakdown"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", type: "standard_library", usage: "excluded"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_simple_search_engine_creation", type: "unit_test", description: "Test engine creation"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_add_documents", type: "async_test", description: "Test adding documents to engine"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "SimpleSearchEngine Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/rest_api.rs
CREATE (doc:Document {
      id: "REST API Tools for Intelligent Search",
      title: "REST API Tools for Intelligent Search",
      domain: "software",
      doc_type: "Rust API Module"
    })
CREATE (e0:Module {name: "REST API Tools", description: "implements REST API endpoints for intelligent search functionality", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:API {name: "/api/intelligent-search", endpoint: "/api/intelligent-search", method: "REST"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:API {name: "/api/multi-collection-search", endpoint: "/api/multi-collection-search", method: "REST"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:API {name: "/api/semantic-search", endpoint: "/api/semantic-search", method: "REST"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:API {name: "/api/contextual-search", endpoint: "/api/contextual-search", method: "REST"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "IntelligentSearchRequest", type: "struct", purpose: "Request structure for intelligent search API"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "MultiCollectionSearchRequest", type: "struct", purpose: "Request structure for multi-collection search API"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "SemanticSearchRequest", type: "struct", purpose: "Request structure for semantic search API"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "ContextualSearchRequest", type: "struct", purpose: "Request structure for contextual search API"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "RESTSearchResponse", type: "struct", purpose: "Response structure for REST API calls"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "RESTErrorResponse", type: "struct", purpose: "Error response structure for REST API calls"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "RESTAPIHandler", type: "struct", purpose: "Main handler for REST API operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "new", purpose: "Create a new REST API handler", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "new_with_store", purpose: "Create REST API handler with existing VectorStore", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "handle_intelligent_search", purpose: "Handle intelligent search requests", visibility: "public", async: "true"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::collections::HashMap", type: "standard library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde", type: "external crate", features: "Deserialize,Serialize"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::intelligent_search::mcp_tools", type: "internal module"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::intelligent_search", type: "internal module"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "chrono", type: "external crate"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "api_version", value: "1.0.0", type: "string"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "REST API Tools for Intelligent Search"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/query_generator.rs
CREATE (doc:Document {
      id: "QueryGenerator Rust Module",
      title: "QueryGenerator Rust Module",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "QueryGenerator", language: "Rust", description: "A query generator for creating multiple search queries from user input"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "QueryGenerator", visibility: "public", fields: "max_queries: usize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", parameters: "max_queries: usize,&self,user_query: &str,&self,query: &str,&self,word: &str,&self,main_term: &str,&self,term: &str", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "generate_queries", visibility: "public", parameters: "&self,user_query: &str", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "extract_technical_terms", visibility: "private", parameters: "&self,query: &str", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "is_technical_term", visibility: "private", parameters: "&self,word: &str", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "generate_technical_queries", visibility: "private", parameters: "&self,main_term: &str", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "expand_domain_terms", visibility: "private", parameters: "&self,term: &str", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Test {name: "test_query_generator_creation", description: "Tests QueryGenerator creation with max_queries parameter"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Test {name: "test_generate_queries_basic", description: "Tests basic query generation functionality"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::collections::HashSet", type: "standard_library", purpose: "Deduplication of generated queries"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "QueryGenerator Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/mod.rs
CREATE (doc:Document {
      id: "Intelligent Search Engine Implementation",
      title: "Intelligent Search Engine Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "intelligent_search_engine", language: "Rust", description: "Intelligent search capabilities with query generation and MMR diversification"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "IntelligentSearchConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", description: "Configuration for intelligent search engine"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "IntelligentSearchEngine", visibility: "public", description: "Main intelligent search engine implementation"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "IntelligentSearchResult", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Search result structure"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "public", return_type: "Self", description: "Create a new intelligent search engine"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "add_documents", visibility: "public", return_type: "Result<(), String>", description: "Add documents to the search engine"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "search", visibility: "public", return_type: "Result<(Vec<IntelligentSearchResult>, SearchMetadata), String>", description: "Perform intelligent search with query generation and MMR"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "deduplicate_results", visibility: "private", return_type: "Vec<IntelligentSearchResult>", description: "Remove duplicate results based on similarity"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "calculate_similarity", visibility: "private", return_type: "f32", description: "Calculate similarity between two text strings using Jaccard index"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_config", visibility: "public", return_type: "&IntelligentSearchConfig", description: "Get current configuration"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "update_config", visibility: "public", return_type: "()", description: "Update configuration"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", version: "latest", features: "Serialize,Deserialize", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashMap", description: "Standard library hash map"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "max_queries", type: "usize", default_value: "8", description: "Maximum number of queries to generate"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "domain_expansion", type: "bool", default_value: "true", description: "Enable domain-specific expansion"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "technical_focus", type: "bool", default_value: "true", description: "Enable technical term focus"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "similarity_threshold", type: "f32", default_value: "0.8", description: "Similarity threshold for deduplication"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "mmr_lambda", type: "f32", default_value: "0.7", description: "MMR lambda parameter (0.0 = diversity, 1.0 = relevance)"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "Intelligent Search Engine Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/mmr_diversifier.rs
CREATE (doc:Document {
      id: "MMR (Maximal Marginal Relevance) Diversifier Implementation",
      title: "MMR (Maximal Marginal Relevance) Diversifier Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "mmr_diversifier", language: "Rust", description: "Implements MMR diversification for search results"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "MMRDiversifier", visibility: "public", description: "MMR balancing struct with lambda parameter"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create a new MMR diversifier", parameters: "lambda: f32,results: &[IntelligentSearchResult],max_results: usize,candidates: &[IntelligentSearchResult],selected: &[IntelligentSearchResult]"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "diversify", visibility: "public", description: "Diversify results using MMR algorithm", parameters: "results: &[IntelligentSearchResult],max_results: usize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "select_best_mmr_result", visibility: "private", description: "Select best MMR result from candidates", parameters: "candidates: &[IntelligentSearchResult],selected: &[IntelligentSearchResult]"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "calculate_max_similarity", visibility: "private", description: "Calculate maximum similarity between candidate and selected results"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "calculate_content_similarity", visibility: "private", description: "Calculate Jaccard similarity between two content strings"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_lambda", visibility: "public", description: "Get current lambda value"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "set_lambda", visibility: "public", description: "Set lambda value with clamping"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::collections::HashSet", type: "standard_library", description: "HashSet for word intersection calculations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "crate::intelligent_search::IntelligentSearchResult", type: "internal", description: "Search result structure from intelligent search module"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_mmr_diversifier_creation", description: "Test MMR diversifier creation with lambda parameter"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_default_mmr_diversifier", description: "Test default MMR diversifier creation"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_set_lambda", description: "Test lambda value setting and clamping"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "test_diversify_empty_results", description: "Test diversification with empty results"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "test_diversify_zero_max_results", description: "Test diversification with zero max results"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Test {name: "test_diversify_single_result", description: "Test diversification with single result"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Test {name: "test_diversify_multiple_results", description: "Test diversification with multiple results"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "create_test_result", visibility: "test_helper", description: "Helper function to create test IntelligentSearchResult"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "MMR (Maximal Marginal Relevance) Diversifier Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/mcp_tools.rs
CREATE (doc:Document {
      id: "MCP Tools VectorStore EmbeddingManager",
      title: "MCP Tools VectorStore EmbeddingManager",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "mcp_tools", description: "MCP capabilities implementation for VectorStore EmbeddingManager"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "IntelligentSearchTool", description: "MCP Intelligent search tool configuration", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "MultiCollectionSearchTool", description: "MCP Multi collection search tool configuration", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "SemanticSearchTool", description: "MCP Semantic search tool configuration", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ContextualSearchTool", description: "MCP Contextual search tool configuration", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "MCPToolResponse", description: "MCP tool response structure", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ToolMetadata", description: "Tool metadata structure", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "MCPHandler", description: "MCP tool handler implementation", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "new", description: "Create new MCP tool handler with VectorStore and EmbeddingManager", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "new_with_store", description: "Create new MCP handler with VectorStore only", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "create_embedding_manager_for_collection", description: "Helper function to create embedding manager for specific collection", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "handle_intelligent_search", description: "Handle intelligent search tool requests", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "crate::intelligent_search", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "max_collections_limit", value: "20", description: "Maximum number of collections to process to avoid timeout"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "MCP Tools VectorStore EmbeddingManager"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/mcp_server_integration.rs
CREATE (doc:Document {
      id: "MCP Search Integration",
      title: "MCP Search Integration",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "mcp_search", description: "MCP server integration for search functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "MCPExample", description: "Main MCP server integration struct"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new MCP server integration instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "handle_mcp_tool_call", description: "Handle MCP tool calls with different tool types"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "get_available_tools", description: "Get list of available MCP tools with their schemas"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "create_tool_schema", description: "Create tool schema for MCP tools"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde_json", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "crate::intelligent_search::mcp_tools", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "crate::intelligent_search::rest_api", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "intelligent_search", description: "Perform intelligent search with query generation, deduplication, and MMR diversification"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "multi_collection_search", description: "Search across multiple collections with intelligent ranking"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "semantic_search", description: "Perform semantic search with advanced reranking"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "contextual_search", description: "Perform contextual search with metadata filtering"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "EmbeddingConfig", description: "Configuration for embedding manager"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "MCP Search Integration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/examples.rs
CREATE (doc:Document {
      id: "MCP REST API Example Usage",
      title: "MCP REST API Example Usage",
      domain: "software",
      doc_type: "code_example"
    })
CREATE (e0:Module {name: "intelligent_search", path: "crate::intelligent_search"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "mcp_server_integration", path: "crate::intelligent_search::mcp_server_integration"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "mcp_tools", path: "crate::intelligent_search::mcp_tools"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "rest_api", path: "crate::intelligent_search::rest_api"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ExampleUsage", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "example_intelligent_search", visibility: "pub", async: "true", return_type: "Result<(), String>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "example_multi_collection_search", visibility: "pub", async: "true", return_type: "Result<(), String>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "example_semantic_search", visibility: "pub", async: "true", return_type: "Result<(), String>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "example_contextual_search", visibility: "pub", async: "true", return_type: "Result<(), String>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "MCPToolHandler", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "VectorStore", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "EmbeddingManager", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "EmbeddingConfig", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "IntelligentSearchTool", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "MultiCollectionSearchTool", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "SemanticSearchTool", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Class {name: "ContextualSearchTool", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "serde_json", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "EmbeddingConfig", type: "default_config"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "MCP REST API Example Usage"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/intelligent_search/context_formatter.rs
CREATE (doc:Document {
      id: "ContextFormatter Module",
      title: "ContextFormatter Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "ContextFormatter", description: "Formatter for intelligent search results and context management", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ContextFormatter", description: "Main formatter struct for handling search result formatting", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new context formatter", visibility: "public", parameters: "max_content_length: usize,max_lines_per_result: usize,include_metadata: bool,results: &[IntelligentSearchResult],query: &str,result: &IntelligentSearchResult,query: &str,content: &str,query: &str,content: &str,query: &str,content: &str,metadata: &HashMap<String, serde_json::Value>,results: &[IntelligentSearchResult],search_metadata: Option<&str>,query: &str,,,,,content: &str,score: f32"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "format_context", description: "Format multiple search results into context string", visibility: "public", parameters: "results: &[IntelligentSearchResult],query: &str"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "format_single_result", description: "Format a single search result", visibility: "private", parameters: "result: &IntelligentSearchResult,query: &str"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "format_content", description: "Format content with relevance-based extraction", visibility: "private", parameters: "content: &str,query: &str"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "extract_relevant_lines", description: "Extract lines relevant to query terms", visibility: "private", parameters: "content: &str,query: &str"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "truncate_content", description: "Truncate content to maximum length", visibility: "private", parameters: "content: &str"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "format_metadata", description: "Format metadata HashMap into string", visibility: "private", parameters: "metadata: &HashMap<String, serde_json::Value>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "format_enhanced_context", description: "Format enhanced context with search metadata", visibility: "public", parameters: "results: &[IntelligentSearchResult],search_metadata: Option<&str>,query: &str"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_max_content_length", description: "Get maximum content length configuration", visibility: "public", parameters: ""})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "get_max_lines_per_result", description: "Get maximum lines per result configuration", visibility: "public", parameters: ""})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "is_metadata_included", description: "Check if metadata inclusion is enabled", visibility: "public", parameters: ""})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "default", description: "Default implementation for ContextFormatter", visibility: "public", parameters: ""})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "test_context_formatter_creation", description: "Test formatter creation with parameters"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "test_format_context_empty", description: "Test formatting empty results"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Test {name: "test_format_single_result", description: "Test single result formatting"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "create_test_result", description: "Helper function to create test results", visibility: "private", parameters: "content: &str,score: f32"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "HashMap for metadata storage"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "crate::intelligent_search::IntelligentSearchResult", type: "internal_module", description: "Search result structure"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde_json::Value", type: "external_crate", description: "JSON value type for metadata"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "max_content_length", type: "usize", description: "Maximum length for content truncation", default: "400"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "max_lines_per_result", type: "usize", description: "Maximum lines to extract per result", default: "5"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "include_metadata", type: "bool", description: "Whether to include metadata in output", default: "false"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "ContextFormatter Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/watcher.rs
CREATE (doc:Document {
      id: "FileWatcher Implementation",
      title: "FileWatcher Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "FileWatcher", language: "Rust", purpose: "File system monitoring and change detection"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "FileWatcher", visibility: "public", fields: "config,debouncer,hash_validator,is_running,event_sender,notify_watcher"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Result<Self>", purpose: "Constructor for FileWatcher"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "start", visibility: "public", return_type: "Result<()>", purpose: "Start the file watcher"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "std::path::Path", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "std::sync::atomic::{AtomicBool, Ordering}", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "notify::{Event, EventKind, RecursiveMode, Watcher as NotifyWatcher}", type: "External Crate"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "tokio::sync::mpsc", type: "External Crate"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "FileWatcherConfig", type: "Configuration Struct"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "Debouncer", type: "Utility Class"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "HashValidator", type: "Utility Class"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "FileChangeEvent", type: "Event Type"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "FileChangeEventWithMetadata", type: "Event Type"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "FileWatcherError", type: "Error Type"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "FileWatcher Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/usage_example.rs
CREATE (doc:Document {
      id: "Integrated File Synchronization System",
      title: "Integrated File Synchronization System",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "synchronization", description: "Integrated file synchronization system with vectorizer support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "setup_integrated_file_watcher", return_type: "Result<IntegratedSyncManager>", description: "Sets up the integrated file watcher with all required components"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "process_file_changes_example", return_type: "Result<()>", description: "Example function demonstrating file change processing"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "integrate_with_existing_watcher", return_type: "Result<()>", description: "Integrates the sync manager with an existing file watcher"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "integrate_with_metrics", return_type: "Result<()>", description: "Integrates the sync manager with metrics collection"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "IntegratedSyncManager", description: "Main synchronization manager class"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "HashValidator", description: "Validates file hashes for change detection"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "EmbeddingCache", description: "Caches embedding data with configuration"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "VectorStore", description: "Database for storing vector embeddings"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "EmbeddingManager", description: "Manages embedding operations with RwLock synchronization"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "ParallelProcessor", description: "Processes operations in parallel with batch configuration"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "MetricsCollector", description: "Collects and tracks system metrics"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "Watcher", description: "File system watcher for monitoring changes"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "IntegratedSyncConfig", description: "Configuration for integrated synchronization settings"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "CacheConfig", description: "Configuration for embedding cache"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "BatchConfig", description: "Configuration for parallel batch processing"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "FileWatcherConfig", description: "Configuration for file watcher settings"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "EmbeddingConfig", description: "Configuration for embedding operations"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "FileChangeEvent", description: "API for file change events (Created, Modified, Deleted, Renamed)"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "FileChangeEventWithMetadata", description: "File change event with additional metadata"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Database {name: "VectorStore", description: "Database for storing and retrieving vector embeddings"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Test {name: "test_setup_integrated_file_watcher", description: "Test for integrated file watcher setup"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "Integrated File Synchronization System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/operations.rs
CREATE (doc:Document {
      id: "VectorOperations Module - File Processing and Indexing",
      title: "VectorOperations Module - File Processing and Indexing",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "VectorOperations", language: "Rust", purpose: "File change processing and vector indexing"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "VectorOperations", visibility: "public", fields: "vector_store,embedding_manager,config"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Self", purpose: "Constructor for VectorOperations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "process_file_change", visibility: "public", return_type: "Result<()>", purpose: "Process file change events (created, modified, deleted, renamed)"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "index_file", visibility: "public", return_type: "Result<()>", purpose: "Index file content using DocumentLoader"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "remove_file", visibility: "public", return_type: "Result<()>", purpose: "Remove file from vector store"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "update_file", visibility: "public", return_type: "Result<()>", purpose: "Update file by re-indexing"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "index_file_from_path", visibility: "public", return_type: "Result<()>", purpose: "Index file from filesystem path"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::sync::Arc", type: "standard_library", purpose: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tokio::sync::RwLock", type: "async_runtime", purpose: "Async read-write lock"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "crate::VectorStore", type: "internal_module", purpose: "Vector storage backend"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "crate::embedding::EmbeddingManager", type: "internal_module", purpose: "Embedding generation and management"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "crate::file_loader::FileLoader", type: "internal_module", purpose: "File loading and processing"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "crate::file_watcher", type: "internal_module", purpose: "File system monitoring"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "LoaderConfig", type: "struct", purpose: "Configuration for file loading operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "FileWatcherConfig", type: "struct", purpose: "Configuration for file watching"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "EmbeddingConfig", type: "struct", purpose: "Configuration for embedding operations"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "FileChangeEvent", type: "enum", purpose: "File change event types"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "FileChangeEventWithMetadata", type: "struct", purpose: "File change event with additional metadata"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "VectorOperations Module - File Processing and Indexing"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/mod.rs
CREATE (doc:Document {
      id: "FileWatcherSystem Rust Module",
      title: "FileWatcherSystem Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "incremental", description: "Incremental file watching system"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "cross_platform", description: "Cross-platform file watching support"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "updates", description: "File update handling"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "enhanced_watcher", description: "Enhanced file watching capabilities"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "file_index", description: "File indexing and mapping"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "hash_validator", description: "File hash validation"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "operations", description: "Vector operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Module {name: "tests", description: "Test modules"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Module {name: "test_operations", description: "Vector operations tests"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Module {name: "test_integration", description: "Integration tests"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "FileWatcherSystem", description: "Main file watching system"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "WorkspaceWatchConfig", description: "Workspace watch configuration"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "FileChangeEvent", description: "File change event enum"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "FileChangeEventWithMetadata", description: "File change event with metadata"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "from_notify_event", description: "Convert notify::Event to FileChangeEvent"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "new", description: "Create new FileWatcherSystem"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "start", description: "Start the file watcher system"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::path::PathBuf", description: "Standard library path buffer"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "std::sync::Arc", description: "Atomically reference counted pointer"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "config::FileWatcherConfig", description: "File watcher configuration"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "discovery::FileDiscovery", description: "File discovery module"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "enhanced_watcher::EnhancedFileWatcher", description: "Enhanced file watcher"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "file_index::FileIndex", description: "File indexing system"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "metrics::MetricsCollector", description: "Metrics collection"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "notify::EventKind", description: "File system event types"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "operations::VectorOperations", description: "Vector operations"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Dependency {name: "tokio::sync::RwLock", description: "Async read-write lock"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Dependency {name: "watcher::Watcher", description: "File system watcher"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Dependency {name: "crate::VectorStore", description: "Vector storage system"})
CREATE (doc)-[:MENTIONS]->(e28)
CREATE (e29:Dependency {name: "crate::embedding::EmbeddingManager", description: "Embedding management"})
CREATE (doc)-[:MENTIONS]->(e29)
CREATE (e30:Configuration {name: "FileWatcherConfig", description: "File watcher configuration"})
CREATE (doc)-[:MENTIONS]->(e30)
CREATE (e31:Configuration {name: "WorkspaceWatchConfig", description: "Workspace watch configuration"})
CREATE (doc)-[:MENTIONS]->(e31)
CREATE (e32:Configuration {name: "CollectionConfig", description: "Collection configuration"})
CREATE (doc)-[:MENTIONS]->(e32)
CREATE (e33:Configuration {name: "ProjectConfig", description: "Project configuration"})
CREATE (doc)-[:MENTIONS]->(e33)
CREATE (e34:Configuration {name: "WorkspaceConfig", description: "Workspace configuration"})
CREATE (doc)-[:MENTIONS]->(e34)
CREATE (e35:API {name: "FileChangeEvent", description: "File change event API"})
CREATE (doc)-[:MENTIONS]->(e35)
CREATE (e36:API {name: "FileSystemEvent", description: "File system event API"})
CREATE (doc)-[:MENTIONS]->(e36)
CREATE (e37:Test {name: "test_operations", description: "Vector operations tests"})
CREATE (doc)-[:MENTIONS]->(e37)
CREATE (e38:Test {name: "test_integration", description: "Integration tests"})
CREATE (doc)-[:MENTIONS]->(e38)

MATCH (doc:Document {title: "FileWatcherSystem Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/metrics.rs
CREATE (doc:Document {
      id: "FileWatcher Metrics System",
      title: "FileWatcher Metrics System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "metrics", language: "Rust", description: "Comprehensive metrics collection system for file watcher operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "TimingMetrics", visibility: "public", description: "Timing-related metrics including processing, discovery, and sync times"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "FileMetrics", visibility: "public", description: "File processing statistics including success/error counts and file states"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "SystemMetrics", visibility: "public", description: "System resource metrics including memory, CPU, and I/O statistics"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "NetworkMetrics", visibility: "public", description: "API request metrics including response times and connection statistics"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "StatusMetrics", visibility: "public", description: "Error tracking and system health status metrics"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CollectionMetrics", visibility: "public", description: "Vector collection metrics for tracking vector operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "FileWatcherMetrics", visibility: "public", description: "Comprehensive metrics container combining all metric types"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "InternalMetrics", visibility: "internal", description: "Internal thread-safe metrics storage using atomic operations"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "MetricsCollector", visibility: "public", description: "Main metrics collection and management system"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "InternalMetrics::new", visibility: "public", description: "Constructor for InternalMetrics with atomic counter initialization"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for storing key-value pairs"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::sync::Arc", type: "standard_library", description: "Atomically reference counted smart pointer"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::sync::atomic", type: "standard_library", description: "Atomic operations for thread-safe counters"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::time", type: "standard_library", description: "Time-related types and functions"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tokio::sync::RwLock", type: "external_crate", description: "Async read-write lock from Tokio runtime"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "FileWatcher Metrics System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/integrated_sync.rs
CREATE (doc:Document {
      id: "IntegratedSyncManager - Rust Vectorizer Integration",
      title: "IntegratedSyncManager - Rust Vectorizer Integration",
      domain: "software",
      doc_type: "code_analysis"
    })
CREATE (e0:Module {name: "IntegratedSyncManager", language: "Rust", purpose: "Integrated file synchronization and embedding management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "IntegratedSyncManager", visibility: "public", purpose: "Manages integrated file synchronization with embedding cache and vector store"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "IntegratedSyncConfig", visibility: "public", purpose: "Configuration for integrated sync operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "SyncStats", visibility: "public", purpose: "Statistics tracking for sync operations"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "public", purpose: "Constructor for IntegratedSyncManager"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "process_file_change", visibility: "public", purpose: "Main entry point for processing file change events"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "handle_file_created_or_modified", visibility: "private", purpose: "Handles file creation and modification events"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "handle_file_deleted", visibility: "private", purpose: "Handles file deletion events"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "handle_file_renamed", visibility: "private", purpose: "Handles file rename events"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "invalidate_cache_entry", visibility: "private", purpose: "Invalidates cache entries for files"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::path::PathBuf", type: "standard_library", purpose: "Path handling"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::sync::Arc", type: "standard_library", purpose: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tokio::sync::RwLock", type: "external_crate", purpose: "Async read-write lock"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "anyhow", type: "external_crate", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tracing", type: "external_crate", purpose: "Logging and tracing"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::embedding::cache::EmbeddingCache", type: "internal_module", purpose: "Embedding cache management"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::embedding::EmbeddingManager", type: "internal_module", purpose: "Embedding management"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::db::VectorStore", type: "internal_module", purpose: "Vector database operations"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::batch::ParallelProcessor", type: "internal_module", purpose: "Parallel processing capabilities"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "enable_proactive_invalidation", type: "boolean", default: "true", purpose: "Enable proactive cache invalidation"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "enable_atomic_updates", type: "boolean", default: "true", purpose: "Enable atomic cache updates"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "max_concurrent_operations", type: "usize", default: "4", purpose: "Maximum concurrent re-embedding operations"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "max_retry_attempts", type: "u32", default: "3", purpose: "Maximum retry attempts for failed operations"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "retry_delay_ms", type: "u64", default: "1000", purpose: "Delay between retry attempts in milliseconds"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Configuration {name: "enable_metrics", type: "boolean", default: "true", purpose: "Enable metrics collection"})
CREATE (doc)-[:MENTIONS]->(e24)

MATCH (doc:Document {title: "IntegratedSyncManager - Rust Vectorizer Integration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/hash_validator.rs
CREATE (doc:Document {
      id: "HashValidator Rust Module",
      title: "HashValidator Rust Module",
      domain: "software",
      doc_type: "Rust Source Code"
    })
CREATE (e0:Module {name: "HashValidator", language: "Rust", purpose: "File hash validation and caching"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "HashValidator", visibility: "public", fields: "file_hashes,enabled"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Self", purpose: "Create new hash validator instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "with_enabled", visibility: "public", return_type: "Self", parameters: "enabled: bool,path: &std::path::Path,content: &str,path: &std::path::Path,path: &std::path::Path,path: &std::path::Path,path: &std::path::Path,enabled: bool,dir_path: &std::path::Path,path: &std::path::Path,expected_hash: &str"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "calculate_hash", visibility: "public", return_type: "Result<String, std::io::Error>", parameters: "path: &std::path::Path", async: "true"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "calculate_content_hash", visibility: "public", return_type: "String", parameters: "content: &str"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "has_content_changed", visibility: "public", return_type: "Result<bool, std::io::Error>", parameters: "path: &std::path::Path", async: "true"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "update_hash", visibility: "public", return_type: "Result<(), std::io::Error>", parameters: "path: &std::path::Path", async: "true"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "remove_hash", visibility: "public", return_type: "()", parameters: "path: &std::path::Path", async: "true"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "clear_hashes", visibility: "public", return_type: "()", async: "true"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_hash", visibility: "public", return_type: "Option<String>", parameters: "path: &std::path::Path", async: "true"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "is_enabled", visibility: "public", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "set_enabled", visibility: "public", return_type: "()", parameters: "enabled: bool"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "cached_hashes_count", visibility: "public", return_type: "usize", async: "true"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "initialize_directory_hashes", visibility: "public", return_type: "Result<usize, std::io::Error>", parameters: "dir_path: &std::path::Path", async: "true"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "get_cached_paths", visibility: "public", return_type: "Vec<PathBuf>", async: "true"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "validate_hash", visibility: "public", return_type: "Result<bool, std::io::Error>", parameters: "path: &std::path::Path,expected_hash: &str", async: "true"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Test {name: "test_hash_validator_creation", async: "true"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Test {name: "test_hash_validator_disabled", async: "true"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Test {name: "test_hash_calculation", async: "true"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Test {name: "test_content_change_detection", async: "true"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Test {name: "test_hash_operations", async: "true"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "std::path::PathBuf", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "sha2::{Digest, Sha256}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Dependency {name: "tokio::sync::RwLock", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Dependency {name: "walkdir::WalkDir", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Dependency {name: "tempfile::tempdir", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e28)

MATCH (doc:Document {title: "HashValidator Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/file_index.rs
CREATE (doc:Document {
      id: "FileIndex Module - Vector Collection Mapping System",
      title: "FileIndex Module - Vector Collection Mapping System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "FileIndex", language: "Rust", purpose: "Vector collection mapping and file tracking system"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CollectionVectorMapping", visibility: "public", purpose: "Maps collection names to vector metadata", optimization: "vector_ids removed to save memory"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "FileIndex", visibility: "public", purpose: "Main index for file-to-collection mappings", thread_safety: "Arc<RwLock<FileIndex>>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "FileIndexStats", visibility: "public", purpose: "Statistics about the file index"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "public", purpose: "Create a new file index", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "add_mapping", visibility: "public", purpose: "Add mapping between file and collection", parameters: "file_path,collection_name,last_hash,file_path,collection_name"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "remove_mapping", visibility: "public", purpose: "Remove mapping between file and collection", parameters: "file_path,collection_name"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "remove_file", visibility: "public", purpose: "Remove all mappings for a file", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_collections_for_file", visibility: "public", purpose: "Get collections for a specific file", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_files_for_collection", visibility: "public", purpose: "Get files for a specific collection", return_type: "Vec<PathBuf>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_last_hash", visibility: "public", purpose: "Get last hash for file-collection pair", return_type: "Option<String>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "update_hash", visibility: "public", purpose: "Update hash for file-collection pair"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "contains_file", visibility: "public", purpose: "Check if file exists in index", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "get_all_files", visibility: "public", purpose: "Get all files in index", return_type: "Vec<PathBuf>"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "get_all_collections", visibility: "public", purpose: "Get all collections in index", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "get_stats", visibility: "public", purpose: "Get index statistics", return_type: "FileIndexStats"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "clear", visibility: "public", purpose: "Clear all mappings"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "to_json", visibility: "public", purpose: "Serialize to JSON", return_type: "Result<String, serde_json::Error>"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "from_json", visibility: "public", purpose: "Deserialize from JSON", return_type: "Result<Self, serde_json::Error>"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Test {name: "test_file_index_operations", purpose: "Test file index operations"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "std::collections::{HashMap, HashSet}", type: "standard_library", purpose: "Hash maps and sets for indexing"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "std::path::PathBuf", type: "standard_library", purpose: "File path handling"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "std::sync::Arc", type: "standard_library", purpose: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", purpose: "Serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "tokio::sync::RwLock", type: "external_crate", purpose: "Read-write lock for thread safety"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "chrono", type: "external_crate", purpose: "Date/time handling"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Dependency {name: "serde_json", type: "external_crate", purpose: "JSON serialization"})
CREATE (doc)-[:MENTIONS]->(e26)

MATCH (doc:Document {title: "FileIndex Module - Vector Collection Mapping System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/enhanced_watcher.rs
CREATE (doc:Document {
      id: "Enhanced File Watcher System",
      title: "Enhanced File Watcher System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "enhanced_file_watcher", language: "rust", description: "Enhanced file system watcher with debouncing and hash validation"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "FileSystemEvent", visibility: "public", traits: "Debug,Clone,PartialEq,Debug,Clone,Debug,Clone,Debug,Clone", description: "Represents different types of file system events"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "EnhancedFileWatcher", visibility: "public", description: "Main file watcher implementation with enhanced features"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "WorkspaceConfig", visibility: "public", traits: "Debug,Clone", description: "Configuration for workspace-level file watching"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ProjectConfig", visibility: "public", traits: "Debug,Clone", description: "Configuration for project-level file watching"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CollectionConfig", visibility: "public", traits: "Debug,Clone", description: "Configuration for collection-specific file watching patterns"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", visibility: "public", return_type: "Result<Self>", description: "Constructor for EnhancedFileWatcher"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "start", visibility: "public", async: "true", return_type: "Result<()>", description: "Starts the file watcher"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "stop", visibility: "public", return_type: "Result<()>", description: "Stops the file watcher"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "is_running", visibility: "public", return_type: "bool", description: "Checks if the file watcher is currently running"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_config", visibility: "public", return_type: "&FileWatcherConfig", description: "Returns the current configuration"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "get_watched_paths", visibility: "public", return_type: "Vec<String>", description: "Returns list of currently watched paths"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "get_event_count", visibility: "public", return_type: "usize", description: "Returns the number of events processed"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "get_last_event_time", visibility: "public", return_type: "Option<std::time::SystemTime>", description: "Returns timestamp of last event"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "clear_events", visibility: "public", return_type: "()", description: "Clears all stored events"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "get_recent_events", visibility: "public", return_type: "Vec<FileChangeEventWithMetadata>", description: "Returns recent events with metadata"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Test {name: "test_filesystem_event_created", description: "Tests FileSystemEvent::Created variant"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Test {name: "test_filesystem_event_modified", description: "Tests FileSystemEvent::Modified variant"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Test {name: "test_filesystem_event_deleted", description: "Tests FileSystemEvent::Deleted variant"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Test {name: "test_filesystem_event_renamed", description: "Tests FileSystemEvent::Renamed variant"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Test {name: "test_filesystem_event_equality", description: "Tests equality comparison for FileSystemEvent"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Test {name: "test_enhanced_file_watcher_creation", description: "Tests EnhancedFileWatcher constructor"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "Enhanced File Watcher System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/discovery.rs
CREATE (doc:Document {
      id: "File Discovery System",
      title: "File Discovery System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "file_discovery", language: "Rust", description: "System for discovering and indexing existing files"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "FileDiscovery", visibility: "pub", description: "Main file discovery system"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Struct {name: "DiscoveryStats", visibility: "pub", description: "Statistics for file discovery operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Struct {name: "DiscoveryResult", visibility: "pub", description: "Result of file discovery operation"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "pub", description: "Create a new file discovery system"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "discover_existing_files", visibility: "pub", description: "Discover existing files with timeout"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "perform_discovery", visibility: "pub", description: "Perform the actual file discovery"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "scan_directory", visibility: "pub", description: "Scan a specific directory for files"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "FileWatcherConfig", description: "Configuration for file watching"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "DISCOVERY_TIMEOUT_SECONDS", value: "15", description: "Timeout for file discovery operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "MAX_FILES_PER_DISCOVERY", value: "20", description: "Maximum files to process per discovery"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashSet", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::path::{Path, PathBuf}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tokio::sync::RwLock", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "tracing::{debug, error, info, warn}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::VectorStore", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::file_watcher::{EmbeddingManager, FileWatcherConfig, VectorOperations}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "File Discovery System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_watcher/config.rs
CREATE (doc:Document {
      id: "FileWatcherConfig Rust Configuration",
      title: "FileWatcherConfig Rust Configuration",
      domain: "software",
      doc_type: "Configuration"
    })
CREATE (e0:Class {name: "FileWatcherConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Configuration {name: "FileWatcherConfig", type: "struct", purpose: "File watching and indexing configuration"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "default", return_type: "FileWatcherConfig", visibility: "public", purpose: "Create default configuration"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", return_type: "FileWatcherConfig", visibility: "public", purpose: "Create new configuration instance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "from_yaml_file", return_type: "Result<FileWatcherConfig, Box<dyn std::error::Error>>", visibility: "public", purpose: "Load configuration from YAML file"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "to_yaml_file", return_type: "Result<(), Box<dyn std::error::Error>>", visibility: "public", purpose: "Save configuration to YAML file"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "validate", return_type: "Result<(), String>", visibility: "public", purpose: "Validate configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde", version: "latest", type: "crate", features: "Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "serde_yaml", version: "latest", type: "crate", purpose: "YAML serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std", version: "1.9+", type: "standard_library", modules: "path::PathBuf,time::Duration"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "FileWatcherConfig Rust Configuration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_loader/persistence.rs
CREATE (doc:Document {
      id: "Vector Store Collection Management Module",
      title: "Vector Store Collection Management Module",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "vector_store_manager", language: "rust", purpose: "Collection management and persistence"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "new", visibility: "pub", return_type: "Self", purpose: "Constructor for VectorStoreManager"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "collection_exists_in_vecdb", visibility: "pub", parameters: "collection_name: &str,store: &VectorStore,collection_name: &str,collection_name: &str,metadata: &CollectionMetadata,persisted: &PersistedCollection,collection_name: &str,persisted: &PersistedCollection", return_type: "bool", purpose: "Check if collection exists in vector database"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "save_collection_legacy_temp", visibility: "pub", parameters: "store: &VectorStore,collection_name: &str", return_type: "Result<()>", purpose: "Save collection to temporary binary format"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "save_complete_metadata", visibility: "pub", parameters: "collection_name: &str,metadata: &CollectionMetadata,persisted: &PersistedCollection", return_type: "Result<()>", purpose: "Save collection metadata to JSON file"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "save_checksums", visibility: "pub", parameters: "collection_name: &str,persisted: &PersistedCollection", return_type: "Result<()>", purpose: "Generate and save file checksums for collection"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Struct {name: "VectorStoreManager", fields: "data_dir: std::path::PathBuf,collection_name,dimension,vector_count,distance_metric,created_at,updated_at,indexed_files,file_count", purpose: "Main struct for managing vector store operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Struct {name: "MetadataJson", fields: "collection_name,dimension,vector_count,distance_metric,created_at,updated_at,indexed_files,file_count", purpose: "JSON serialization structure for metadata"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "tracing", type: "crate", usage: "logging (info, warn macros)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde_json", type: "crate", usage: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "sha2", type: "crate", usage: "SHA256 checksum generation"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::fs", type: "standard_library", usage: "file system operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::io", type: "standard_library", usage: "buffered I/O operations"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "data_dir", type: "PathBuf", default_value: "./data", purpose: "Base directory for vector store data"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "VectorStore", type: "trait", methods: "get_collection,new,get_collection,from,into_runtime", purpose: "Interface for vector store operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "StorageReader", type: "struct", methods: "new,get_collection", purpose: "Reader interface for storage operations"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "PersistedCollection", type: "struct", fields: "name,config,vectors,hnsw_dump_basename", purpose: "Persistent collection data structure"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "PersistedVector", type: "struct", methods: "from,into_runtime", purpose: "Persistent vector data structure"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Database {name: "vectorizer.vecdb", type: "vector_database", purpose: "Main vector database file"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Database {name: "collection_vector_store.bin", type: "binary_storage", purpose: "Temporary binary storage for collections"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Database {name: "collection_metadata.json", type: "json_metadata", purpose: "Collection metadata storage"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Database {name: "collection_checksums.json", type: "json_checksums", purpose: "File checksum storage"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "Vector Store Collection Management Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_loader/mod.rs
CREATE (doc:Document {
      id: "FileLoader Rust Module",
      title: "FileLoader Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "FileLoader", language: "Rust", description: "Unified file loading and indexing infrastructure"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "FileLoader", visibility: "pub", description: "Main struct for file loading and indexing operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "with_embedding_manager", visibility: "pub", description: "Constructor with shared embedding manager", parameters: "config: LoaderConfig,embedding_manager: EmbeddingManager,project_path: &str,store: &VectorStore,project_path: &str,dir: &Path,project_root: &Path,documents: &mut Vec<(PathBuf, String)>,file_path: &Path,project_root: &Path"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "load_and_index_project", visibility: "pub", description: "Main entry point for loading and indexing project files", parameters: "project_path: &str,store: &VectorStore", return_type: "async"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "collect_documents_sync", visibility: "pub", description: "Synchronously collect documents from filesystem", parameters: "project_path: &str", return_type: "Result<Vec<(PathBuf, String)>>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "collect_documents_recursive", visibility: "pub", description: "Recursively collect documents from directory structure", parameters: "dir: &Path,project_root: &Path,documents: &mut Vec<(PathBuf, String)>", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "matches_patterns", visibility: "pub", description: "Check if file matches include/exclude patterns", parameters: "file_path: &Path,project_root: &Path", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::path", type: "standard_library", imports: "Path,PathBuf,Context,Result,Chunker,DocumentChunk,LoaderConfig,Pattern,info,warn"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "anyhow", type: "external_crate", imports: "Context,Result"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "chunker", type: "internal_module", imports: "Chunker"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "config", type: "internal_module", imports: "DocumentChunk,LoaderConfig"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "glob", type: "external_crate", imports: "Pattern"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tracing", type: "external_crate", imports: "info,warn"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "LoaderConfig", type: "struct", description: "Configuration for file loading operations"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "DocumentChunk", type: "struct", description: "Configuration for document chunking"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Database {name: "VectorStore", type: "vector_database", description: "Vector storage for embeddings"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Database {name: ".vecdb", type: "file_database", description: "Local vector database file"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "EmbeddingManager", type: "interface", description: "Manages embedding operations"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "Indexer", type: "interface", description: "Handles indexing operations"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "Persistence", type: "interface", description: "Handles data persistence operations"})
CREATE (doc)-[:MENTIONS]->(e19)

MATCH (doc:Document {title: "FileLoader Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_loader/indexer.rs
CREATE (doc:Document {
      id: "Document Indexer Implementation",
      title: "Document Indexer Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "indexing", language: "Rust", purpose: "Document indexing and vectorization"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "with_embedding_manager", visibility: "pub", purpose: "Create indexer with shared embedding manager"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "build_vocabulary", visibility: "pub", purpose: "Build vocabulary from documents using embedding manager"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "create_collection", visibility: "pub", purpose: "Create vector collection with configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "store_chunks_parallel", visibility: "pub", purpose: "Store document chunks as vectors in parallel"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "DocumentIndexer", purpose: "Main indexer struct for document processing"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std::path::PathBuf", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "anyhow", type: "External Crate", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "rayon", type: "External Crate", purpose: "Parallel processing"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "tracing", type: "External Crate", purpose: "Logging"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "LoaderConfig", purpose: "Configuration for document loading"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "CollectionConfig", purpose: "Vector collection configuration"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "HnswConfig", purpose: "HNSW algorithm configuration"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "QuantizationConfig", purpose: "Vector quantization settings"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "VectorStore", purpose: "Vector storage interface"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "EmbeddingManager", purpose: "Embedding generation and management"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Database {name: "Vector Database", type: "In-memory vector store", purpose: "Store and query document vectors"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Document Indexer Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_loader/config.rs
CREATE (doc:Document {
      id: "Rust Vectorizer Configuration Module",
      title: "Rust Vectorizer Configuration Module",
      domain: "software",
      doc_type: "source_code"
    })
CREATE (e0:Module {name: "config", language: "rust", purpose: "Configuration management for document vectorizer"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "LoaderConfig", visibility: "public", traits: "Debug,Clone,Debug,Clone,Serialize,Deserialize", purpose: "Configuration structure for document loading and processing"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "DocumentChunk", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", purpose: "Represents a chunk of processed document"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "ensure_hardcoded_excludes", visibility: "public", purpose: "Merges user exclude patterns with hardcoded patterns"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "get_hardcoded_excludes", visibility: "public", purpose: "Returns list of hardcoded file patterns to exclude"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "default", visibility: "public", purpose: "Creates default configuration instance"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Key-value storage for metadata"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "max_chunk_size", type: "usize", default_value: "2048", purpose: "Maximum chunk size in characters"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "chunk_overlap", type: "usize", default_value: "256", purpose: "Overlap between chunks in characters"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "embedding_dimension", type: "usize", default_value: "512", purpose: "Embedding vector dimension"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "embedding_type", type: "String", default_value: "bm25", purpose: "Type of embedding algorithm to use"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_loader_config_default", purpose: "Tests default configuration values"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_get_hardcoded_excludes", purpose: "Tests hardcoded exclude patterns"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Rust Vectorizer Configuration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_loader/chunker.rs
CREATE (doc:Document {
      id: "Document Chunker Implementation",
      title: "Document Chunker Implementation",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "utilities", language: "rust", description: "Document chunking utilities module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Chunker", visibility: "public", description: "Main chunker struct for splitting documents into chunks"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Constructor for Chunker struct"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "chunk_documents", visibility: "public", description: "Split multiple documents into chunks"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "chunk_text", visibility: "private", description: "Split a single text document into chunks with overlap"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "LoaderConfig", description: "Configuration struct for document loading and chunking parameters"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "DocumentChunk", description: "Structure representing a single document chunk with metadata"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Test {name: "test_chunker_creation", description: "Test chunker creation with valid config"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Test {name: "test_chunk_short_text", description: "Test chunking short text content"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Test {name: "test_chunk_long_text_with_overlap", description: "Test chunking long text with overlap functionality"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_chunk_documents_empty", description: "Test chunking empty document collection"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_chunk_documents_multiple", description: "Test chunking multiple documents"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_chunk_metadata", description: "Test chunk metadata generation"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Document Chunker Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_operations/types.rs
CREATE (doc:Document {
      id: "Rust Vectorizer Data Structures",
      title: "Rust Vectorizer Data Structures",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "chrono", purpose: "DateTime and timezone handling"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "serde", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "FileContent", purpose: "Complete file content with metadata", fields: "file_path,content,metadata,chunks_available,collection,from_cache,file_type,size_kb,chunk_count,last_indexed,language,path,content,chunks,summary,metadata,cached_at,file_path,extractive_summary,structural_summary,metadata,generated_at,outline,key_sections,key_points,chunk_count,file_type,summary_method,collection,files,total_files,total_chunks,path,file_type,chunk_count,size_estimate_kb,last_indexed,has_summary,filter_by_type,min_chunks,max_results,sort_by,file_path,total_chunks,chunks,has_more,next_start,index,content,line_range,context_hint,prev_chunk_preview,next_chunk_preview,collection,structure,key_files,statistics,name,node_type,children,file_info,chunks,size_kb,summary,path,reason,chunk_count,total_files,total_directories,file_types"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "FileMetadata", purpose: "File metadata information", fields: "file_type,size_kb,chunk_count,last_indexed,language"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CachedFile", purpose: "Cached file representation", fields: "path,content,chunks,summary,metadata,cached_at"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "is_fresh", purpose: "Check if cached file is still fresh", parameters: "max_age,collection,name"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "to_content", purpose: "Convert CachedFile to FileContent", parameters: "collection"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "FileSummary", purpose: "File summary with extractive and structural information", fields: "file_path,extractive_summary,structural_summary,metadata,generated_at"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "StructuralSummary", purpose: "Structural analysis of file content", fields: "outline,key_sections,key_points"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "FileSummaryMetadata", purpose: "Metadata for file summaries", fields: "chunk_count,file_type,summary_method"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "SummaryType", purpose: "Enumeration of summary types", variants: "Extractive,Structural,Both,Name,Directory,File"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "FileList", purpose: "Collection of file information", fields: "collection,files,total_files,total_chunks"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "FileInfo", purpose: "Individual file information", fields: "path,file_type,chunk_count,size_estimate_kb,last_indexed,has_summary"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "FileListFilter", purpose: "Filtering options for file lists", fields: "filter_by_type,min_chunks,max_results,sort_by"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "default_sort_by", purpose: "Default sorting method", returns: "SortBy"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "SortBy", purpose: "Sorting options for file lists", variants: "Name"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Class {name: "OrderedChunks", purpose: "Ordered collection of file chunks", fields: "file_path,total_chunks,chunks,has_more,next_start"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Class {name: "OrderedChunk", purpose: "Individual chunk with ordering information", fields: "index,content,line_range,context_hint"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Class {name: "ContextHint", purpose: "Context information for chunks", fields: "prev_chunk_preview,next_chunk_preview"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Class {name: "ProjectOutline", purpose: "Project structure outline", fields: "collection,structure,key_files,statistics"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Class {name: "DirectoryNode", purpose: "Directory or file node in project structure", fields: "name,node_type,children,file_info"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "new", purpose: "Create new DirectoryNode", parameters: "name"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Class {name: "NodeType", purpose: "Type of node in directory structure", variants: "Directory,File"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Class {name: "FileNodeInfo", purpose: "File-specific information in directory structure", fields: "chunks,size_kb,summary"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Class {name: "KeyFileInfo", purpose: "Information about key files in project", fields: "path,reason,chunk_count"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Class {name: "ProjectStatistics", purpose: "Statistical information about project", fields: "total_files,total_directories,file_types"})
CREATE (doc)-[:MENTIONS]->(e25)

MATCH (doc:Document {title: "Rust Vectorizer Data Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_operations/operations.rs
CREATE (doc:Document {
      id: "File Operations Module - Rust Vector Store Integration",
      title: "File Operations Module - Rust Vector Store Integration",
      domain: "software",
      doc_type: "code_module"
    })
CREATE (e0:Module {name: "FileOperations", language: "Rust", purpose: "File content retrieval and management with vector store integration"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "FileOperations", visibility: "public", fields: "cache: FileLevelCache,store: Option<Arc<VectorStore>>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Self", purpose: "Create new FileOperations instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "with_store", visibility: "private", parameters: "store: Arc<VectorStore>,collection: &str,file_path: &str,max_size_kb: usize,collection: &str,filter: FileListFilter", return_type: "Self", purpose: "Create FileOperations with vector store"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "get_file_content", visibility: "public", parameters: "collection: &str,file_path: &str,max_size_kb: usize", return_type: "FileOperationResult<FileContent>", purpose: "Retrieve file content from vector store with caching"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "list_files_in_collection", visibility: "public", parameters: "collection: &str,filter: FileListFilter", return_type: "FileOperationResult<FileList>", purpose: "List files in a collection with filtering"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "MAX_FILE_SIZE_KB", value: "1000", description: "Maximum file size in KB (1MB)"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "ABSOLUTE_MAX_SIZE_KB", value: "5000", description: "Absolute maximum file size in KB (5MB)"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "FILE_CACHE_TTL", value: "Duration::from_secs(600)", description: "File cache time-to-live (10 minutes)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "SUMMARY_CACHE_TTL", value: "Duration::from_secs(1800)", description: "Summary cache time-to-live (30 minutes)"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "FILE_LIST_CACHE_TTL", value: "Duration::from_secs(300)", description: "File list cache time-to-live (5 minutes)"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::path::Path", type: "standard_library", purpose: "Path manipulation"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "futures_util::future::TryFutureExt", type: "external_crate", purpose: "Future utilities"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "serde_json::json", type: "external_crate", purpose: "JSON serialization"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "tokio::sync::RwLock", type: "external_crate", purpose: "Async read-write lock"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tracing", type: "external_crate", purpose: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "super::cache::FileLevelCache", type: "internal_module", purpose: "File-level caching"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "super::errors", type: "internal_module", purpose: "Error handling types"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "super::types", type: "internal_module", purpose: "Type definitions"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::VectorStore", type: "internal_module", purpose: "Vector store interface"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "File Operations Module - Rust Vector Store Integration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_operations/mod.rs
CREATE (doc:Document {
      id: "File-level operations module for MCP",
      title: "File-level operations module for MCP",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "file_operations", description: "File-level operations module for MCP", purpose: "Provides file-centric abstractions over chunk-based vector storage"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Dependency {name: "errors", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Dependency {name: "mcp_integration", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Dependency {name: "operations", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "FileMcpHandlers", module: "mcp_integration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "FileOperations", module: "operations"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "types", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Test {name: "tests", condition: "cfg(test)"})
CREATE (doc)-[:MENTIONS]->(e7)

MATCH (doc:Document {title: "File-level operations module for MCP"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_operations/mcp_integration.rs
CREATE (doc:Document {
      id: "MCP File Operations Handler",
      title: "MCP File Operations Handler",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "FileMcpHandlers", language: "rust", purpose: "MCP server handlers for file operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "FileMcpHandlers", fields: "file_ops: FileOperations", visibility: "pub"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "pub", parameters: "file_ops: FileOperations,&self,params: Value", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "register_tools", visibility: "pub", return_type: "Vec<Value>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "handle_get_file_content", visibility: "pub", parameters: "&self,params: Value", return_type: "Result<Value, String>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "serde_json", crate: "serde_json", types: "Value,json,FileContent,FileList,FileListFilter,FileOperations,FileSummary,SummaryType"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "file_operations", crate: "crate::file_operations", types: "FileContent,FileList,FileListFilter,FileOperations,FileSummary,SummaryType"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:API {name: "get_file_content", description: "Retrieve complete file content from a collection", parameters: "collection,file_path,max_size_kb,collection,filter_by_type,min_chunks,max_results,sort_by,collection,file_path,summary_type,max_sentences", method: "MCP tool"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:API {name: "list_files_in_collection", description: "List all indexed files in a collection with metadata", parameters: "collection,filter_by_type,min_chunks,max_results,sort_by", method: "MCP tool"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "get_file_summary", description: "Get extractive or structural summary of an indexed file", parameters: "collection,file_path,summary_type,max_sentences", method: "MCP tool"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "MCP File Operations Handler"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_operations/errors.rs
CREATE (doc:Document {
      id: "FileOperationError Rust Error Definition",
      title: "FileOperationError Rust Error Definition",
      domain: "software",
      doc_type: "code_snippet"
    })
CREATE (e0:Class {name: "FileOperationError", language: "Rust", visibility: "public", derives: "Error,Debug", error_types: "FileNotFound,FileTooLarge,InvalidPath,InvalidParameter,CollectionNotFound"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "FileNotFound", parameters: "file_path: String,collection: String,size_kb: usize,max_size_kb: usize,path: String,reason: String,param: String,reason: String,collection: String", error_message: "File found in collection: {file_path} {collection}"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "FileTooLarge", parameters: "size_kb: usize,max_size_kb: usize", error_message: "File too large: {size_kb}KB exceeds {max_size_kb}KB"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "InvalidPath", parameters: "path: String,reason: String", error_message: "Invalid file path: {path} {reason}"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "InvalidParameter", parameters: "param: String,reason: String", error_message: "Invalid parameter '{param}': {reason}"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "CollectionNotFound", parameters: "collection: String", error_message: "Collection found: {collection}"})
CREATE (doc)-[:MENTIONS]->(e5)

MATCH (doc:Document {title: "FileOperationError Rust Error Definition"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/file_operations/cache.rs
CREATE (doc:Document {
      id: "FileLevelCache Implementation",
      title: "FileLevelCache Implementation",
      domain: "software",
      doc_type: "Rust source code"
    })
CREATE (e0:Module {name: "file_level_cache", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "FileLevelCache", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CachedSummary", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CachedFileList", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CacheStats", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", visibility: "public", return_type: "Self", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "get_file_content", visibility: "public", return_type: "Option<CachedFile>", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "put_file_content", visibility: "public", return_type: "void", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_summary", visibility: "public", return_type: "Option<FileSummary>", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "put_summary", visibility: "public", return_type: "void", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_file_list", visibility: "public", return_type: "Option<(Vec<super::types::FileInfo>, usize)>", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "put_file_list", visibility: "public", return_type: "void", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "clear_all", visibility: "public", return_type: "void", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "clear_collection", visibility: "public", return_type: "void", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "stats", visibility: "public", return_type: "CacheStats", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::num::NonZeroUsize", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "lru::LruCache", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tokio::sync::RwLock", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "super::types::{CachedFile, FileSummary}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "file_content_cache_size", value: "100", type: "capacity_limit"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "summary_cache_size", value: "500", type: "capacity_limit"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Configuration {name: "file_list_cache_size", value: "50", type: "capacity_limit"})
CREATE (doc)-[:MENTIONS]->(e24)

MATCH (doc:Document {title: "FileLevelCache Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/evaluation/mod.rs
CREATE (doc:Document {
      id: "Rust Search Quality Evaluation Module",
      title: "Rust Search Quality Evaluation Module",
      domain: "software",
      doc_type: "source_code"
    })
CREATE (e0:Module {name: "evaluation", language: "rust", purpose: "Search quality evaluation and metrics calculation"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "QueryResult", visibility: "pub", traits: "Debug,Clone,Serialize,Deserialize,Debug,Debug", fields: "doc_id: String,relevance: f32,precision_at_k: Vec<f32>,recall_at_k: Vec<f32>,average_precision: f32,reciprocal_rank: f32,mean_average_precision: f32,mean_reciprocal_rank: f32,precision_at_k: Vec<f32>,recall_at_k: Vec<f32>,num_queries: usize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Struct {name: "QueryMetrics", visibility: "pub", traits: "Debug", fields: "precision_at_k: Vec<f32>,recall_at_k: Vec<f32>,average_precision: f32,reciprocal_rank: f32"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Struct {name: "EvaluationMetrics", visibility: "pub", traits: "Debug", fields: "mean_average_precision: f32,mean_reciprocal_rank: f32,precision_at_k: Vec<f32>,recall_at_k: Vec<f32>,num_queries: usize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "evaluate_query_results", visibility: "pub", parameters: "results: &[QueryResult],ground_truth: &HashSet<String>,query_results: Vec<(Vec<QueryResult>, HashSet<String>)>,reciprocal_ranks: &[f32],average_precisions: &[f32],results: &[QueryResult],ground_truth: &HashSet<String>,k: usize,results: &[QueryResult],ground_truth: &HashSet<String>,k: usize", return_type: "QueryMetrics"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "evaluate_search_quality", visibility: "pub", parameters: "query_results: Vec<(Vec<QueryResult>, HashSet<String>)>", return_type: "EvaluationMetrics"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "mean_reciprocal_rank", visibility: "pub", parameters: "reciprocal_ranks: &[f32]", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "mean_average_precision", visibility: "pub", parameters: "average_precisions: &[f32]", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "precision_at_k", visibility: "pub", parameters: "results: &[QueryResult],ground_truth: &HashSet<String>,k: usize", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "recall_at_k", visibility: "pub", parameters: "results: &[QueryResult],ground_truth: &HashSet<String>,k: usize", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_precision_at_k", module: "tests", purpose: "Test precision calculation functionality"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashSet", type: "standard_library", purpose: "Hash set for ground truth storage"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde", type: "external_crate", features: "Serialize,Deserialize", purpose: "Serialization support for QueryResult"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Rust Search Quality Evaluation Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/real_models.rs
CREATE (doc:Document {
      id: "Rust Vectorizer Framework - Real Model Embedder",
      title: "Rust Vectorizer Framework - Real Model Embedder",
      domain: "software",
      doc_type: "code_analysis"
    })
CREATE (e0:Module {name: "framework", description: "Vectorizer framework providing embedding models"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "RealModelType", description: "Enum defining available embedding model types", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "RealModelEmbedder", description: "Main embedder class for real transformer models", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "model_id", description: "Returns HuggingFace model ID for given model type", return_type: "&str"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "dimension", description: "Returns embedding dimension for model type", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "needs_prefix", description: "Checks if model needs prefix (E5 models)", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", description: "Creates new real model embedder with default cache", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new_with_cache", description: "Creates new real model embedder with custom cache directory", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "encode", description: "Encodes text inputs to embeddings", return_type: "Result<Vec<Vec<f32>>>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "candle_core", type: "external", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "candle_nn", type: "external", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "candle_transformers", type: "external", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "hf_hub", type: "external", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde_json", type: "external", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tokenizers", type: "external", feature: "candle-models"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "BertConfig", description: "BERT model configuration"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "HuggingFace API", description: "API for downloading models and tokenizers"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Rust Vectorizer Framework - Real Model Embedder"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/openai.rs
CREATE (doc:Document {
      id: "OpenAI Embedding Provider Implementation",
      title: "OpenAI Embedding Provider Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "openai", language: "Rust", description: "OpenAI API integration for embeddings"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "OpenAIConfig", visibility: "public", description: "Configuration for OpenAI API client"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "OpenAIProvider", visibility: "public", description: "Main provider struct for OpenAI embeddings"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "OpenAIClient", visibility: "private", description: "Internal client for OpenAI API communication"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "OpenAIResponse", visibility: "public", description: "Response structure from OpenAI API"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "Usage", visibility: "public", description: "Token usage information"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", visibility: "public", description: "Create new OpenAI provider instance"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "initialize", visibility: "public", description: "Initialize the OpenAI client"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "generate_embedding", visibility: "public", description: "Generate single text embedding"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "generate_embeddings_batch", visibility: "public", description: "Generate multiple text embeddings"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "create_embeddings", visibility: "private", description: "Internal method to call OpenAI API"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "available_models", visibility: "public", description: "Get list of available OpenAI models"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde", version: "latest", description: "Serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tokio", version: "latest", description: "Async runtime"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "fastrand", version: "latest", description: "Random number generation"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "OpenAI Embeddings API", base_url: "https://api.openai.com/v1", description: "OpenAI's embedding generation service"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "OpenAI Configuration", description: "API key, model, organization, and other settings"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "OpenAI Embedding Provider Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/onnx_models.rs
CREATE (doc:Document {
      id: "ONNX Compat Layer for Vectorizer",
      title: "ONNX Compat Layer for Vectorizer",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "onnx_compat", description: "ONNX compatibility layer for vectorizer with deterministic fallback", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "OnnxModelType", description: "Enum defining supported ONNX model types", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "OnnxConfig", description: "Configuration struct for ONNX embedder", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "PoolingStrategy", description: "Enum defining pooling strategies for embeddings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "OnnxEmbedder", description: "Main ONNX embedder struct with caching", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", description: "Create a new ONNX embedder instance", visibility: "public", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "embed", description: "Embed single text string", visibility: "public", return_type: "Result<Vec<f32>>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "embed_batch", description: "Embed multiple text strings efficiently", visibility: "public", return_type: "Result<Vec<Vec<f32>>>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "embed_parallel", description: "Parallel embedding for multiple texts", visibility: "public", return_type: "Result<Vec<Vec<f32>>>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "model_id", description: "Get model identifier string", visibility: "public", return_type: "&'static str"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "dimension", description: "Get embedding dimension for model type", visibility: "public", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "needs_prefix", description: "Check if model needs query prefix", visibility: "public", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "max_sequence_length", description: "Get maximum sequence length for model", visibility: "public", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map for caching"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::path::PathBuf", type: "standard_library", purpose: "Path handling"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::sync::Arc", type: "standard_library", purpose: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "anyhow::Result", type: "external_crate", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "ndarray::Array1", type: "external_crate", purpose: "N-dimensional arrays"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "parking_lot::RwLock", type: "external_crate", purpose: "Read-write lock"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tracing::info", type: "external_crate", purpose: "Logging"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "xxhash_rust::xxh3::xxh3_64", type: "external_crate", purpose: "Fast hashing for cache keys"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module", purpose: "Custom error types"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "OnnxConfig", description: "Configuration for ONNX embedder", fields: "model_type,batch_size,num_threads,use_int8,cache_dir,max_length,pooling"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:API {name: "OnnxEmbedder API", description: "Public API for text embedding", methods: "new,embed,embed_batch,embed_parallel"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "ONNX Compat Layer for Vectorizer"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/mod.rs
CREATE (doc:Document {
      id: "Embedding Provider Module",
      title: "Embedding Provider Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "embedding_provider", language: "rust", description: "Module for generating embeddings using various providers (BM25, BERT, OpenAI)"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Trait {name: "EmbeddingProvider", async: "true", methods: "embed,embed_batch,dimension,name,is_available"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Struct {name: "EmbeddingConfig", derive: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", fields: "provider,model,dimension,max_length,enable_caching,cache_size,batch_size,timeout_seconds,embedding,provider,model,processing_time_ms,text_length,cache_hit,cache,max_size,hits,misses,hits,misses,total,hit_rate,size,max_size"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Enum {name: "EmbeddingProviderType", variants: "BM25,BERT,OpenAI,SentenceTransformers,Custom", derive: "Debug,Clone,Serialize,Deserialize,PartialEq,Eq,Hash"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Error {name: "EmbeddingError", derive: "Debug,thiserror::Error", variants: "TextTooLong,ProviderNotAvailable,ModelNotFound,ApiError,NetworkError,TimeoutError,InvalidConfiguration,CacheError,Internal"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Struct {name: "EmbeddingResult", derive: "Debug,Clone,Serialize,Deserialize", fields: "embedding,provider,model,processing_time_ms,text_length,cache_hit"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Struct {name: "EmbeddingCache", fields: "cache,max_size,hits,misses", methods: "new,get,put,stats,clear"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Struct {name: "CacheStats", fields: "hits,misses,total,hit_rate,size,max_size"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:TypeAlias {name: "TfIdfEmbedding", target: "BM25Provider"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:TypeAlias {name: "SvdEmbedding", target: "BM25Provider"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:TypeAlias {name: "MiniLmEmbedding", target: "BERTProvider"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:TypeAlias {name: "BagOfWordsEmbedding", target: "BM25Provider"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:TypeAlias {name: "CharNGramEmbedding", target: "BM25Provider"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Embedding Provider Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/fast_tokenizer.rs
CREATE (doc:Document {
      id: "FastTokenizer Rust Implementation",
      title: "FastTokenizer Rust Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "fast_tokenizer", description: "Ultra-fast tokenizer implementation with HuggingFace integration", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "FastTokenizerConfig", description: "Configuration struct for FastTokenizer", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "FastTokenizer", description: "Main tokenizer implementation with caching", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "TokenizerCache", description: "Global tokenizer cache implementation", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "from_pretrained", description: "Create a new fast tokenizer from a model path", visibility: "public", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "encode", description: "Tokenize a single text string", visibility: "public", return_type: "Result<Vec<u32>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "encode_batch", description: "Tokenize multiple texts in batch", visibility: "public", return_type: "Result<Vec<Vec<u32>>>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "encode_chunked", description: "Tokenize long documents with chunking", visibility: "public", return_type: "Result<Vec<Vec<u32>>>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "vocab_size", description: "Get vocabulary size", visibility: "public", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "clear_cache", description: "Clear token cache", visibility: "public", return_type: "()"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_or_load", description: "Get or load tokenizer from cache", visibility: "public", return_type: "Result<Arc<Tokenizer>>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "FastTokenizerConfig", properties: "max_length: usize,padding: bool,truncation: bool,stride: usize,cache_dir: PathBuf,batch_size: usize,num_threads: usize"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std", type: "standard_library", modules: "collections::HashMap,path::PathBuf,sync::Arc"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "arc_swap", type: "external_crate", usage: "ArcSwap for atomic reference swapping"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "once_cell", type: "external_crate", usage: "OnceCell for lazy static initialization"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "parking_lot", type: "external_crate", usage: "RwLock for read-write locking"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "tokenizers", type: "external_crate", usage: "HuggingFace tokenizers integration"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "xxhash_rust", type: "external_crate", usage: "xxh3_64 for fast hashing"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "anyhow", type: "external_crate", usage: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "num_cpus", type: "external_crate", usage: "Get number of CPU cores"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Global {name: "TOKENIZER_CACHE", type: "OnceCell<Arc<TokenizerCache>>", description: "Global tokenizer cache instance"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "FastTokenizer Rust Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/config.rs
CREATE (doc:Document {
      id: "Embedding Configuration Builder and Presets",
      title: "Embedding Configuration Builder and Presets",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "providers", language: "Rust", description: "Embedding configuration and provider management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "EmbeddingConfigBuilder", visibility: "public", description: "Builder pattern for creating embedding configurations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "EmbeddingPresets", visibility: "public", description: "Predefined embedding configuration presets"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "EmbeddingConfigValidator", visibility: "public", description: "Validates embedding configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", class: "EmbeddingConfigBuilder", visibility: "public", description: "Create a new configuration builder"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "provider", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the embedding provider type"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "model", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the model name"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "dimension", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the embedding dimension"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "max_length", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the maximum input length"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "enable_caching", class: "EmbeddingConfigBuilder", visibility: "public", description: "Enable or disable caching"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "cache_size", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the cache size"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "batch_size", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the batch processing size"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "timeout_seconds", class: "EmbeddingConfigBuilder", visibility: "public", description: "Set the timeout in seconds"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "build", class: "EmbeddingConfigBuilder", visibility: "public", description: "Build the final configuration"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "fast", class: "EmbeddingPresets", visibility: "public", description: "Fast embeddings preset (speed over quality)"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "high_quality", class: "EmbeddingPresets", visibility: "public", description: "High-quality embeddings preset"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "balanced", class: "EmbeddingPresets", visibility: "public", description: "Balanced embeddings preset"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "memory_efficient", class: "EmbeddingPresets", visibility: "public", description: "Memory-efficient embeddings preset"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "real_time", class: "EmbeddingPresets", visibility: "public", description: "Real-time embeddings preset"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "validate", class: "EmbeddingConfigValidator", visibility: "public", description: "Validate an embedding configuration"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "optimize_for_performance", class: "EmbeddingConfigValidator", visibility: "public", description: "Optimize configuration for performance"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "EmbeddingConfig", description: "Configuration structure for embedding providers"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "EmbeddingProviderType", description: "Enumeration of supported embedding provider types"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Standard library hash map collection"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "crate::embedding", type: "internal_module", description: "Internal embedding module"})
CREATE (doc)-[:MENTIONS]->(e25)

MATCH (doc:Document {title: "Embedding Configuration Builder and Presets"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/cache.rs
CREATE (doc:Document {
      id: "EmbeddingCache Rust Module",
      title: "EmbeddingCache Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "persistence", description: "High-performance embedding cache with memory-mapped file support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheEntry", description: "Represents a single cache entry with content hash, file path, and embedding metadata"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CacheConfig", description: "Configuration for the embedding cache including directory, size limits, and sharding"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "EmbeddingCache", description: "Main cache implementation with sharded storage and parallel access"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CacheShard", description: "Individual shard for parallel cache access"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CacheMetadata", description: "Global cache metadata tracking version, size, and timestamps"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", description: "Creates a new embedding cache instance"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get", description: "Retrieves embedding for given content"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "put", description: "Stores embedding for given content"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_batch", description: "Retrieves multiple embeddings in parallel"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "put_batch", description: "Stores multiple embeddings in parallel"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "contains", description: "Checks if content exists in cache"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "build_from_directory", description: "Builds cache from directory of files using embedding function"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::collections::HashMap", description: "Standard hash map for key-value storage"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::fs", description: "File system operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "memmap2", description: "Memory-mapped file support"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "parking_lot::RwLock", description: "Reader-writer lock for concurrent access"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "rayon", description: "Parallel processing support"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "xxhash_rust", description: "Fast hashing for content identification"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "arrow", description: "Columnar data format support (optional feature)"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "parquet", description: "Parquet file format support (optional feature)"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "CacheConfig", description: "Cache configuration with directory, size limits, and sharding options"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "EmbeddingCache Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/bm25.rs
CREATE (doc:Document {
      id: "BM25 Embedding Provider Implementation",
      title: "BM25 Embedding Provider Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "BM25", description: "BM25 (Best Matching 25) probabilistic estimate implementation", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BM25Config", description: "Configuration structure for BM25 parameters", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "BM25Provider", description: "Main BM25 embedding provider implementation", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new BM25 provider", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "add_documents", description: "Training method to add documents to the BM25 model", visibility: "public", return_type: "Result<(), EmbeddingError>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "tokenize", description: "Tokenize text into terms", visibility: "private", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "calculate_bm25_score", description: "Calculate BM25 score for a term in a document", visibility: "private", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "generate_embedding", description: "Generate BM25 embedding for input text", visibility: "public", return_type: "Result<Vec<f32>, EmbeddingError>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "embed", description: "EmbeddingProvider trait implementation for single text", visibility: "public", return_type: "Result<Vec<f32>, EmbeddingError>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "embed_batch", description: "EmbeddingProvider trait implementation for batch processing", visibility: "public", return_type: "Result<Vec<Vec<f32>>, EmbeddingError>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "k1", description: "k1 parameter (controls term frequency normalization)", type: "f32", default_value: "1.2"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "b", description: "b parameter (controls length normalization)", type: "f32", default_value: "0.75"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "min_term_freq", description: "Minimum term frequency", type: "usize", default_value: "1"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "max_vocab_size", description: "Maximum vocabulary size", type: "usize", default_value: "100000"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "enable_idf", description: "Enable IDF weighting", type: "bool", default_value: "true"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "idf_smoothing", description: "Smoothing parameter for IDF", type: "f32", default_value: "1.0"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::collections::HashMap", description: "Standard library HashMap for vocabulary and frequency storage"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::sync::Arc", description: "Atomically Reference Counted smart pointer for shared ownership"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde::{Deserialize, Serialize}", description: "Serialization framework for configuration"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tokio::sync::RwLock", description: "Async read-write lock for concurrent access"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::embedding::{EmbeddingError, EmbeddingProvider, EmbeddingProviderType}", description: "Local embedding module types and traits"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:API {name: "EmbeddingProvider", description: "Trait interface for embedding providers", methods: "embed,embed_batch,dimension,name"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "BM25 Embedding Provider Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/embedding/bert.rs
CREATE (doc:Document {
      id: "BERT Embedding Provider Implementation",
      title: "BERT Embedding Provider Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "bert", description: "BERT (Bidirectional Encoder Representations from Transformers) transformer-based machine learning module", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BERTConfig", description: "Configuration structure for BERT provider", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "BERTProvider", description: "Main BERT embedding provider implementation", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "BERTModelInfo", description: "Information about the BERT model", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", description: "Create a new BERT provider", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "initialize", description: "Initialize the BERT model", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "tokenize", description: "Tokenize text for BERT processing", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "generate_embedding", description: "Generate embedding from text", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "hash_string", description: "Hash function for token processing", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "model_info", description: "Get information about the BERT model", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", type: "crate", usage: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "tokio", type: "crate", usage: "Async runtime and synchronization"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "async_trait", type: "crate", usage: "Async trait implementation"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "EmbeddingProvider", description: "Trait interface for embedding providers"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "model_name", type: "String", default: "bert-base-uncased"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "max_length", type: "usize", default: "512"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "use_cls_token", type: "bool", default: "true"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "use_mean_pooling", type: "bool", default: "false"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "use_max_pooling", type: "bool", default: "false"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "normalize", type: "bool", default: "true"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "batch_size", type: "usize", default: "32"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "use_gpu", type: "bool", default: "false"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "BERT Embedding Provider Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/types.rs
CREATE (doc:Document {
      id: "Rust Vector Database Types and Structures",
      title: "Rust Vector Database Types and Structures",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "std::collections::HashMap", language: "Rust", purpose: "Core collections module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "chrono", language: "Rust", purpose: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "serde", language: "Rust", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CollectionRef", language: "Rust", purpose: "Reference to a vector collection", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize,Debug,Clone,PartialEq,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ScoredChunk", language: "Rust", purpose: "Scored document chunk with metadata", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ChunkMetadata", language: "Rust", purpose: "Metadata for document chunks", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "Bullet", language: "Rust", purpose: "Compressed bullet point with source information", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "BulletCategory", language: "Rust", purpose: "Category classification for bullets", traits: "Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "SectionType", language: "Rust", purpose: "Type classification for sections", traits: "Debug,Clone,PartialEq,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "Section", language: "Rust", purpose: "Document section with bullets and metadata", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "AnswerPlan", language: "Rust", purpose: "Complete answer structure with sections and sources", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Rust Vector Database Types and Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/score.rs
CREATE (doc:Document {
      id: "Collection Scoring System",
      title: "Collection Scoring System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "super::config::ScoringConfig", path: "super::config::ScoringConfig"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "super::types", path: "super::types"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "score_collections", parameters: "query_terms: &[&str],collections: &[CollectionRef],config: &ScoringConfig,collection: &CollectionRef,query_terms: &[&str],name: &str,terms: &[&str],name: &str,collection: &CollectionRef", return_type: "DiscoveryResult<Vec<(CollectionRef, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CollectionScorer", lifetime: "'a", fields: "config: &'a ScoringConfig"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "score", class: "CollectionScorer", parameters: "collection: &CollectionRef,query_terms: &[&str]", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "name_match_score", class: "CollectionScorer", parameters: "name: &str,terms: &[&str]", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "term_boost_score", class: "CollectionScorer", parameters: "name: &str", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "signal_boost_score", class: "CollectionScorer", parameters: "collection: &CollectionRef", return_type: "f32"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "ScoringConfig", fields: "name_match_weight,term_boost_weight,signal_boost_weight,recency_decay_days"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "CollectionRef", fields: "name,vector_count,updated_at,tags"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "Collection Scoring System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/render.rs
CREATE (doc:Document {
      id: "LLM Prompt Rendering Module",
      title: "LLM Prompt Rendering Module",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "render_llm_prompt", language: "rust", description: "LLM rendering module for formatting prompts"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "render_llm_prompt", return_type: "DiscoveryResult<String>", parameters: "plan: &AnswerPlan,config: &PromptRenderConfig,prompt: String,max_tokens: usize", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "truncate_to_token_limit", return_type: "String", parameters: "prompt: String,max_tokens: usize", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "create_test_plan", return_type: "AnswerPlan", visibility: "test"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "PromptRenderConfig", description: "Configuration for prompt rendering", properties: "max_prompt_tokens,include_sources"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "AnswerPlan", description: "Plan structure containing sections and sources", properties: "total_bullets,sources,sections,text,source_id,collection,file_path,score,category,title,bullets"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "Bullet", description: "Individual bullet point with metadata", properties: "text,source_id,collection,file_path,score,category"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "Section", description: "Section containing bullets", properties: "title,bullets"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Test {name: "test_module", description: "Test module for prompt rendering functionality"})
CREATE (doc)-[:MENTIONS]->(e8)

MATCH (doc:Document {title: "LLM Prompt Rendering Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/readme.rs
CREATE (doc:Document {
      id: "README Promotion Module",
      title: "README Promotion Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "readme_promotion", language: "rust", description: "Module for promoting README files in search results"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "promote_readme", return_type: "DiscoveryResult<Vec<ScoredChunk>>", parameters: "hits: &[ScoredChunk],config: &ReadmePromotionConfig,file_path: &str,config: &ReadmePromotionConfig", description: "Promotes README files in search results based on configuration"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "is_readme", return_type: "bool", parameters: "file_path: &str,config: &ReadmePromotionConfig", description: "Checks if a file path matches README patterns"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Configuration {name: "ReadmePromotionConfig", description: "Configuration for README promotion behavior", properties: "readme_boost,always_top,readme_patterns"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Type {name: "DiscoveryResult", description: "Result type for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Type {name: "ScoredChunk", description: "Chunk with associated score for search results"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Test {name: "test_module", description: "Test module for readme promotion functionality"})
CREATE (doc)-[:MENTIONS]->(e6)

MATCH (doc:Document {title: "README Promotion Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/plan.rs
CREATE (doc:Document {
      id: "Answer Plan Builder Module",
      title: "Answer Plan Builder Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "answer_plan_builder", language: "rust", description: "Module for building structured answer plans from categorized bullets"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "build_answer_plan", parameters: "bullets: &[Bullet],config: &AnswerPlanConfig,section_type: &SectionType", return_type: "DiscoveryResult<AnswerPlan>", description: "Main function that groups bullets by category and creates structured sections"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "section_title", parameters: "section_type: &SectionType", return_type: "String", description: "Generates display title for section types"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "AnswerPlan", description: "Structure containing sections, total bullets count, and sources"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "Section", description: "Individual section with title, type, bullets, and priority"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "Bullet", description: "Individual bullet point with category and score"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "AnswerPlanConfig", description: "Configuration for answer plan generation"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Enum {name: "SectionType", values: "Definition,Features,Architecture,Performance,Integrations,UseCases,Definition,Feature,Architecture,Performance,Integration,UseCase", description: "Enumeration of section types for answer plan structure"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Enum {name: "BulletCategory", values: "Definition,Feature,Architecture,Performance,Integration,UseCase", description: "Enumeration of bullet categories for grouping"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Type {name: "DiscoveryResult", description: "Generic result type for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e9)

MATCH (doc:Document {title: "Answer Plan Builder Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/pipeline.rs
CREATE (doc:Document {
      id: "Discovery System Implementation",
      title: "Discovery System Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "Discovery", language: "Rust", description: "Main discovery system for vector-based search and retrieval"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Discovery", visibility: "public", description: "Main discovery system struct"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create new discovery system instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "discover", visibility: "public", description: "Execute discovery process with query"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "config", visibility: "public", description: "Get discovery configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "VectorStore", type: "crate", description: "Vector storage backend"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "EmbeddingManager", type: "crate", description: "Embedding management system"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "DiscoveryConfig", description: "Configuration for discovery system"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "DiscoveryMetrics", description: "Metrics tracking for discovery process"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "DiscoveryResponse", description: "Response structure for discovery results"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "CollectionRef", description: "Reference to a collection in vector store"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_discovery_creation", type: "integration", framework: "tokio"})
CREATE (doc)-[:MENTIONS]->(e11)

MATCH (doc:Document {title: "Discovery System Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/mod.rs
CREATE (doc:Document {
      id: "Discovery intelligent context retrieval",
      title: "Discovery intelligent context retrieval",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "discovery", description: "intelligent context retrieval module", features: "Collection pre-filtering ranking,Query expansion semantic focus,Evidence compression citations,Answer plan generation LLM prompts"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "broad_discovery", module: "broad"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "compress_evidence", module: "compress"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "expand_queries_baseline", module: "expand"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "filter_collections", module: "filter"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "semantic_focus", module: "focus"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "HybridSearcher", module: "hybrid"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "reciprocal_rank_fusion", module: "hybrid"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "Discovery", module: "pipeline"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "build_answer_plan", module: "plan"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "promote_readme", module: "readme"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "render_llm_prompt", module: "render"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "score_collections", module: "score"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Module {name: "config", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Module {name: "types", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "tests", condition: "cfg(test)"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Discovery intelligent context retrieval"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/hybrid.rs
CREATE (doc:Document {
      id: "Hybrid HNSW BM25 Search Implementation",
      title: "Hybrid HNSW BM25 Search Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "hybrid_searcher", language: "Rust", description: "Hybrid search implementation combining HNSW vector search with BM25 sparse search"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "HybridSearcher", visibility: "pub", description: "Main struct for hybrid search operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "pub", description: "Constructor for HybridSearcher", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "search", visibility: "pub", description: "Main search function performing hybrid search", return_type: "DiscoveryResult<Vec<ScoredChunk>>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "perform_sparse_search", visibility: "private", description: "Performs BM25 sparse search", return_type: "DiscoveryResult<Vec<ScoredChunk>>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "reciprocal_rank_fusion", visibility: "private", description: "Combines dense and sparse search results using RRF algorithm", return_type: "Vec<(String, f32)>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "std::collections::HashMap", type: "Standard Library", description: "HashMap for score aggregation"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::sync::Arc", type: "Standard Library", description: "Atomic reference counting for VectorStore"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "super::types", type: "Local Module", description: "Local types module containing ChunkMetadata, DiscoveryError, DiscoveryResult, ScoredChunk"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "crate::db::VectorStore", type: "Local Module", description: "Vector database store for dense search operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "search", description: "Main search API with query, vector, limit, and alpha parameters", method: "async"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "alpha", type: "f32", description: "Weight parameter for combining dense and sparse results"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "k", type: "f32", description: "RRF constant (typically 60) for reciprocal rank fusion"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "Hybrid HNSW BM25 Search Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/focus.rs
CREATE (doc:Document {
      id: "Semantic Focus Search Implementation",
      title: "Semantic Focus Search Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "semantic_focus", language: "Rust", description: "Deep semantic search implementation with reranking capabilities"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "semantic_focus", return_type: "DiscoveryResult<Vec<ScoredChunk>>", description: "Main function applying semantic focus search with embedding and reranking"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "extract_metadata", return_type: "ChunkMetadata", description: "Extract metadata from document ID in format collection_name::file_path::chunk_index"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "rerank_semantically", return_type: "Vec<ScoredChunk>", description: "Rerank chunks using term frequency, sentence quality, and position scoring"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "sentence_quality_score", return_type: "f32", description: "Calculate sentence quality score based on length, capitalization, and content indicators"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "term_frequency_score", return_type: "f32", description: "Calculate term frequency score for query-content matching"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "SemanticFocusConfig", description: "Configuration for semantic focus search including similarity threshold and reranking settings"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:API {name: "VectorStore", description: "Vector store interface for semantic search operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:API {name: "EmbeddingManager", description: "Manager for text embedding operations"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::sync::Arc", type: "Standard Library", description: "Atomically Reference Counted smart pointer"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "futures_util::future::TryFutureExt", type: "External Crate", description: "Future utilities for error handling"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Semantic Focus Search Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/filter.rs
CREATE (doc:Document {
      id: "Collection Search and Filtering Module",
      title: "Collection Search and Filtering Module",
      domain: "software",
      doc_type: "rust_library_module"
    })
CREATE (e0:Module {name: "Collection", description: "Collection search and filtering functionality with BM25-based search capabilities"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "search_collections", description: "Search collections using BM25 scoring with built-in stopword removal and stemming", parameters: "query: &str,query: &str,include: &[&str],exclude: &[&str],all_collections: &[CollectionRef],query: &str,name: &str,patterns: &[&str],collections: &[CollectionRef],query_terms: &[String]", return_type: "Result<Vec<(String, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "filter_collections", description: "Pre-filter collections based on include/exclude patterns and query terms", parameters: "query: &str,include: &[&str],exclude: &[&str],all_collections: &[CollectionRef]", return_type: "DiscoveryResult<Vec<CollectionRef>>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "extract_terms", description: "Extract terms from query with stopword removal and unicode support", parameters: "query: &str", return_type: "Vec<String>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "matches_any_pattern", description: "Check if name matches any of the provided patterns", parameters: "name: &str,patterns: &[&str]", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "filter_by_query_terms", description: "Filter collections by query terms using case-insensitive matching", parameters: "collections: &[CollectionRef],query_terms: &[String]", return_type: "Vec<CollectionRef>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CollectionIndexer", description: "Indexer for collections with schema building capabilities"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "tantivy", description: "Search engine library for BM25 scoring and text indexing"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "chrono", description: "Date and time library used in tests"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Configuration {name: "stopwords", description: "Multilingual stopword list for query processing", languages: "portuguese,english"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "CollectionRef", description: "Reference type for collections"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "DiscoveryResult", description: "Result type for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:API {name: "DiscoveryError", description: "Error type for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_module", description: "Test module with chrono dependency"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Documentation {name: "RUST_LIBRARIES_INTEGRATION.md", description: "Future integration documentation for Rust libraries"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "Collection Search and Filtering Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/expand.rs
CREATE (doc:Document {
      id: "Query Expansion Module",
      title: "Query Expansion Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "query_expander", language: "rust", purpose: "Query expansion functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "expand_queries_baseline", visibility: "public", return_type: "DiscoveryResult<Vec<String>>", parameters: "query: &str,config: &ExpansionConfig,&self,query: &str,&self,query: &str"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QueryExpander", lifetime: "'a", fields: "config: &'a ExpansionConfig"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "expand", visibility: "public", return_type: "Vec<String>", parameters: "&self,query: &str"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "extract_main_term", visibility: "private", return_type: "String", parameters: "&self,query: &str"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "ExpansionConfig", fields: "include_definition,include_features,include_architecture,include_api,include_performance,include_use_cases,max_expansions"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Test {name: "test_expand_queries", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "super::config::ExpansionConfig", type: "import"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "super::types::DiscoveryResult", type: "import"})
CREATE (doc)-[:MENTIONS]->(e8)

MATCH (doc:Document {title: "Query Expansion Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/config.rs
CREATE (doc:Document {
      id: "DiscoveryConfig Rust Module",
      title: "DiscoveryConfig Rust Module",
      domain: "software",
      doc_type: "code_module"
    })
CREATE (e0:Module {name: "DiscoveryConfig", language: "Rust", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "DiscoveryConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ScoringConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ExpansionConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "BroadDiscoveryConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "SemanticFocusConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ReadmePromotionConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "CompressionConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "AnswerPlanConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "PromptRenderConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "default", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", version: "latest", features: "Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "super::types::SectionType", type: "local_module"})
CREATE (doc)-[:MENTIONS]->(e12)

MATCH (doc:Document {title: "DiscoveryConfig Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/compress.rs
CREATE (doc:Document {
      id: "ExtractiveCompressor Rust Module",
      title: "ExtractiveCompressor Rust Module",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "ExtractiveCompressor", language: "rust", purpose: "Text compression and evidence extraction"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "ExtractiveCompressor", visibility: "public", purpose: "Main compressor struct for extractive text compression"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "extract_sentences", visibility: "public", parameters: "text: &str,max: usize,chunks: &[ScoredChunk],max_bullets: usize,max_per_doc: usize,config: &CompressionConfig,text: &str,sentence: &str,sentence: String", purpose: "Extract sentences from text with keyword density scoring"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "compress_evidence", visibility: "public", parameters: "chunks: &[ScoredChunk],max_bullets: usize,max_per_doc: usize,config: &CompressionConfig", return_type: "DiscoveryResult<Vec<Bullet>>", purpose: "Compress evidence chunks into bullet points"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "extract_sentences", visibility: "private", parameters: "text: &str", return_type: "Vec<String>", purpose: "Split text into sentences using Unicode segmentation"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "categorize_sentence", visibility: "private", parameters: "sentence: &str", return_type: "BulletCategory", purpose: "Categorize sentences based on content patterns"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "clean_sentence", visibility: "private", parameters: "sentence: String", return_type: "String", purpose: "Clean and normalize sentence text"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map for document counting"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "super::config::CompressionConfig", type: "internal_module", purpose: "Compression configuration"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "super::types::{Bullet, BulletCategory, DiscoveryResult, ScoredChunk}", type: "internal_module", purpose: "Type definitions for compression"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "CompressionConfig", purpose: "Configuration for text compression parameters"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "compress_evidence", purpose: "Main API for evidence compression", input: "ScoredChunk array", output: "Bullet array"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "create_test_chunk", purpose: "Test helper function for creating mock chunks"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Documentation {name: "docs/future/RUST_LIBRARIES_INTEGRATION.md", purpose: "Future integration documentation"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "ExtractiveCompressor Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/discovery/broad.rs
CREATE (doc:Document {
      id: "Broad Discovery Module - Multi-query MMR Implementation",
      title: "Broad Discovery Module - Multi-query MMR Implementation",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "broad_discovery", language: "rust", description: "Multi-query MMR (Maximal Marginal Relevance) diversity implementation"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "broad_discovery", return_type: "DiscoveryResult<Vec<ScoredChunk>>", parameters: "queries: &[String],collections: &[CollectionRef],config: &BroadDiscoveryConfig,store: &Arc<VectorStore>,embedding_manager: &Arc<EmbeddingManager>,doc_id: &str,collection_name: &str,a: &str,b: &str,chunks: Vec<ScoredChunk>,threshold: f32,chunks: Vec<ScoredChunk>,k: usize,lambda: f32", description: "Main function for multi-query discovery with MMR diversity"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "extract_metadata", return_type: "ChunkMetadata", parameters: "doc_id: &str,collection_name: &str", description: "Extract metadata from document ID"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "content_similarity", return_type: "f32", parameters: "a: &str,b: &str", description: "Calculate Jaccard similarity between two content strings"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "deduplicate_chunks", return_type: "Vec<ScoredChunk>", parameters: "chunks: Vec<ScoredChunk>,threshold: f32", description: "Remove duplicate chunks based on content similarity"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "apply_mmr", return_type: "Vec<ScoredChunk>", parameters: "chunks: Vec<ScoredChunk>,k: usize,lambda: f32", description: "Apply Maximal Marginal Relevance diversity algorithm"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "BroadDiscoveryConfig", properties: "k_per_query,similarity_threshold,enable_deduplication,dedup_threshold,mmr_lambda"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "ScoredChunk", properties: "collection,doc_id,content,score,metadata,file_path,chunk_index,file_extension,line_range,name"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "ChunkMetadata", properties: "file_path,chunk_index,file_extension,line_range"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "CollectionRef", properties: "name"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "DiscoveryError", description: "Error type for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "DiscoveryResult", description: "Result type wrapper for discovery operations"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "VectorStore", description: "Vector storage interface"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "EmbeddingManager", description: "Manages text embeddings"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Broad Discovery Module - Multi-query MMR Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/vector_store.rs
CREATE (doc:Document {
      id: "VectorStore CollectionType Implementation",
      title: "VectorStore CollectionType Implementation",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "VectorStore", language: "Rust", description: "Vector storage implementation with CPU and GPU support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CollectionType", type: "enum", description: "Enum representing different collection types (CPU or GPU)"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "name", return_type: "&str", description: "Get collection name"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "config", return_type: "&CollectionConfig", description: "Get collection configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "add_vector", return_type: "Result<()>", description: "Add vector to collection"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "search", return_type: "Result<Vec<SearchResult>>", description: "Search vectors in collection"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "metadata", return_type: "CollectionMetadata", description: "Get collection metadata"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "delete_vector", return_type: "Result<()>", description: "Delete vector from collection"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "update_vector", return_type: "Result<()>", description: "Update vector in collection"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_vector", return_type: "Option<Vector>", description: "Get vector by ID"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "vector_count", return_type: "usize", description: "Get number of vectors"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "estimated_memory_usage", return_type: "usize", description: "Get estimated memory usage"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "get_all_vectors", return_type: "Vec<Vector>", description: "Get all vectors in collection"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "get_embedding_type", return_type: "String", description: "Get embedding type"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "requantize_existing_vectors", return_type: "Result<()>", description: "Requantize existing vectors"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "calculate_memory_usage", return_type: "(usize, usize, usize)", description: "Calculate memory usage breakdown"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "get_size_info", return_type: "(String, String, String)", description: "Get formatted size information"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "set_embedding_type", return_type: "()", description: "Set embedding type"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "load_hnsw_index_from_dump", return_type: "Result<()>", description: "Load HNSW index from dump file"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "std::collections::HashSet", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "std::ops::Deref", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "std::path::PathBuf", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "dashmap::DashMap", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "tracing", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "crate::db::hive_gpu_collection::HiveGpuCollection", type: "internal_module", feature: "hive-gpu"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Dependency {name: "crate::gpu_adapter::GpuAdapter", type: "internal_module", feature: "hive-gpu"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Dependency {name: "crate::models::{CollectionConfig, CollectionMetadata, SearchResult, Vector}", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e28)
CREATE (e29:Configuration {name: "hive-gpu", type: "feature_flag", description: "Optional GPU acceleration feature"})
CREATE (doc)-[:MENTIONS]->(e29)

MATCH (doc:Document {title: "VectorStore CollectionType Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/quantized_collection.rs
CREATE (doc:Document {
      id: "QuantizedCollection Memory-Optimized Vector Storage",
      title: "QuantizedCollection Memory-Optimized Vector Storage",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "memory-optimized", description: "Memory-optimized vector storage with quantization support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QuantizedCollection", description: "Main collection struct for quantized vector storage", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "VectorMetadata", description: "Metadata structure for vector information", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new quantized collection with default quantization", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new_with_quantization", description: "Create a new quantized collection with specific quantization config", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "add_vectors", description: "Add vectors to the collection with quantization", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "search", description: "Search for similar vectors using quantized index", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "dashmap", type: "external"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "serde", type: "external"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "chrono", type: "external"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "CollectionConfig", description: "Collection configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "QuantizationConfig", description: "Quantization configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "StorageConfig", description: "Storage configuration for quantized vectors"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "HnswQuantizationConfig", description: "HNSW index configuration for quantized search"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "QuantizedCollection Memory-Optimized Vector Storage"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/optimized_hnsw.rs
CREATE (doc:Document {
      id: "HNSW Operations Module",
      title: "HNSW Operations Module",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "hnsw_operations", description: "HNSW operations with pre-allocation, parallel processing, and memory-efficient computations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "OptimizedHnswConfig", description: "Configuration for optimized HNSW index", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "OptimizedHnswIndex", description: "HNSW operations with optimized performance", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new optimized HNSW index", visibility: "public", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "add", description: "Add vector with buffering", visibility: "public", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "batch_add", description: "Pre-allocated batch addition of vectors", visibility: "public", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "insert_batch", description: "Insert batch of vectors", visibility: "public", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "flush", description: "Flush buffered vectors", visibility: "public", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "search", description: "Find nearest neighbors", visibility: "public", return_type: "Result<Vec<(String, f32)>>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "remove", description: "Remove vector by ID", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "hnsw_rs::libext::file_dump_f32", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "hnsw_rs::prelude::*", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "parking_lot::RwLock", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "tracing", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::error", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::models::DistanceMetric", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "OptimizedHnswConfig", description: "HNSW index configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "HNSW Operations Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/mod.rs
CREATE (doc:Document {
      id: "Database Module for Vectorizer",
      title: "Database Module for Vectorizer",
      domain: "software",
      doc_type: "rust_module_documentation"
    })
CREATE (e0:Module {name: "database", description: "Database module for Vectorizer auto_save", features: "hive-gpu"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "auto_save", description: "AutoSaveManager functionality"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "collection", description: "Collection management"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "collection_normalization", description: "CollectionNormalizationHelper functionality"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "hive_gpu_collection", description: "GPU-accelerated collection operations", feature_gated: "true"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Module {name: "optimized_hnsw", description: "Optimized HNSW index implementation"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Module {name: "vector_store", description: "Vector storage and management"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "AutoSaveManager", module: "auto_save"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "Collection", module: "collection"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "CollectionNormalizationHelper", module: "collection_normalization"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "OptimizedHnswConfig", module: "optimized_hnsw"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "OptimizedHnswIndex", module: "optimized_hnsw"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Enum {name: "CollectionType", module: "vector_store"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Trait {name: "VectorStore", module: "vector_store"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Database Module for Vectorizer"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/hive_gpu_collection.rs
CREATE (doc:Document {
      id: "Hive-GPU VectorStore Implementation",
      title: "Hive-GPU VectorStore Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "hive_gpu", description: "Hive-GPU VectorStore implementation for GPU-accelerated vector operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "HiveGpuCollection", description: "Main collection struct for GPU-accelerated vector storage and operations", fields: "name,config,context,storage,dimension,vector_count"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new Hive-GPU collection", parameters: "name,config,context,vector,vectors,query,limit,id,index,id"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "add_vector", description: "Add a single vector to the collection", parameters: "vector"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "add_vectors", description: "Add multiple vectors to the collection in batch", parameters: "vectors"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "search", description: "Search for similar vectors using GPU acceleration", parameters: "query,limit"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "get_vector_by_id", description: "Retrieve a vector by its ID", parameters: "id"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_vector", description: "Retrieve a vector by its index", parameters: "index"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "remove_vector", description: "Remove a vector from the collection", parameters: "id"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::collections::HashMap", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::sync::{Arc, Mutex}", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::time::Duration", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "hive_gpu::{GpuContext, GpuVectorStorage}", type: "External Crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tracing::{debug, error, info, warn}", type: "External Crate"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "crate::error::{Result, VectorizerError}", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::gpu_adapter::{GpuAdapter, HiveGpuDistanceMetric, HiveGpuError, HiveGpuSearchResult, HiveGpuVector}", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::models::{CollectionConfig, CollectionMetadata, CompressionConfig, DistanceMetric, HnswConfig, QuantizationConfig, SearchResult, Vector}", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "CollectionConfig", description: "Configuration for vector collection including dimension and distance metric"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "GpuContext", description: "GPU context interface for creating storage"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "GpuVectorStorage", description: "GPU vector storage interface for vector operations"})
CREATE (doc)-[:MENTIONS]->(e19)

MATCH (doc:Document {title: "Hive-GPU VectorStore Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/collection_normalization.rs
CREATE (doc:Document {
      id: "CollectionNormalizationHelper - Document Processing and Normalization",
      title: "CollectionNormalizationHelper - Document Processing and Normalization",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "CollectionNormalizationHelper", language: "Rust", purpose: "Document normalization and processing helper"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CollectionNormalizationHelper", visibility: "public", fields: "pipeline: Option<NormalizationPipeline>"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "from_config", visibility: "public", parameters: "config: &CollectionConfig,data_dir: &Path,text: &str,file_path: Option<&Path>,query: &str,text: &str,payload: Payload,processed: &ProcessedDocument,id: String,embedding: Vec<f32>,processed: &ProcessedDocument,payload: Payload", return_type: "Result<Self>", purpose: "Create helper from collection config"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "is_enabled", visibility: "public", return_type: "bool", purpose: "Check if normalization is enabled"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "process_document", visibility: "public", parameters: "text: &str,file_path: Option<&Path>", return_type: "Result<ProcessedDocument>", purpose: "Process document through normalization pipeline"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "process_query", visibility: "public", parameters: "query: &str", return_type: "String", purpose: "Process search query"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "is_duplicate", visibility: "public", parameters: "text: &str", return_type: "Result<bool>", purpose: "Check if text is duplicate"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "enrich_payload", visibility: "public", parameters: "payload: Payload,processed: &ProcessedDocument", return_type: "Payload", purpose: "Enrich payload with normalization metadata"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "create_vector_with_normalization", visibility: "public", parameters: "id: String,embedding: Vec<f32>,processed: &ProcessedDocument,payload: Payload", return_type: "Vector", purpose: "Create vector with normalization data"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "cache_stats", visibility: "public", return_type: "Option<crate::normalization::CacheStats>", purpose: "Get cache statistics"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_helper_no_normalization", framework: "tokio", purpose: "Test helper without normalization"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_helper_with_normalization", framework: "tokio", purpose: "Test helper with normalization enabled"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_query_processing", framework: "tokio", purpose: "Test query processing functionality"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde_json", type: "external", usage: "JSON serialization"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tempfile", type: "external", usage: "Temporary directory creation for tests"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "CollectionConfig", type: "struct", purpose: "Collection configuration with normalization settings"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "NormalizationConfig", type: "struct", purpose: "Normalization pipeline configuration"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "NormalizationPipeline", type: "trait/struct", purpose: "Document processing pipeline interface"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "ProcessedDocument", type: "struct", purpose: "Processed document result structure"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "Payload", type: "struct", purpose: "Document payload structure"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:API {name: "Vector", type: "struct", purpose: "Vector representation with payload"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "CollectionNormalizationHelper - Document Processing and Normalization"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/collection.rs
CREATE (doc:Document {
      id: "Vector Collection Implementation",
      title: "Vector Collection Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "vector_collection", language: "Rust", description: "Vector collection implementation with HNSW indexing and quantization support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "VectorCollection", visibility: "public", description: "Main collection struct for storing and searching vectors"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create new collection with default embedding type"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new_with_embedding_type", visibility: "public", description: "Create new collection with specific embedding type"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "insert_batch", visibility: "public", description: "Insert multiple vectors in batch operation"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "insert", visibility: "public", description: "Insert single vector"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "update", visibility: "public", description: "Update existing vector"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "metadata", visibility: "public", description: "Get collection metadata"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_embedding_type", visibility: "public", description: "Get current embedding type"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "set_embedding_type", visibility: "public", description: "Set embedding type"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for vector storage"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::sync::{Arc, Mutex}", type: "standard_library", description: "Thread-safe reference counting and mutex"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "dashmap::DashMap", type: "external_crate", description: "Concurrent hash map for document IDs"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "parking_lot::RwLock", type: "external_crate", description: "Reader-writer lock for vector order"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tracing::{debug, info, warn}", type: "external_crate", description: "Structured logging macros"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "super::optimized_hnsw::{OptimizedHnswConfig, OptimizedHnswIndex}", type: "internal_module", description: "Optimized HNSW implementation"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module", description: "Error handling types"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::models::{CollectionConfig, CollectionMetadata, DistanceMetric, SearchResult, Vector, vector_utils}", type: "internal_module", description: "Data models and utilities"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "OptimizedHnswConfig", description: "Configuration for HNSW index optimization"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "CollectionConfig", description: "Collection configuration including dimensions and metrics"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:API {name: "VectorCollection API", description: "Public interface for vector collection operations"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Vector Collection Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/db/auto_save.rs
CREATE (doc:Document {
      id: "AutoSaveManager Rust Module",
      title: "AutoSaveManager Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "AutoSaveManager", language: "Rust", description: "Auto-save manager with periodic compaction and snapshot functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "AutoSaveManager", visibility: "public", description: "Manages automatic saving and snapshotting of vector store data"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create a new auto-save manager with configurable intervals"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "start", visibility: "public", description: "Start the periodic auto-save and snapshot tasks"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "mark_changed", visibility: "public", description: "Mark that changes have been detected since last save"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "force_save", visibility: "public", description: "Force an immediate save/compaction operation"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "SAVE_INTERVAL_SECS", value: "300", description: "Save interval in seconds (5 minutes)"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "SNAPSHOT_INTERVAL_SECS", value: "3600", description: "Snapshot interval in seconds (1 hour)"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "VectorStore", description: "Main vector store for data persistence"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "StorageCompactor", description: "Handles storage compaction operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "SnapshotManager", description: "Manages snapshot creation and retention"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "AutoSaveManager Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/config/vectorizer.rs
CREATE (doc:Document {
      id: "Vectorizer Configuration Structure",
      title: "Vectorizer Configuration Structure",
      domain: "software",
      doc_type: "Configuration"
    })
CREATE (e0:Class {name: "VectorizerConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ServerConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "LoggingConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ProjectConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CollectionConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "TransmutationConfig", language: "Rust", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "from_yaml_file", visibility: "public", return_type: "Result<Self, Box<dyn std::error::Error>>", parameters: "path: &PathBuf,&self,path: &PathBuf"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "to_yaml_file", visibility: "public", return_type: "Result<(), Box<dyn std::error::Error>>", parameters: "&self,path: &PathBuf"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "from_env", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "default_transmutation_enabled", visibility: "private", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "default_max_file_size_mb", visibility: "private", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "default_conversion_timeout_secs", visibility: "private", return_type: "u64"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde", type: "external", features: "Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde_yaml", type: "external"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::path::PathBuf", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "FileWatcherYamlConfig", type: "internal_config"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "StorageConfig", type: "internal_config"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "SummarizationConfig", type: "internal_config"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "Vectorizer Configuration Structure"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/config/mod.rs
CREATE (doc:Document {
      id: "Configuration management for Vectorizer",
      title: "Configuration management for Vectorizer",
      domain: "software",
      doc_type: "Rust module declaration"
    })
CREATE (e0:Module {name: "enhanced_config", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "file_watcher", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "vectorizer", visibility: "public", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Configuration {name: "Vectorizer Configuration", type: "enhanced_config"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:API {name: "Vectorizer API", exposed_modules: "enhanced_config,file_watcher,vectorizer"})
CREATE (doc)-[:MENTIONS]->(e4)

MATCH (doc:Document {title: "Configuration management for Vectorizer"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/config/file_watcher.rs
CREATE (doc:Document {
      id: "FileWatcherYamlConfig Rust Module",
      title: "FileWatcherYamlConfig Rust Module",
      domain: "software",
      doc_type: "rust_struct_definition"
    })
CREATE (e0:Module {name: "FileWatcherYamlConfig", language: "rust", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "FileWatcherYamlConfig", type: "struct", derives: "Debug,Clone,PartialEq,Serialize,Deserialize", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "default", type: "impl_method", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Configuration {name: "FileWatcherYamlConfig", type: "yaml_configuration", purpose: "file_watcher_settings"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "std::path::PathBuf", type: "standard_library", purpose: "path_handling"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize", purpose: "serialization"})
CREATE (doc)-[:MENTIONS]->(e5)

MATCH (doc:Document {title: "FileWatcherYamlConfig Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/config/enhanced_config.rs
CREATE (doc:Document {
      id: "Enhanced Configuration Management System",
      title: "Enhanced Configuration Management System",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "management", description: "Provides enhanced configuration management with dynamic templates and inheritance"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "EnhancedConfigManager", description: "Enhanced configuration manager with validation and auto-reload capabilities"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ValidationRules", description: "Configuration validation rules with field constraints and cross-field validation"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "FieldConstraint", description: "Field validation constraints for different data types"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CrossFieldRule", description: "Cross-field validation rules with custom validator functions"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ConfigTemplate", description: "Configuration template with variables and inheritance support"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "TemplateVariable", description: "Template variable definition with type and validation constraints"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "VariableType", description: "Enumeration of supported variable types"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "new", description: "Create a new enhanced configuration manager"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "load_config", description: "Load configuration from file with environment variable substitution"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "save_config", description: "Save current configuration to file"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "get_config", description: "Get current configuration"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "update_config", description: "Update configuration with validation"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "substitute_env_vars", description: "Substitute environment variables in configuration content"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::path::{Path, PathBuf}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::time::{Duration, SystemTime}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "anyhow::{Context, Result}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "tokio::fs", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "crate::error::VectorizerError", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "crate::workspace::config::WorkspaceConfig", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "Enhanced Configuration Management System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/compression/zstd.rs
CREATE (doc:Document {
      id: "Zstd Compression Implementation",
      title: "Zstd Compression Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "zstd", description: "Zstd compression algorithm implementation", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ZstdConfig", description: "Configuration struct for Zstd compression", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Compressor,Decompressor,CompressionMethod"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ZstdCompressor", description: "Zstd compressor implementation", visibility: "public", traits: "Compressor,Decompressor,CompressionMethod"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new Zstd compressor", visibility: "public", parameters: "config: ZstdConfig,data: &[u8],compressed_data: &[u8],_original_size: Option<usize>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "default", description: "Create compressor with default configuration", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "high_compression", description: "Create compressor with high compression settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "fast", description: "Create compressor with fast compression settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "balanced", description: "Create compressor with balanced settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "compress", description: "Compress data using Zstd algorithm", visibility: "public", parameters: "data: &[u8]", return_type: "CompressionResult<Vec<u8>>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "decompress", description: "Decompress data using Zstd algorithm", visibility: "public", parameters: "compressed_data: &[u8],_original_size: Option<usize>", return_type: "CompressionResult<Vec<u8>>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "simple_zstd_compress", description: "Simple Zstd-like compression implementation", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "simple_zstd_decompress", description: "Simple Zstd-like decompression implementation", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "find_longest_match", description: "Find longest match for LZ77 compression", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "crate::compression::traits", purpose: "Compression trait definitions"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::compression", purpose: "Compression error types and results"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "ZstdConfig", fields: "level: u8,use_dictionary: bool,dictionary_size: usize,enable_checksum: bool,frame_format: bool"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "Compressor trait", methods: "compress,level,algorithm,estimate_compressed_size,decompress,algorithm,"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "Decompressor trait", methods: "decompress,algorithm"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "CompressionMethod trait", methods: ""})
CREATE (doc)-[:MENTIONS]->(e19)

MATCH (doc:Document {title: "Zstd Compression Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/compression/traits.rs
CREATE (doc:Document {
      id: "Rust Compression Module Interface",
      title: "Rust Compression Module Interface",
      domain: "software",
      doc_type: "Module Interface"
    })
CREATE (e0:Module {name: "compression", path: "crate::compression", description: "Compression module with compressor and decompressor interfaces"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Compressor", type: "trait", description: "Interface for data compression operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "Decompressor", type: "trait", description: "Interface for data decompression operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CompressionMethod", type: "trait", description: "Extended compression interface with utility methods"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CompressionMethodConfig", type: "struct", description: "Configuration for compression methods"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CompressionMetrics", type: "struct", description: "Performance metrics for compression operations"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CompressionBenchmark", type: "struct", description: "Benchmark results for compression algorithms"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "compress", description: "Compress data and return compressed bytes"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "decompress", description: "Decompress data and return original bytes"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "compression_ratio", description: "Calculate compression ratio for given data"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "should_compress", description: "Determine if data should be compressed based on size and ratio thresholds"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "space_savings_percent", description: "Calculate space savings percentage"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "compression_throughput_mbps", description: "Calculate compression throughput in MB/s"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "decompression_throughput_mbps", description: "Calculate decompression throughput in MB/s"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "efficiency_score", description: "Calculate efficiency score (ratio / time)"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "compare", description: "Compare two compression benchmarks"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "CompressionMethodConfig", fields: "level,auto_level,min_ratio_threshold,max_compression_time_us"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "CompressionError", description: "Error type for compression operations"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "CompressionResult", description: "Result type for compression operations"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Rust Compression Module Interface"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/compression/mod.rs
CREATE (doc:Document {
      id: "Rust Compression Module",
      title: "Rust Compression Module",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "compression", language: "Rust", description: "I/O compression module with LZ4 and Zstandard support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CompressionAlgorithm", type: "enum", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,PartialEq,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,thiserror::Error"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CompressionConfig", type: "struct", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CompressionStats", type: "struct", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CompressionError", type: "enum", visibility: "public", traits: "Debug,thiserror::Error"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CompressionManager", type: "struct", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "fmt", visibility: "public", return_type: "fmt::Result"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "default", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "compression_ratio", visibility: "public", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "space_savings_percent", visibility: "public", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "compression_throughput_mbps", visibility: "public", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "new", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "config", visibility: "public", return_type: "&CompressionConfig"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "stats", visibility: "public", return_type: "&CompressionStats"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "reset_stats", visibility: "public", return_type: "()"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "CompressionConfig", type: "struct", fields: "algorithm,level,auto_select,min_size_threshold,enable_stats"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde", type: "external", features: "Serialize,Deserialize,Error"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "thiserror", type: "external", features: "Error"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "CompressionResult", type: "type_alias", definition: "Result<T, CompressionError>"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Rust Compression Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/compression/lz4.rs
CREATE (doc:Document {
      id: "LZ4 Compression Implementation",
      title: "LZ4 Compression Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "lz4", description: "LZ4 algorithm implementation for compression and decompression"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Lz4Config", description: "Configuration struct for LZ4 compression", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "Lz4Compressor", description: "LZ4 compressor implementation", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create a new LZ4 compressor", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "default", description: "Create default LZ4 compressor", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "high_compression", description: "Create high compression LZ4 compressor", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "fast", description: "Create fast LZ4 compressor", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "compress", description: "Compress data using LZ4 algorithm", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "decompress", description: "Decompress LZ4 compressed data", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "simple_lz4_compress", description: "Simple LZ4-like compression implementation", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "simple_lz4_decompress", description: "Simple LZ4-like decompression implementation", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "find_longest_match", description: "Find longest match for compression", visibility: "private"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "Lz4Config", properties: "level: u8,high_compression: bool,frame_format: bool,block_size: usize"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "Compressor", description: "Trait for compression operations"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "Decompressor", description: "Trait for decompression operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "CompressionMethod", description: "Trait for compression method identification"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde", type: "external", usage: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::compression::traits", type: "internal", usage: "Compression trait definitions"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::compression", type: "internal", usage: "Compression error types and results"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "LZ4 Compression Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/compression/config.rs
CREATE (doc:Document {
      id: "Compression Configuration Module",
      title: "Compression Configuration Module",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "compression", path: "crate::compression", description: "Compression configuration and management module"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CompressionConfigBuilder", type: "Builder Pattern", description: "Builder for creating compression configurations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CompressionPresets", type: "Static Factory", description: "Predefined compression configuration presets"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CompressionConfigValidator", type: "Utility", description: "Validates compression configurations"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CompressionConfig", type: "Configuration", description: "Compression configuration structure"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CompressionAlgorithm", type: "Enum", description: "Available compression algorithms"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "DataType", type: "Enum", description: "Data type classification for compression optimization"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new", class: "CompressionConfigBuilder", description: "Create a new configuration builder"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "algorithm", class: "CompressionConfigBuilder", description: "Set compression algorithm"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "level", class: "CompressionConfigBuilder", description: "Set compression level"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "auto_select", class: "CompressionConfigBuilder", description: "Enable/disable auto-selection"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "min_size_threshold", class: "CompressionConfigBuilder", description: "Set minimum size threshold"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "enable_stats", class: "CompressionConfigBuilder", description: "Enable/disable statistics"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "build", class: "CompressionConfigBuilder", description: "Build final configuration"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "fast", class: "CompressionPresets", description: "Fast compression preset"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "balanced", class: "CompressionPresets", description: "Balanced compression preset"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "high_compression", class: "CompressionPresets", description: "High compression preset"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "storage_optimized", class: "CompressionPresets", description: "Storage optimized preset"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "real_time", class: "CompressionPresets", description: "Real-time compression preset"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "none", class: "CompressionPresets", description: "No compression preset"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "validate", class: "CompressionConfigValidator", description: "Validate compression configuration"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "recommend_for_data", class: "CompressionConfigValidator", description: "Recommend configuration for data type and size"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Function {name: "detect", class: "DataType", description: "Detect data type from sample data"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "serde", type: "External Crate", description: "Serialization/deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "Compression Configuration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cli/utils.rs
CREATE (doc:Document {
      id: "CLI Utilities Module",
      title: "CLI Utilities Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "CliUtils", description: "Utility CLI operations for file system and system management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "ensure_directory", visibility: "public", parameters: "path: &PathBuf,path: &PathBuf,path: &PathBuf,bytes: u64,seconds: u64,message: &str,default: bool,,,port: u16,host: &str,length: usize,,,path: &PathBuf", return_type: "Result<()>", description: "Ensure directory exists, create if it doesn't"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "check_file_readable", visibility: "public", parameters: "path: &PathBuf", return_type: "Result<()>", description: "Check if file is readable"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "check_file_writable", visibility: "public", parameters: "path: &PathBuf", return_type: "Result<()>", description: "Check if file is writable"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "format_bytes", visibility: "public", parameters: "bytes: u64", return_type: "String", description: "Format bytes into human readable format"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "format_duration", visibility: "public", parameters: "seconds: u64", return_type: "String", description: "Format duration into human readable format"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "confirm_action", visibility: "public", parameters: "message: &str,default: bool", return_type: "Result<bool>", description: "Prompt user for confirmation"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_system_info", visibility: "public", parameters: "", return_type: "SystemInfo", description: "Get system information"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "check_system_requirements", visibility: "public", parameters: "", return_type: "Result<()>", description: "Check system requirements"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "validate_port", visibility: "public", parameters: "port: u16", return_type: "Result<()>", description: "Validate port number"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "validate_host", visibility: "public", parameters: "host: &str", return_type: "Result<()>", description: "Validate host address"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "generate_secure_string", visibility: "public", parameters: "length: usize", return_type: "Result<String>", description: "Generate secure random string"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "is_elevated", visibility: "public", parameters: "", return_type: "bool", description: "Check if running with elevated privileges"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "get_current_dir", visibility: "public", parameters: "", return_type: "Result<PathBuf>", description: "Get current working directory"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "set_current_dir", visibility: "public", parameters: "path: &PathBuf", return_type: "Result<()>", description: "Set current working directory"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "SystemInfo", visibility: "public", fields: "os: String,arch: String,rust_version: String,vectorizer_version: String", traits: "Debug,Clone"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::path::PathBuf", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tracing", type: "external_crate", functions: "info,warn,mem_info,disk_info"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::error", type: "internal_module", types: "Result,VectorizerError"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "rand", type: "external_crate", traits: "Rng"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "sys_info", type: "external_crate", functions: "mem_info,disk_info"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "CLI Utilities Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cli/mod.rs
CREATE (doc:Document {
      id: "Vectorizer CLI Command Structure",
      title: "Vectorizer CLI Command Structure",
      domain: "software",
      doc_type: "CLI_Interface"
    })
CREATE (e0:Module {name: "vectorizer_cli", description: "Command-line interface for Vectorizer vector database administration"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Cli", description: "Main CLI structure with configuration and subcommands", attributes: "config,verbose,command"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "Commands", description: "Enumeration of all available CLI subcommands", variants: "Server,User,ApiKey,Collection,System,Db,Config,Snapshot,Storage,Start,Stop,Restart,Create,List,Delete,UpdateRoles,Create,List,Revoke,Test,Create,List,Delete,Get,Backup,Restore,Optimize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ServerCommands", description: "Server management operations", variants: "Start,Stop,Restart"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "UserCommands", description: "User management operations", variants: "Create,List,Delete,UpdateRoles"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ApiKeyCommands", description: "API key management operations", variants: "Create,List,Revoke,Test"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CollectionCommands", description: "Collection management operations", variants: "Create,List,Delete,Get"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "DbCommands", description: "Database management operations", variants: "Backup,Restore,Optimize"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Configuration {name: "CliConfig", description: "CLI configuration structure", fields: "config_path,verbose,command"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "ServerAPI", description: "Server management API endpoints", operations: "start,stop,restart,create,list,delete,update_roles,create,list,delete,get"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:API {name: "UserAPI", description: "User management API endpoints", operations: "create,list,delete,update_roles"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:API {name: "CollectionAPI", description: "Collection management API endpoints", operations: "create,list,delete,get"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Database {name: "VectorDatabase", description: "Vector database with collections and vector operations", features: "backup,restore,optimize,indexing"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "clap", description: "Command line argument parser for Rust", version: "latest"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::path::PathBuf", description: "Standard library path handling", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e14)

MATCH (doc:Document {title: "Vectorizer CLI Command Structure"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cli/config.rs
CREATE (doc:Document {
      id: "CLI Configuration Management",
      title: "CLI Configuration Management",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "cli", description: "Handles CLI configuration files and management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ConfigFile", description: "Main configuration structure containing all configuration sections", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ServerConfigFile", description: "Server configuration settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "AuthConfigFile", description: "Authentication configuration settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "DatabaseConfigFile", description: "Database configuration settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "LoggingConfigFile", description: "Logging configuration settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ConfigManager", description: "Configuration management utility", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "load_from_file", description: "Load configuration from file", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "save_to_file", description: "Save configuration to file", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "generate_default_file", description: "Generate default configuration file", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "validate_config", description: "Validate configuration settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde_yaml", version: "latest", purpose: "YAML serialization support"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std", version: "built-in", purpose: "Standard library for file operations"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "server_config", description: "Server host, port, data directory, and auth settings"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "auth_config", description: "JWT settings, API key configuration, and rate limiting"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "database_config", description: "Database persistence and compression settings"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "logging_config", description: "Log level and file output settings"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "CLI Configuration Management"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cli/commands.rs
CREATE (doc:Document {
      id: "Vectorizer CLI Server Management Module",
      title: "Vectorizer CLI Server Management Module",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "cli", language: "rust", description: "CLI module for Vectorizer server management"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "handle_server_command", module: "cli", parameters: "command: ServerCommands,config: &CliConfig,command: UserCommands,config: &CliConfig,command: ApiKeyCommands,config: &CliConfig", return_type: "Result<()>", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "handle_user_command", module: "cli", parameters: "command: UserCommands,config: &CliConfig", return_type: "Result<()>", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "handle_api_key_command", module: "cli", parameters: "command: ApiKeyCommands,config: &CliConfig", return_type: "Result<()>", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ServerCommands", module: "cli", variants: "Start,Stop,Restart,Create,List,Delete,UpdateRoles,Create,Admin,User,ReadOnly,Service,Read,Write,Delete,CreateCollection,DeleteCollection,ManageUsers,ManageApiKeys,ViewLogs,SystemConfig"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "UserCommands", module: "cli", variants: "Create,List,Delete,UpdateRoles"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ApiKeyCommands", module: "cli", variants: "Create"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "CliConfig", module: "cli", description: "Configuration structure for CLI operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "AuthManager", module: "auth", description: "Authentication and authorization management"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "VectorStore", module: "db", description: "Database storage for vector data"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "Role", module: "auth", variants: "Admin,User,ReadOnly,Service"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "Permission", module: "auth", variants: "Read,Write,Delete,CreateCollection,DeleteCollection,ManageUsers,ManageApiKeys,ViewLogs,SystemConfig"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde_yaml", type: "external_crate", purpose: "YAML serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "tracing", type: "external_crate", purpose: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "tokio", type: "external_crate", purpose: "Async runtime"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "chrono", type: "external_crate", purpose: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "server_config", parameters: "host,port,auth,data_dir,username,roles,description,user_id,name,permissions,expires_in_hours", description: "Server startup configuration"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "user_config", parameters: "username,roles,description", description: "User creation and management configuration"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "api_key_config", parameters: "user_id,name,permissions,expires_in_hours", description: "API key creation configuration"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "server_management_api", endpoints: "start,stop,restart,create,list,delete,update_roles,create", description: "Server lifecycle management"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:API {name: "user_management_api", endpoints: "create,list,delete,update_roles", description: "User account management"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:API {name: "api_key_management_api", endpoints: "create", description: "API key management"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Database {name: "vector_store", type: "vector_database", description: "Storage for vector embeddings and metadata"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "Vectorizer CLI Server Management Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/validation.rs
CREATE (doc:Document {
      id: "Cache Validator System",
      title: "Cache Validator System",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "CacheValidator", language: "Rust", description: "Cache validation system with file existence, size, and content hash validation"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheValidator", description: "Main validator struct for cache validation operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ValidationConfig", description: "Configuration struct for validation settings"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ValidationResult", description: "Result struct containing validation status and statistics"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ValidationError", description: "Error struct for validation failures"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ValidationWarning", description: "Warning struct for validation warnings"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ValidationStats", description: "Statistics struct for validation metrics"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "ValidationConfig", description: "Validation configuration with file size limits and timeout settings"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "validate_metadata", description: "Main validation function for cache metadata"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "validate_metadata_structure", description: "Validates the structure of cache metadata"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "validate_collection", description: "Validates individual collection data"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", description: "Standard library HashMap for key-value storage"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::path::Path", description: "Standard library Path for file path operations"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "sha2::{Digest, Sha256}", description: "SHA-256 hashing library for content validation"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Cache Validator System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/query_cache.rs
CREATE (doc:Document {
      id: "Query Cache Implementation",
      title: "Query Cache Implementation",
      domain: "software",
      doc_type: "Rust Implementation"
    })
CREATE (e0:Module {name: "query_cache", language: "Rust", description: "LRU cache implementation for query results with TTL support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QueryCacheConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,PartialEq,Eq,Hash,Debug,Clone,Debug,Clone,Serialize,Deserialize", description: "Configuration struct for query cache settings"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QueryKey", visibility: "public", traits: "Debug,Clone,PartialEq,Eq,Hash", description: "Key structure for cache lookups"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CachedEntry", visibility: "public", traits: "Debug,Clone", description: "Wrapper for cached values with TTL information"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QueryCache", visibility: "public", description: "Main LRU cache implementation with thread safety"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "CacheStats", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Statistics tracking for cache performance"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", class: "QueryCacheConfig", visibility: "public", description: "Default implementation for QueryCacheConfig"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new", class: "QueryKey", visibility: "public", description: "Create a new query key with threshold conversion"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "threshold_f64", class: "QueryKey", visibility: "public", description: "Convert threshold back to f64"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "hash", class: "QueryKey", visibility: "public", description: "Custom hash implementation for QueryKey"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "new", class: "CachedEntry", visibility: "public", description: "Create a new cached entry with TTL"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "is_expired", class: "CachedEntry", visibility: "public", description: "Check if the cached entry has expired"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "new", class: "QueryCache", visibility: "public", description: "Create a new query cache with configuration"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "get", class: "QueryCache", visibility: "public", description: "Retrieve a value from the cache"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "insert", class: "QueryCache", visibility: "public", description: "Insert a value into the cache"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "invalidate_collection", class: "QueryCache", visibility: "public", description: "Remove all entries for a specific collection"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "clear", class: "QueryCache", visibility: "public", description: "Clear all entries from the cache"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "stats", class: "QueryCache", visibility: "public", description: "Get cache performance statistics"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "reset_stats", class: "QueryCache", visibility: "public", description: "Reset cache statistics counters"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "std::hash", type: "standard_library", description: "Hash and Hasher traits"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "std::num::NonZeroUsize", type: "standard_library", description: "Non-zero usize for LRU cache capacity"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "std::sync::Arc", type: "standard_library", description: "Atomically reference counted smart pointer"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "std::time", type: "standard_library", description: "Duration and Instant for TTL support"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "lru::LruCache", type: "external_crate", description: "LRU cache implementation"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "parking_lot::RwLock", type: "external_crate", description: "Fast read-write lock implementation"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e25)

MATCH (doc:Document {title: "Query Cache Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/mod.rs
CREATE (doc:Document {
      id: "Query Caching Performance Improvement",
      title: "Query Caching Performance Improvement",
      domain: "software",
      doc_type: "code_documentation"
    })
CREATE (e0:Module {name: "advanced_cache", description: "Provides LRU (Least Recently Used) cache functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "query_cache", description: "Query caching module for improved search performance"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QueryCache", module: "query_cache"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Configuration {name: "QueryCacheConfig", module: "query_cache"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QueryKey", module: "query_cache"})
CREATE (doc)-[:MENTIONS]->(e4)

MATCH (doc:Document {title: "Query Caching Performance Improvement"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/metadata.rs
CREATE (doc:Document {
      id: "Cache Metadata Structures",
      title: "Cache Metadata Structures",
      domain: "software",
      doc_type: "rust_code_structures"
    })
CREATE (e0:Module {name: "cache_metadata", language: "rust", description: "Cache metadata management structures and implementations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheMetadata", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", description: "Main cache metadata structure containing version, timestamps, collections, and statistics"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CollectionCacheInfo", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Collection-specific cache information including file counts, hashes, and indexing details"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "FileHashInfo", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "File-specific hash and metadata information for cache tracking"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "IndexingStrategy", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Enumeration of indexing strategies: Full, Incremental, or Hybrid"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "GlobalCacheConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Global cache configuration with default settings for embedding models and chunking"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CacheStats", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Cache statistics tracking size, hit rates, and performance metrics"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new", class: "CacheMetadata", visibility: "public", description: "Create new cache metadata instance"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "update_access", class: "CacheMetadata", visibility: "public", description: "Update last accessed timestamp"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "update_modified", class: "CacheMetadata", visibility: "public", description: "Update last modified timestamp"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "update_collection", class: "CacheMetadata", visibility: "public", description: "Add or update collection information"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "get_collection", class: "CacheMetadata", visibility: "public", description: "Retrieve collection information by name"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "remove_collection", class: "CacheMetadata", visibility: "public", description: "Remove collection from cache metadata"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "has_collection", class: "CacheMetadata", visibility: "public", description: "Check if collection exists in cache"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "collection_names", class: "CacheMetadata", visibility: "public", description: "Get all collection names"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "update_stats", class: "CacheMetadata", visibility: "public", description: "Update cache statistics"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Standard HashMap collection"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::path::PathBuf", type: "standard_library", description: "Standard path buffer type"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "chrono::{DateTime, Utc}", type: "external_crate", description: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "super::CacheResult", type: "local_module", description: "Local cache result type"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Cache Metadata Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/manager.rs
CREATE (doc:Document {
      id: "CacheManager Implementation",
      title: "CacheManager Implementation",
      domain: "software",
      doc_type: "Rust Module Implementation"
    })
CREATE (e0:Module {name: "CacheManager", language: "Rust", description: "Async cache management system with metadata handling"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheManager", visibility: "public", description: "Main cache management structure"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", async: "true", return_type: "CacheResult<Self>", description: "Create new cache manager instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "load_metadata", visibility: "private", async: "true", return_type: "CacheResult<CacheMetadata>", description: "Load metadata from file"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "save_metadata", visibility: "private", async: "true", return_type: "CacheResult<()>", description: "Save metadata to file"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get_metadata", visibility: "public", async: "true", return_type: "CacheMetadata", description: "Get current metadata"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "update_metadata", visibility: "public", async: "true", return_type: "CacheResult<()>", description: "Update metadata with closure"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_collection_info", visibility: "public", async: "true", return_type: "Option<CollectionCacheInfo>", description: "Get collection cache information"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "update_collection_info", visibility: "public", async: "true", return_type: "CacheResult<()>", description: "Update collection cache information"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "remove_collection_info", visibility: "public", async: "true", return_type: "CacheResult<Option<CollectionCacheInfo>>", description: "Remove collection cache information"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "has_collection", visibility: "public", async: "true", return_type: "bool", description: "Check if collection exists"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "get_collection_names", visibility: "public", async: "true", return_type: "Vec<String>", description: "Get all collection names"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "get_stats", visibility: "public", async: "true", return_type: "CacheStats", description: "Get cache statistics"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "update_stats", visibility: "public", async: "true", return_type: "CacheResult<()>", description: "Update cache statistics"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "record_hit", visibility: "public", async: "true", return_type: "CacheResult<()>", description: "Record cache hit"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "record_miss", visibility: "public", async: "true", return_type: "CacheResult<()>", description: "Record cache miss"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "get_config", visibility: "public", return_type: "&CacheConfig", description: "Get cache configuration"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "update_config", visibility: "public", async: "true", return_type: "CacheResult<()>", description: "Update cache configuration"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "get_cache_path", visibility: "public", return_type: "&std::path::PathBuf", description: "Get cache directory path"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "get_metadata_path", visibility: "public", return_type: "&std::path::PathBuf", description: "Get metadata file path"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "calculate_total_size", visibility: "public", async: "true", return_type: "u64", description: "Calculate total cache size"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "is_stale", visibility: "public", async: "true", return_type: "bool", description: "Check if cache is stale"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Function {name: "cleanup", visibility: "public", async: "true", return_type: "CacheResult<CleanupResult>", description: "Clean up stale cache entries"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Function {name: "validate", visibility: "public", async: "true", return_type: "CacheResult<ValidationResult>", description: "Validate cache integrity"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Function {name: "validate_basic", visibility: "private", async: "true", return_type: "CacheResult<ValidationResult>", description: "Perform basic cache validation"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "tokio", type: "external", description: "Async runtime and synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Dependency {name: "serde_json", type: "external", description: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Dependency {name: "tokio::fs", type: "external", description: "Async file system operations"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Configuration {name: "CacheConfig", type: "struct", description: "Cache configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e28)
CREATE (e29:Configuration {name: "CacheMetadata", type: "struct", description: "Cache metadata storage"})
CREATE (doc)-[:MENTIONS]->(e29)
CREATE (e30:Configuration {name: "CollectionCacheInfo", type: "struct", description: "Collection-specific cache information"})
CREATE (doc)-[:MENTIONS]->(e30)
CREATE (e31:Configuration {name: "CacheStats", type: "struct", description: "Cache statistics tracking"})
CREATE (doc)-[:MENTIONS]->(e31)
CREATE (e32:Configuration {name: "CleanupResult", type: "struct", description: "Cache cleanup operation results"})
CREATE (doc)-[:MENTIONS]->(e32)
CREATE (e33:Configuration {name: "ValidationResult", type: "struct", description: "Cache validation results"})
CREATE (doc)-[:MENTIONS]->(e33)
CREATE (e34:Configuration {name: "ValidationLevel", type: "enum", description: "Cache validation levels"})
CREATE (doc)-[:MENTIONS]->(e34)
CREATE (e35:Configuration {name: "ValidationStatus", type: "enum", description: "Cache validation status"})
CREATE (doc)-[:MENTIONS]->(e35)

MATCH (doc:Document {title: "CacheManager Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/incremental.rs
CREATE (doc:Document {
      id: "Incremental Processing System",
      title: "Incremental Processing System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "incremental_processor", language: "Rust", description: "Incremental file processing system with caching and change detection"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "IncrementalProcessor", visibility: "public", description: "Main processor for handling incremental file operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "IncrementalConfig", visibility: "public", description: "Configuration for incremental processing"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "FileChangeDetector", visibility: "public", description: "Detects and manages file system changes"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "FileChangeEvent", visibility: "public", description: "Represents different types of file changes"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ProcessingTask", visibility: "public", description: "Represents a processing task in the queue"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ProcessingOperation", visibility: "public", description: "Defines different types of processing operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "TaskPriority", visibility: "public", description: "Priority levels for processing tasks"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "ReindexReason", visibility: "public", description: "Reasons for triggering a reindex operation"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "ProcessingResult", visibility: "public", description: "Result of processing operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "new", visibility: "public", description: "Create new incremental processor instance"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "start_workers", visibility: "public", description: "Start background worker threads"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "worker_loop", visibility: "private", description: "Main worker loop for processing tasks"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "process_task", visibility: "private", description: "Process individual tasks from the queue"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::path", type: "standard_library", description: "Path and PathBuf for file path handling"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::sync::Arc", type: "standard_library", description: "Atomic reference counting for shared ownership"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "sha2", type: "external_crate", description: "SHA-256 hashing for file integrity"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "tokio", type: "external_crate", description: "Async runtime and file system operations"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "walkdir", type: "external_crate", description: "Directory walking for file discovery"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "max_workers", type: "usize", default: "4", description: "Maximum number of background workers"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "batch_size", type: "usize", default: "10", description: "Number of tasks to process in a batch"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "debounce_duration", type: "Duration", default: "500ms", description: "Debounce time for file change events"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "file_watching_enabled", type: "bool", default: "true", description: "Enable file system watching"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "ignore_patterns", type: "Vec<String>", default: "git, node_modules, target, dist, pycache patterns", description: "File patterns to ignore during processing"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "Incremental Processing System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/cache/advanced_cache.rs
CREATE (doc:Document {
      id: "Advanced Multi-Layer Cache System",
      title: "Advanced Multi-Layer Cache System",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "multi_layer_cache", description: "Advanced multi-layer cache architecture with intelligent eviction policies, preloading, serialization, and distributed analytics"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AdvancedCacheConfig", description: "Main configuration structure for multi-layer cache system", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CacheLayerConfig", description: "Configuration for individual cache layer (L1, L2, L3)", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "GlobalCacheSettings", description: "Global cache settings including statistics, warming, compression, and distributed caching", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CacheWarmingConfig", description: "Configuration for cache warming strategies and intervals", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "WarmingStrategy", description: "Individual warming strategy with type, parameters, and priority", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "CompressionConfig", description: "Configuration for cache compression settings", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "CacheEntry", description: "Generic cache entry with metadata, timestamps, and access tracking", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Enum {name: "WarmingStrategyType", description: "Types of cache warming strategies", variants: "AccessPattern,TimeBased,UserBehavior,DataFreshness,QuerySimilarity,Lz4,Gzip,Brotli,Zstd,Snappy,Lru,Lfu,Ttl,SizeBased,Random,Custom"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Enum {name: "CompressionAlgorithm", description: "Supported compression algorithms", variants: "Lz4,Gzip,Brotli,Zstd,Snappy"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Enum {name: "EvictionPolicy", description: "Cache eviction policies", variants: "Lru,Lfu,Ttl,SizeBased,Random,Custom"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Struct {name: "CacheKey", description: "Cache key structure with equality support", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "new", description: "Create a new cache entry with value, size, and TTL", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "is_expired", description: "Check if cache entry has expired based on TTL", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "record_access", description: "Update access timestamp and increment access count", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "access_frequency", description: "Calculate access frequency based on age and access count", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::hash::{Hash, Hasher}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "std::num::NonZeroUsize", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "anyhow::Result", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "lru::LruCache", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "parking_lot::Mutex", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "tokio::time::{interval, sleep}", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e25)

MATCH (doc:Document {title: "Advanced Multi-Layer Cache System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/bin/vectorizer.rs
CREATE (doc:Document {
      id: "Vectorizer Unified MCP REST API Server",
      title: "Vectorizer Unified MCP REST API Server",
      domain: "software",
      doc_type: "source_code"
    })
CREATE (e0:Module {name: "main", language: "rust", purpose: "Vectorizer Server - MCP + REST API"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "main", return_type: "anyhow::Result<()>", is_async: "true", purpose: "Application entry point"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "Cli", purpose: "Command line interface configuration", attributes: "host,port"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Dependency {name: "clap", type: "external_crate", purpose: "Command line argument parsing"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Dependency {name: "vectorizer", type: "internal_crate", purpose: "Core vectorizer functionality"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "tokio", type: "external_crate", purpose: "Async runtime"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "anyhow", type: "external_crate", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "server_config", host: "0.0.0.0", port: "15002", purpose: "Server network configuration"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Database {name: "vectorizer_storage", format: "Legacy/.vecdb", purpose: "Data persistence and storage"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:API {name: "vectorizer_server", type: "MCP_REST_API", purpose: "Main server API"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "migrate_storage", purpose: "Migrate legacy data format to new .vecdb format", is_async: "false"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Vectorizer Unified MCP REST API Server"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/bin/vectorizer-cli.rs
CREATE (doc:Document {
      id: "Vectorizer CLI - Unified Vectorizer REST API and MCP Server",
      title: "Vectorizer CLI - Unified Vectorizer REST API and MCP Server",
      domain: "software",
      doc_type: "rust_cli_application"
    })
CREATE (e0:Module {name: "vectorizer_cli", description: "Main CLI module for unified vectorizer services", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "main", description: "Entry point for the CLI application", async: "true", return_type: "void"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "run_servers", description: "Starts both REST API and MCP servers", async: "true", parameters: "project: PathBuf,daemon: bool,host: String,port: u16,mcp_port: u16,project: PathBuf,host: String,port: u16,mcp_port: u16,project: PathBuf,_host: String,_port: u16,_mcp_port: u16"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "run_interactive", description: "Runs servers in interactive mode with signal handling", async: "true", parameters: "project: PathBuf,host: String,port: u16,mcp_port: u16"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "run_as_daemon", description: "Runs servers as background daemon/service", async: "true", parameters: "project: PathBuf,_host: String,_port: u16,_mcp_port: u16"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "stop_servers", description: "Stops running servers", async: "true"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "check_status", description: "Checks status of running servers", async: "true"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "install_service", description: "Installs service (Linux)", async: "true"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "uninstall_service", description: "Uninstalls service", async: "true"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "Args", description: "Command line argument parser using clap", attributes: "Parser,Subcommand,Subcommand,Subcommand,Subcommand,Subcommand,Subcommand,Subcommand"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "Commands", description: "Subcommand definitions for CLI", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "Start", description: "Start command for running servers", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "Stop", description: "Stop command for stopping servers", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "Status", description: "Status command for checking server status", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "Install", description: "Install command for Linux service installation", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "Uninstall", description: "Uninstall command for service removal", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Class {name: "Cli", description: "CLI command for running legacy CLI", attributes: "Subcommand"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "clap", version: "latest", description: "Command line argument parsing"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "tokio", version: "latest", description: "Async runtime for Rust"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tracing-subscriber", version: "latest", description: "Structured logging"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "libc", version: "latest", description: "Low-level C library bindings"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "default_project_path", value: "../gov", description: "Default project directory to index"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "default_host", value: "127.0.0.1", description: "Default host for REST API server"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "default_port", value: "15001", description: "Default port for REST API server"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Configuration {name: "default_mcp_port", value: "15002", description: "Default port for MCP server"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:API {name: "REST API Server", description: "REST API server for vectorizer services", protocol: "HTTP", default_endpoint: "http://127.0.0.1:15001"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:API {name: "MCP Server", description: "MCP (Model Context Protocol) server", protocol: "HTTP/SSE", default_endpoint: "http://127.0.0.1:15002/sse"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Script {name: "vectorizer-mcp-server", description: "MCP server binary", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Script {name: "vectorizer-server", description: "REST API server binary", language: "rust"})
CREATE (doc)-[:MENTIONS]->(e28)

MATCH (doc:Document {title: "Vectorizer CLI - Unified Vectorizer REST API and MCP Server"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/utils.rs
CREATE (doc:Document {
      id: "Rust Benchmarking Utilities",
      title: "Rust Benchmarking Utilities",
      domain: "software",
      doc_type: "code_module"
    })
CREATE (e0:Module {name: "benchmarks", description: "Provides benchmarking utilities and statistical analysis functions"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Function {name: "format_duration", description: "Format duration as human-readable string", parameters: "duration: Duration,bytes: u64,ops_per_sec: f64,old_value: f64,new_value: f64,old_time: f64,new_time: f64,speedup: f64,num_threads: usize,values: &[f64],values: &[f64],confidence: f64,values: &[f64],value: f64,values: &[f64],values: &[f64],values: &[f64],window_size: usize,values: &[f64],alpha: f64,values: &[f64],x_values: &[f64],y_values: &[f64],f: F,f: F", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "format_bytes", description: "Format bytes as human-readable string with units", parameters: "bytes: u64", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "format_throughput", description: "Format throughput as human-readable string", parameters: "ops_per_sec: f64", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "percentage_change", description: "Calculate percentage change between two values", parameters: "old_value: f64,new_value: f64", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "speedup_ratio", description: "Calculate speedup ratio between old and new times", parameters: "old_time: f64,new_time: f64", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "efficiency", description: "Calculate efficiency (speedup / number of threads)", parameters: "speedup: f64,num_threads: usize", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "coefficient_of_variation", description: "Calculate coefficient of variation (standard deviation / mean)", parameters: "values: &[f64]", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "confidence_interval", description: "Calculate confidence interval for given values", parameters: "values: &[f64],confidence: f64", return_type: "(f64, f64)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "percentile_rank", description: "Calculate percentile rank of a value", parameters: "values: &[f64],value: f64", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "interquartile_range", description: "Calculate interquartile range (IQR)", parameters: "values: &[f64]", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "detect_outliers", description: "Detect outliers using IQR method", parameters: "values: &[f64]", return_type: "Vec<usize>"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "moving_average", description: "Calculate moving average with specified window size", parameters: "values: &[f64],window_size: usize", return_type: "Vec<f64>"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "exponential_moving_average", description: "Calculate exponential moving average", parameters: "values: &[f64],alpha: f64", return_type: "Vec<f64>"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "linear_trend", description: "Calculate linear trend using regression", parameters: "values: &[f64]", return_type: "(f64, f64)"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "correlation_coefficient", description: "Calculate correlation coefficient between two datasets", parameters: "x_values: &[f64],y_values: &[f64]", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Class {name: "Timer", description: "Timer for measuring operation duration", methods: "new,start,stop,elapsed,is_running"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "measure_time", description: "Measure execution time of a function", parameters: "f: F", return_type: "(R, Duration)"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "measure_time_async", description: "Measure execution time of an async function", parameters: "f: F", return_type: "(R, Duration)"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "get_process_memory", description: "Get current process memory usage in bytes", return_type: "u64"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "std::time", description: "Standard library time module", types: "Duration,Instant"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Rust Benchmarking Utilities"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/system_monitor.rs
CREATE (doc:Document {
      id: "System Monitor Utilities",
      title: "System Monitor Utilities",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "system_monitor", description: "Utilities for CPU and memory monitoring", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "SystemMonitor", description: "System resource monitoring with thread-safe operations", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "SystemSnapshot", description: "Resource usage snapshot with serialization support", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Create new system monitor instance", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "start_monitoring", description: "Start monitoring with specified interval", visibility: "public", parameters: "interval_ms: u64", return_type: "Result<(), String>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "stop_monitoring", description: "Stop monitoring and join thread", visibility: "public", return_type: "Result<(), String>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "get_snapshot", description: "Get current system resource snapshot", visibility: "public", return_type: "SystemSnapshot"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "get_cpu_usage", description: "Get current CPU usage percentage", visibility: "public", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_memory_usage", description: "Get current memory usage in MB", visibility: "public", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_peak_memory", description: "Get peak memory usage in MB", visibility: "public", return_type: "f64"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "is_monitoring", description: "Check if monitoring is active", visibility: "public", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "get_duration", description: "Get monitoring duration", visibility: "public", return_type: "Duration"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "get_cpu_time", description: "Platform-specific CPU time retrieval", visibility: "public", platform: "linux", return_type: "u64"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::sync::atomic", type: "standard_library", purpose: "Atomic operations for thread safety"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::thread", type: "standard_library", purpose: "Threading support"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::time", type: "standard_library", purpose: "Time measurement"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde", type: "external_crate", purpose: "Serialization support"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "chrono", type: "external_crate", purpose: "Date/time formatting"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "System Monitor Utilities"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/runner.rs
CREATE (doc:Document {
      id: "BenchmarkRunner Implementation",
      title: "BenchmarkRunner Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "BenchmarkRunner", language: "Rust", description: "Benchmark runner for HNSW index performance testing"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BenchmarkRunner", visibility: "public", description: "Main benchmark runner struct"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", return_type: "Self", description: "Create new benchmark runner"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "with_system_monitoring", visibility: "public", return_type: "Self", description: "Enable system monitoring"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "benchmark_search", visibility: "public", return_type: "Result<PerformanceMetrics, Error>", description: "Execute search benchmark"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "benchmark_insert", visibility: "public", return_type: "Result<PerformanceMetrics, Error>", description: "Execute insert benchmark"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "benchmark_update", visibility: "public", return_type: "Result<PerformanceMetrics, Error>", description: "Execute update benchmark"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "benchmark_delete", visibility: "public", return_type: "Result<PerformanceMetrics, Error>", description: "Execute delete benchmark"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "benchmark_concurrent_mixed", visibility: "public", return_type: "Result<PerformanceMetrics, Error>", description: "Execute concurrent mixed operations benchmark"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "run_comprehensive_benchmark", visibility: "public", return_type: "Result<Vec<PerformanceMetrics>, Error>", description: "Run comprehensive benchmark suite"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "BenchmarkConfig", description: "Benchmark configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "OptimizedHnswConfig", description: "HNSW index configuration"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "PerformanceMetrics", description: "Performance measurement results"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "TestData", description: "Test data generator"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "OptimizedHnswIndex", description: "HNSW index implementation"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "SystemMonitor", description: "System resource monitoring"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Enum {name: "DistanceMetric", description: "Distance calculation methods"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "BenchmarkRunner Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/reporter.rs
CREATE (doc:Document {
      id: "Vectorizer Benchmark Report Generator",
      title: "Vectorizer Benchmark Report Generator",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "generation", description: "Provides report generation functionality for vectorizer benchmarks"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ReportGenerator", description: "Generates benchmark reports in multiple formats (JSON, CSV, HTML, Markdown)"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create new report generator instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "with_output_directory", description: "Set output directory for generated reports"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "with_system_info", description: "Configure whether to include system information in reports"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "with_detailed_metrics", description: "Configure whether to include detailed metrics in reports"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "with_custom_template", description: "Set custom template for report generation"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "generate_markdown", description: "Generate Markdown format benchmark report"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "std::collections::HashMap", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::fs", type: "Standard Library"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", type: "External Crate"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "crate::benchmark", type: "Internal Module"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "output_directory", type: "String", default: "target/criterion"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "include_system_info", type: "Boolean", default: "true"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "include_detailed_metrics", type: "Boolean", default: "true"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "custom_template", type: "Option<String>", default: "None"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Vectorizer Benchmark Report Generator"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/metrics.rs
CREATE (doc:Document {
      id: "Performance Metrics and Benchmarking System",
      title: "Performance Metrics and Benchmarking System",
      domain: "software",
      doc_type: "Rust Code Documentation"
    })
CREATE (e0:Module {name: "performance_metrics", description: "Performance measurement and benchmarking system for vector operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "OperationMetrics", description: "Metrics for individual operations including latency, throughput, and memory usage", fields: "operation,config,total_operations,total_time_ms,throughput_ops_per_sec,avg_latency_us,p50_latency_us,p95_latency_us,p99_latency_us,min_latency_us,max_latency_us,memory_before_mb,memory_after_mb,memory_delta_mb,cpu_usage_percent,custom_metrics,config,dataset_size,dimension,timestamp,total_duration_ms,system_info,operations,summary,cpu_model,cpu_cores,total_memory_mb,available_memory_mb,os,rust_version,vectorizer_version,total_operations,overall_throughput,avg_latency_us,p95_latency_us,p99_latency_us,peak_memory_mb,avg_cpu_usage"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "PerformanceMetrics", description: "Comprehensive benchmark results container", fields: "config,dataset_size,dimension,timestamp,total_duration_ms,system_info,operations,summary"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "SystemInfo", description: "System hardware and software information", fields: "cpu_model,cpu_cores,total_memory_mb,available_memory_mb,os,rust_version,vectorizer_version"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "BenchmarkSummary", description: "Aggregated benchmark statistics", fields: "total_operations,overall_throughput,avg_latency_us,p95_latency_us,p99_latency_us,peak_memory_mb,avg_cpu_usage"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", description: "Create new OperationMetrics instance", parameters: "operation,config,operation,config,latencies,memory_before_mb,memory_after_mb,name,value,name"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "from_latencies", description: "Calculate metrics from latency measurements", parameters: "operation,config,latencies,memory_before_mb,memory_after_mb"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "add_custom_metric", description: "Add custom metric to operation", parameters: "name,value"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_custom_metric", description: "Retrieve custom metric value", parameters: "name"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::time", description: "Standard library time utilities", version: "built-in"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "serde", description: "Serialization framework", version: "external"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "std::collections::HashMap", description: "Hash map for custom metrics storage", version: "built-in"})
CREATE (doc)-[:MENTIONS]->(e11)

MATCH (doc:Document {title: "Performance Metrics and Benchmarking System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/data_generator.rs
CREATE (doc:Document {
      id: "TestDataGenerator Utilities Module",
      title: "TestDataGenerator Utilities Module",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "Utilities", description: "Provides test data generation utilities for benchmarking", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "TestDataGenerator", description: "Generates synthetic test data for vector benchmarks", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "TestData", description: "Generated test data structure containing vectors, documents, queries and ground truth", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "TestDataMetadata", description: "Metadata about the generated test data", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", description: "Create new test data generator", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "generate_vectors", description: "Generate synthetic vectors for testing", visibility: "public", return_type: "Result<TestData, Error>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "generate_pattern_vectors", description: "Generate vectors with specific patterns for testing", visibility: "public", return_type: "Result<TestData, Error>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "generate_from_real_data", description: "Generate test data from real data sources", visibility: "public", return_type: "Result<TestData, Error>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "generate_for_scenario", description: "Generate test data for specific benchmark scenarios", visibility: "public", return_type: "Result<TestData, Error>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "generate_deterministic_vector", description: "Generate deterministic vector for reproducible testing", visibility: "private", return_type: "Vec<f32>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "generate_random_vector", description: "Generate random vector for testing", visibility: "private", return_type: "Vec<f32>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "generate_gaussian_vector", description: "Generate vector with Gaussian distribution", visibility: "private", return_type: "Vec<f32>"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashMap", type: "Standard Library", purpose: "Key-value storage for metadata properties"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde", type: "External Crate", purpose: "Serialization and deserialization support"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "fastrand", type: "External Crate", purpose: "Fast random number generation"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::benchmark::BenchmarkConfig", type: "Internal Module", purpose: "Benchmark configuration structure"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "BenchmarkConfig", description: "Configuration for benchmark test data generation", type: "Struct"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "VectorPattern", description: "Enum defining different vector generation patterns", type: "Enum"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "BenchmarkScenario", description: "Enum defining different benchmark scenarios", type: "Enum"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "TestDataGenerator Utilities Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/benchmark/config.rs
CREATE (doc:Document {
      id: "Benchmark Configuration Module",
      title: "Benchmark Configuration Module",
      domain: "software",
      doc_type: "Rust Configuration Module"
    })
CREATE (e0:Module {name: "benchmark_config", language: "Rust", description: "Provides benchmark configuration structures and settings"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BenchmarkConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", description: "Main benchmark configuration structure"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "HnswBenchmarkConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "HNSW-specific benchmark configuration"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QuantizationBenchmarkConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Quantization benchmark configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "GpuBenchmarkConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "GPU benchmark configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", visibility: "public", return_type: "Self", description: "Create a new benchmark configuration with default values"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "with_dimensions", visibility: "public", return_type: "Self", parameters: "dimensions: Vec<usize>,vector_counts: Vec<usize>,measurement_time: Duration,sample_size: usize,warm_up_time: Duration,measurement_iterations: usize", description: "Set dimensions for benchmark"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "with_vector_counts", visibility: "public", return_type: "Self", parameters: "vector_counts: Vec<usize>", description: "Set vector counts for benchmark"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "with_measurement_time", visibility: "public", return_type: "Self", parameters: "measurement_time: Duration", description: "Set measurement time for benchmark"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "with_sample_size", visibility: "public", return_type: "Self", parameters: "sample_size: usize", description: "Set sample size for benchmark"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "with_warm_up_time", visibility: "public", return_type: "Self", parameters: "warm_up_time: Duration", description: "Set warm-up time for benchmark"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "with_measurement_iterations", visibility: "public", return_type: "Self", parameters: "measurement_iterations: usize", description: "Set measurement iterations for benchmark"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "serde", version: "latest", features: "derive", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "default_benchmark_config", type: "BenchmarkConfig", description: "Default benchmark configuration values"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "default_hnsw_config", type: "HnswBenchmarkConfig", description: "Default HNSW configuration values"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "default_quantization_config", type: "QuantizationBenchmarkConfig", description: "Default quantization configuration values"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "default_gpu_config", type: "GpuBenchmarkConfig", description: "Default GPU configuration values"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Benchmark Configuration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/validation.rs
CREATE (doc:Document {
      id: "BatchValidator Rust Module",
      title: "BatchValidator Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "validation", language: "rust", description: "Validation operations for batch operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BatchValidator", visibility: "public", description: "Validates batch operations including insert, update, delete, and search"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Constructor for BatchValidator"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "validate_batch_insert", visibility: "public", description: "Validates batch insert operations"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "validate_batch_update", visibility: "public", description: "Validates batch update operations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "validate_batch_delete", visibility: "public", description: "Validates batch delete operations"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "validate_batch_search", visibility: "public", description: "Validates batch search operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "validate_collection_name", visibility: "private", description: "Validates collection name format and constraints"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "validate_batch_size", visibility: "private", description: "Validates batch size against configuration limits"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "validate_vector_data", visibility: "private", description: "Validates vector data including ID, dimensions, and values"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "validate_vector_update", visibility: "private", description: "Validates vector update data"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "validate_vector_id", visibility: "private", description: "Validates vector ID format and constraints"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashSet", type: "standard_library", description: "HashSet for unique ID validation"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "BatchConfig", description: "Configuration for batch operations including max_batch_size"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "Vector", description: "Vector data structure with id and data fields"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "VectorUpdate", description: "Vector update structure with id and optional data"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "SearchQuery", description: "Search query structure for batch search operations"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "BatchError", description: "Error type for batch operation failures"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:API {name: "BatchErrorType", description: "Enumeration of batch error types"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "BatchValidator Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/progress.rs
CREATE (doc:Document {
      id: "Progress Tracking System",
      title: "Progress Tracking System",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "Progress", description: "Progress tracking capabilities for batch operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ProgressTracker", description: "Tracks progress of batch operations with real-time updates"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ProgressBar", description: "Terminal progress bar display component"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "PerformanceMetrics", description: "Performance metrics data structure"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", description: "Create a new progress tracker"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "update_success", description: "Update progress for successful item processing"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "update_failure", description: "Update progress for failed item processing"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "update_batch", description: "Update progress for batch results"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "get_progress", description: "Get current progress data"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "is_complete", description: "Check if processing is complete"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "update_metrics", description: "Update performance metrics"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "start_auto_updates", description: "Start automatic progress updates"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "display", description: "Display progress bar in terminal"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::time", description: "Standard library time utilities"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "serde", description: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "tokio", description: "Async runtime and synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::batch", description: "Internal batch processing module"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "BatchConfig", description: "Batch processing configuration"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "BatchProgress", description: "Progress tracking data structure"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Progress Tracking System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/processor.rs
CREATE (doc:Document {
      id: "Batch Processing System - Vector and Document Processors",
      title: "Batch Processing System - Vector and Document Processors",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "batch", description: "Batch processing operations for vectors and documents"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "VectorBatchProcessor", description: "Processes vectors in batches with validation and normalization", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "DocumentBatchProcessor", description: "Processes documents in batches with text cleaning and tokenization", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "GenericBatchProcessor", description: "Generic batch processor for any type with custom processing function", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "VectorProcessorConfig", description: "Configuration for vector batch processing", fields: "dimension,normalize,validate,timeout_seconds,max_length,clean_text,tokenize,language"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "DocumentProcessorConfig", description: "Configuration for document batch processing", fields: "max_length,clean_text,tokenize,language"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ProcessedVector", description: "Result of vector processing containing original and processed data", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "ProcessedDocument", description: "Result of document processing containing cleaned and tokenized data", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "normalize_vector", description: "Normalizes a vector", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "clean_text", description: "Cleans text content", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "tokenize_text", description: "Tokenizes text based on language", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tokio", version: "latest", purpose: "Async runtime and synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "async_trait", version: "latest", purpose: "Async trait support"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Batch Processing System - Vector and Document Processors"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/parallel.rs
CREATE (doc:Document {
      id: "Parallel Processor Module",
      title: "Parallel Processor Module",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "parallel", description: "Provides parallel processing capabilities for batch operations", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ParallelProcessor", description: "Manages parallel processing of batch items with configurable concurrency", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Creates a new ParallelProcessor instance", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "process_chunks", description: "Processes items in parallel chunks", visibility: "public", return_type: "BatchResult<Vec<R>>", generic: "true"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "process_items", description: "Processes individual items in parallel", visibility: "public", return_type: "BatchResult<Vec<R>>", generic: "true"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "BatchConfig", description: "Configuration for batch processing operations", fields: "chunk_size,parallel_workers"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "tokio", description: "Async runtime for parallel task execution", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "BatchError", description: "Error handling for batch operations", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Test {name: "test_parallel_processor_creation", description: "Tests ParallelProcessor creation", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Test {name: "test_process_chunks_empty_input", description: "Tests chunk processing with empty input", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Test {name: "test_process_chunks_single_chunk", description: "Tests processing a single chunk", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_process_chunks_multiple_chunks", description: "Tests processing multiple chunks", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_process_chunks_with_errors", description: "Tests error handling in chunk processing", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_process_items_empty_input", description: "Tests individual item processing with empty input", type: "unit_test"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "Parallel Processor Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/operations.rs
CREATE (doc:Document {
      id: "Vector Database Batch Operations Module",
      title: "Vector Database Batch Operations Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "batch_operations", language: "rust", description: "Defines batch operations for vector database (insert, update, delete, search)"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "VectorUpdate", visibility: "public", description: "Represents a vector update operation with optional vector and payload data"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "BatchStatus", visibility: "public", description: "Tracks the status of batch operations including progress and timestamps"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "BatchInsertOperation", visibility: "public", description: "Handles batch insertion of vectors into collections"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "BatchUpdateOperation", visibility: "public", description: "Handles batch updates of vectors (not yet implemented)"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "BatchDeleteOperation", visibility: "public", description: "Handles batch deletion of vectors (not yet implemented)"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "BatchSearchOperation", visibility: "public", description: "Handles batch search operations across vector collections"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Trait {name: "BatchOperationTrait", visibility: "public", description: "Async trait defining the interface for batch operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Type {name: "BatchResult", description: "Generic result type for batch operations that can return BatchError"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "async_trait::async_trait", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "tokio::sync::RwLock", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "crate::models::Vector", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "crate::search::SearchQuery", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "crate::db::VectorStore", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "crate::embedding::EmbeddingManager", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "crate::error::Result", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "crate::models::SearchResult", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Vector Database Batch Operations Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/mod.rs
CREATE (doc:Document {
      id: "Rust Batch Processing System",
      title: "Rust Batch Processing System",
      domain: "software",
      doc_type: "code_structure"
    })
CREATE (e0:Module {name: "batch_processing", language: "rust", description: "Large-scale batch processing system with concurrent workers"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BatchConfig", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,PartialEq,Eq,Hash,Debug,Clone,Serialize,Deserialize", description: "Configuration for batch processing operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "BatchResult", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Result container for batch processing operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "MemoryStats", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Memory usage statistics for batch operations"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "BatchError", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Error information for failed batch items"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "BatchErrorType", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,PartialEq,Eq,Hash", description: "Enumeration of possible batch error types"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "BatchProgress", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Progress tracking for batch operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "BatchManager", visibility: "public", description: "Main manager for batch processing operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Trait {name: "BatchProcessor", visibility: "public", description: "Trait defining batch processing interface"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde", version: "latest", type: "external", description: "Serialization/deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "async_trait", version: "latest", type: "external", description: "Async trait support"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "num_cpus", version: "latest", type: "external", description: "CPU count detection"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "max_workers", type: "usize", default: "num_cpus::get()", description: "Maximum number of concurrent workers"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "batch_size", type: "usize", default: "1000", description: "Batch size for processing"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "max_retries", type: "u32", default: "3", description: "Maximum retry attempts for failed items"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "operation_timeout", type: "u64", default: "300", description: "Timeout for individual batch operations in seconds"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Configuration {name: "enable_progress", type: "bool", default: "true", description: "Enable progress tracking"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "enable_parallel", type: "bool", default: "true", description: "Enable parallel processing"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "memory_limit_mb", type: "usize", default: "512", description: "Memory limit per worker in MB"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Rust Batch Processing System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/error.rs
CREATE (doc:Document {
      id: "Batch Processing Error Handling Module",
      title: "Batch Processing Error Handling Module",
      domain: "software",
      doc_type: "Rust source code module"
    })
CREATE (e0:Module {name: "batch_error_handling", language: "Rust", description: "Comprehensive error handling for batch processing operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BatchProcessingError", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", description: "Comprehensive error structure for batch processing operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ErrorContext", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize", description: "Additional context information for error tracking"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ErrorAggregator", visibility: "public", description: "Aggregates and manages multiple batch processing errors"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "ErrorRecoveryStrategy", visibility: "public", description: "Defines different strategies for error recovery"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "RecoveryAction", visibility: "public", description: "Actions that can be taken during error recovery"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", class: "BatchProcessingError", visibility: "public", description: "Create a new batch processing error"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "with_context", class: "BatchProcessingError", visibility: "public", description: "Create error with additional context"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "increment_retry", class: "BatchProcessingError", visibility: "public", description: "Increment retry count"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "is_retryable", class: "BatchProcessingError", visibility: "public", description: "Check if error is retryable based on error type"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_retry_delay", class: "BatchProcessingError", visibility: "public", description: "Get retry delay based on error type and retry count"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "new", class: "ErrorAggregator", visibility: "public", description: "Create a new error aggregator"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "add_error", class: "ErrorAggregator", visibility: "public", description: "Add error to aggregator"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "get_errors", class: "ErrorAggregator", visibility: "public", description: "Get all collected errors"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "get_error_counts", class: "ErrorAggregator", visibility: "public", description: "Get error counts by type"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "total_errors", class: "ErrorAggregator", visibility: "public", description: "Get total error count"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "most_common_error_type", class: "ErrorAggregator", visibility: "public", description: "Get most common error type"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "is_error_limit_exceeded", class: "ErrorAggregator", visibility: "public", description: "Check if error limit exceeded"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "clear", class: "ErrorAggregator", visibility: "public", description: "Clear all errors and counts"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "fmt", class: "BatchProcessingError", visibility: "public", description: "Format error for display"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde", type: "external_crate", description: "Serialization and deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "chrono", type: "external_crate", description: "Date and time handling"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "serde_json", type: "external_crate", description: "JSON serialization support"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "std", type: "standard_library", description: "Rust standard library"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "crate::batch", type: "internal_module", description: "Internal batch processing module"})
CREATE (doc)-[:MENTIONS]->(e24)

MATCH (doc:Document {title: "Batch Processing Error Handling Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/batch/config.rs
CREATE (doc:Document {
      id: "Batch Configuration Module",
      title: "Batch Configuration Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "batch_config", language: "rust", description: "Configuration module for batch operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BatchConfigBuilder", type: "builder", description: "Builder pattern for creating BatchConfig instances"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "BatchPresets", type: "utility", description: "Predefined configuration presets for different use cases"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "BatchConfigValidator", type: "validator", description: "Validates batch configuration parameters"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Configuration {name: "BatchConfig", type: "struct", description: "Main configuration structure for batch operations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "new", description: "Create a new configuration builder"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "max_workers", description: "Set maximum number of workers"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "batch_size", description: "Set batch size"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "max_retries", description: "Set maximum retry attempts"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "operation_timeout", description: "Set operation timeout duration"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "enable_progress", description: "Enable or disable progress tracking"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "enable_parallel", description: "Enable or disable parallel processing"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "memory_limit_mb", description: "Set memory limit in megabytes"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "build", description: "Build the final BatchConfig instance"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "fast", description: "Fast processing preset (speed over memory efficiency)"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "balanced", description: "Balanced preset (good balance of speed and memory)"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "memory_efficient", description: "Memory-efficient preset"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "high_throughput", description: "High-throughput preset"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "sequential", description: "Sequential processing preset (no parallelism)"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "real_time", description: "Real-time preset (low latency)"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "validate", description: "Validate a batch configuration"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "optimize_for_system", description: "Optimize configuration for current system resources"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Function {name: "recommend_for_workload", description: "Get recommended configuration for specific workload type"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "serde", type: "external", description: "Serialization/deserialization library"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "num_cpus", type: "external", description: "CPU count detection library"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "crate::batch", type: "internal", description: "Internal batch module"})
CREATE (doc)-[:MENTIONS]->(e25)

MATCH (doc:Document {title: "Batch Configuration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/auth/roles.rs
CREATE (doc:Document {
      id: "Role-based Access Control (RBAC) System",
      title: "Role-based Access Control (RBAC) System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "rbac", language: "Rust", description: "Role-based access control system with permissions and roles"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "Role", type: "enum", visibility: "public", traits: "Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize,Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize,Debug,Clone,Debug"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "Permission", type: "enum", visibility: "public", traits: "Debug,Clone,PartialEq,Eq,Hash,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "AccessContext", type: "struct", visibility: "public", traits: "Debug,Clone"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "PermissionChecker", type: "struct", visibility: "public", traits: "Debug"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "permissions", visibility: "public", return_type: "Vec<Permission>", parameters: "&self,&self,permission: &Permission,&self,&self,other_role: &Role,&self,&self,user_id: String,roles: Vec<Role>,mut self,collection: String,mut self,resource: String,&self,permissions: &[Permission],&self,permissions: &[Permission],&self,&self,&self"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "has_permission", visibility: "public", return_type: "bool", parameters: "&self,permission: &Permission"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "hierarchy_level", visibility: "public", return_type: "u8", parameters: "&self"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "can_manage_role", visibility: "public", return_type: "bool", parameters: "&self,other_role: &Role"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "description", visibility: "public", return_type: "&'static str", parameters: "&self"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "resource_type", visibility: "public", return_type: "&'static str", parameters: "&self"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "new", visibility: "public", return_type: "Self", parameters: "user_id: String,roles: Vec<Role>"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "with_collection", visibility: "public", return_type: "Self", parameters: "mut self,collection: String"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "with_resource", visibility: "public", return_type: "Self", parameters: "mut self,resource: String"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "has_any_permission", visibility: "public", return_type: "bool", parameters: "&self,permissions: &[Permission]"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "has_all_permissions", visibility: "public", return_type: "bool", parameters: "&self,permissions: &[Permission]"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "all_permissions", visibility: "public", return_type: "HashSet<Permission>", parameters: "&self"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "is_admin", visibility: "public", return_type: "bool", parameters: "&self"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "can_admin", visibility: "public", return_type: "bool", parameters: "&self"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "std::collections::HashSet", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Role-based Access Control (RBAC) System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/auth/mod.rs
CREATE (doc:Document {
      id: "Authorization Vectorizer - JWT-based API Management",
      title: "Authorization Vectorizer - JWT-based API Management",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "authorization", description: "JWT-based API management system", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AuthConfig", description: "Configuration for authentication system", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Debug"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "UserClaims", description: "JWT token claims structure", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ApiKey", description: "API key data structure", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "RateLimitInfo", description: "Rate limiting information", visibility: "public", traits: "Debug,Clone"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "AuthManager", description: "Main authentication manager", visibility: "public", traits: "Debug"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "new", description: "Create new authentication manager", visibility: "public", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "new_default", description: "Create manager with default config", visibility: "public", return_type: "Self"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "create_api_key", description: "Generate API key for user", visibility: "public", return_type: "Result<(String, ApiKey)>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "validate_api_key", description: "Validate API key and return user claims", visibility: "public", return_type: "Result<UserClaims>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "generate_jwt", description: "Generate JWT token for user", visibility: "public", return_type: "Result<String>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "validate_jwt", description: "Validate JWT token", visibility: "public", return_type: "Result<UserClaims>"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "check_rate_limit", description: "Check API key rate limiting", visibility: "private", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Key-value storage for rate limits"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::sync::Arc", type: "standard_library", purpose: "Atomic reference counting"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "api_keys::ApiKeyManager", type: "internal_module", purpose: "API key management"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "jwt::JwtManager", type: "internal_module", purpose: "JWT token operations"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "middleware::AuthMiddleware", type: "internal_module", purpose: "Authentication middleware"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "roles::{Permission, Role}", type: "internal_module", purpose: "Role-based access control"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", purpose: "Serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "tokio::sync::RwLock", type: "external_crate", purpose: "Async read-write lock"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "crate::error::{Result, VectorizerError}", type: "internal_module", purpose: "Error handling"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "jwt_secret", type: "String", default: "vectorizer-default-secret-key-change-in-production", description: "JWT secret key for token signing"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "jwt_expiration", type: "u64", default: "3600", description: "JWT token expiration time in seconds"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Configuration {name: "api_key_length", type: "usize", default: "32", description: "API key length"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Configuration {name: "rate_limit_per_minute", type: "u32", default: "100", description: "Rate limiting: requests per minute per API key"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Configuration {name: "rate_limit_per_hour", type: "u32", default: "1000", description: "Rate limiting: requests per hour per API key"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Configuration {name: "enabled", type: "bool", default: "true", description: "Enable authentication"})
CREATE (doc)-[:MENTIONS]->(e27)

MATCH (doc:Document {title: "Authorization Vectorizer - JWT-based API Management"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/auth/middleware.rs
CREATE (doc:Document {
      id: "Axum Authentication Middleware System",
      title: "Axum Authentication Middleware System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "auth_middleware", language: "Rust", framework: "Axum"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AuthState", visibility: "public", purpose: "Authentication context container"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "AuthMiddleware", visibility: "public", purpose: "Core authentication middleware"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "RequireAuthMiddleware", visibility: "public", purpose: "Mandatory authentication middleware"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "RequireRoleMiddleware", visibility: "public", purpose: "Role-based access control middleware"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "RequirePermissionMiddleware", visibility: "public", purpose: "Permission-based access control middleware"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "RateLimitMiddleware", visibility: "public", purpose: "Rate limiting middleware"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "AuthErrorResponse", visibility: "public", purpose: "Authentication error response structure"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "extract_auth", visibility: "public", purpose: "Extract authentication from request"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "authenticate_request", visibility: "private", purpose: "Core authentication logic"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "require_auth", visibility: "public", purpose: "Enforce authentication requirement"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "require_role", visibility: "public", purpose: "Enforce role-based access"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "require_permission", visibility: "public", purpose: "Enforce permission-based access"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "rate_limit", visibility: "public", purpose: "Apply rate limiting"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "axum", type: "external", purpose: "Web framework"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "AuthManager", type: "internal", purpose: "Authentication management"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "UserClaims", type: "internal", purpose: "User authentication claims"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "Role", type: "internal", purpose: "User role definition"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "Permission", type: "internal", purpose: "Permission definition"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:API {name: "JWT Authentication", type: "Bearer Token", purpose: "JSON Web Token authentication"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:API {name: "API Key Authentication", type: "Query Parameter", purpose: "API key based authentication"})
CREATE (doc)-[:MENTIONS]->(e20)

MATCH (doc:Document {title: "Axum Authentication Middleware System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/auth/jwt.rs
CREATE (doc:Document {
      id: "JWT Authentication Module",
      title: "JWT Authentication Module",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "JWT Authentication", description: "Provides HMAC-SHA256 JWT token operations for user authentication", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "JwtManager", description: "JWT operations manager", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", description: "Create a new JWT manager", visibility: "public", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "generate_token", description: "Generate JWT token for user", visibility: "public", return_type: "Result<String>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "validate_token", description: "Validate and decode JWT token", visibility: "public", return_type: "Result<UserClaims>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "refresh_token", description: "Refresh token with new expiration", visibility: "public", return_type: "Result<String>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "expiration", description: "Get token expiration time", visibility: "public", return_type: "u64"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "jsonwebtoken", version: "latest", purpose: "JWT encoding/decoding operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "serde", version: "latest", purpose: "Serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "std::time", version: "standard", purpose: "System time operations"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "JWT Secret", description: "Secret key for signing tokens", constraint: "Must be 32 characters long"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "Token Expiration", description: "Token expiration time in seconds", type: "u64"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Test {name: "test_jwt_manager_creation", description: "Test JWT manager creation with valid secret"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_jwt_manager_short_secret", description: "Test JWT manager creation with invalid short secret"})
CREATE (doc)-[:MENTIONS]->(e13)

MATCH (doc:Document {title: "JWT Authentication Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/auth/api_keys.rs
CREATE (doc:Document {
      id: "API Key Manager Implementation",
      title: "API Key Manager Implementation",
      domain: "software",
      doc_type: "rust_source_code"
    })
CREATE (e0:Module {name: "api_management", description: "API key management functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "ApiKeyManager", visibility: "public", description: "Manages API keys with storage, generation, and validation"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "public", description: "Create a new API key manager", parameters: "key_length: usize,key: &str,user_id: &str,name: &str,permissions: Vec<Permission>,expires_at: Option<u64>,api_key: &str,key_id: &str,user_id: &str,key_id: &str,key_id: &str", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "generate_key", visibility: "public", description: "Generate a new API key", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "hash_key", visibility: "public", description: "Hash API key using SHA256", parameters: "key: &str", return_type: "String"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "create_key", visibility: "public", description: "Create API key for user", parameters: "user_id: &str,name: &str,permissions: Vec<Permission>,expires_at: Option<u64>", return_type: "Result<(String, ApiKey)>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "validate_key", visibility: "public", description: "Validate API key and return key info", parameters: "api_key: &str", return_type: "Result<ApiKey>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "update_last_used", visibility: "public", description: "Update last used timestamp for key", parameters: "key_id: &str", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "list_keys_for_user", visibility: "public", description: "List all keys for a user", parameters: "user_id: &str", return_type: "Result<Vec<ApiKey>>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "revoke_key", visibility: "public", description: "Revoke an API key", parameters: "key_id: &str", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "get_key_info", visibility: "public", description: "Get key information by ID", parameters: "key_id: &str", return_type: "Result<ApiKey>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "list_all_keys", visibility: "public", description: "List all keys (admin function)", return_type: "Result<Vec<ApiKey>>"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "cleanup_expired_keys", visibility: "public", description: "Clean up expired keys", return_type: "Result<usize>"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_api_key_manager_creation", description: "Test API key manager creation with valid length"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "test_api_key_manager_short_length", description: "Test API key manager creation with invalid short length"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "sha2", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "tokio", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "uuid", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "rand", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "chrono", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "key_length", type: "usize", description: "Length of generated API keys", validation: "minimum 16 characters"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "API Key Manager Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/api/mod.rs
CREATE (doc:Document {
      id: "Advanced API Integration Layer",
      title: "Advanced API Integration Layer",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "advanced_api", description: "Advanced API integration layer providing multiple API types and features", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:API {name: "RESTful API", type: "REST", description: "RESTful API implementation"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:API {name: "OpenAPI/Swagger", type: "OpenAPI", description: "OpenAPI/Swagger API specification"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:API {name: "GraphQL API", type: "GraphQL", description: "GraphQL API implementation"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:API {name: "WebSocket", type: "WebSocket", description: "WebSocket API implementation"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Configuration {name: "API versioning", type: "versioning", description: "API versioning configuration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Configuration {name: "Rate limiting", type: "rate_limiting", description: "Rate limiting configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Configuration {name: "API monitoring", type: "monitoring", description: "API monitoring configuration"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Library {name: "SDK generation", type: "code_generation", description: "SDK generation libraries"})
CREATE (doc)-[:MENTIONS]->(e8)

MATCH (doc:Document {title: "Advanced API Integration Layer"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/api/advanced_api.rs
CREATE (doc:Document {
      id: "API Integration Module",
      title: "API Integration Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "api_integration", language: "rust", description: "API integration module with server, configuration, and middleware support"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "AdvancedApiServer", visibility: "public", description: "Main API server struct with configuration, routes, middleware, and analytics"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "ApiConfig", visibility: "public", description: "API configuration struct containing server, security, and documentation settings"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "ServerConfig", visibility: "public", description: "Server configuration with host, port, timeout, and CORS settings"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "CorsConfig", visibility: "public", description: "CORS configuration for cross-origin resource sharing"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "ApiSettings", visibility: "public", description: "API settings including title, version, and base path configuration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "ApiSecurityConfig", visibility: "public", description: "API security configuration with authentication and authorization settings"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "AuthenticationMethod", visibility: "public", description: "Enum for different authentication methods (API key, JWT, OAuth2, etc.)"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "AuthorizationModel", visibility: "public", description: "Enum for authorization models (RBAC, ABAC, PBAC)"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "RateLimitingConfig", visibility: "public", description: "Rate limiting configuration with strategy and limits"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "RateLimitingStrategy", visibility: "public", description: "Enum for rate limiting strategies (FixedWindow, SlidingWindow, TokenBucket, LeakyBucket)"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "RateLimit", visibility: "public", description: "Individual rate limit configuration with type, value, and scope"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "RateLimitType", visibility: "public", description: "Enum for rate limit types (per second, minute, hour, day)"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "RateLimitScope", visibility: "public", description: "Enum for rate limit scopes (Global, PerIp, PerUser, PerApiKey)"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Standard HashMap collection"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::sync::{Arc, RwLock}", type: "standard_library", description: "Thread-safe reference counting and read-write locks"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::time::{Duration, Instant}", type: "standard_library", description: "Time duration and instant types"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "anyhow::Result", type: "external_crate", description: "Error handling Result type"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "serde::{Deserialize, Serialize}", type: "external_crate", description: "Serialization and deserialization traits"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "tokio::sync::{mpsc, oneshot}", type: "external_crate", description: "Tokio async synchronization primitives"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "tokio::time::{interval, sleep}", type: "external_crate", description: "Tokio async time utilities"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "crate::error::VectorizerError", type: "internal_crate", description: "Custom error type from the same crate"})
CREATE (doc)-[:MENTIONS]->(e21)

MATCH (doc:Document {title: "API Integration Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/cache/warm_store.rs
CREATE (doc:Document {
      id: "WarmStore Implementation",
      title: "WarmStore Implementation",
      domain: "software",
      doc_type: "implementation"
    })
CREATE (e0:Module {name: "WarmStore", description: "Medium-term storage implementation with memory-mapped files and sharding"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "WarmStore", visibility: "pub", description: "Warm storage implementation with hash-based indexing and memory mapping"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "new", visibility: "pub", description: "Create a new warm store instance"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "get", visibility: "pub", description: "Retrieve content by hash from the store"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "put", visibility: "pub", description: "Store content with hash as key"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "clear", visibility: "pub", description: "Clear all stored content and remove files"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "get_or_create_mmap", visibility: "private", description: "Get or create memory-mapped file for given path"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "load_index", visibility: "private", description: "Load index from disk"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "save_index", visibility: "private", description: "Save index to disk"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "len", visibility: "pub", description: "Get number of entries in store"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "is_empty", visibility: "pub", description: "Check if store is empty"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Test {name: "test_warm_store_basic", description: "Basic functionality test for warm store"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::fs", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::io", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::path", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "anyhow", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "memmap2", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "parking_lot", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "crate::normalization::ContentHash", type: "internal_module"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "tempfile", type: "test_dependency"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "shard_count", value: "16", description: "Number of shard files for content distribution"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Configuration {name: "index_file", value: "index.bin", description: "Filename for storing the hash index"})
CREATE (doc)-[:MENTIONS]->(e23)

MATCH (doc:Document {title: "WarmStore Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/cache/mod.rs
CREATE (doc:Document {
      id: "Multi-tier Cache Manager Architecture",
      title: "Multi-tier Cache Manager Architecture",
      domain: "software",
      doc_type: "architecture_documentation"
    })
CREATE (e0:Module {name: "vectorizer::normalization::cache", description: "Multi-tier caching system with hot, warm, and cold storage tiers"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheManager", description: "Multi-tier cache manager coordinating hot, warm, and cold storage"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CacheConfig", description: "Configuration structure for cache manager settings"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "new", description: "Constructor for creating a new cache manager instance"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "get_normalized", description: "Retrieve normalized content from cache with tier promotion"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "put_normalized", description: "Store normalized content in all cache tiers"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Dependency {name: "blob_store", description: "Cold storage implementation for compressed data"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Dependency {name: "hot_cache", description: "Hot cache implementation using LFU algorithm"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Dependency {name: "warm_store", description: "Warm storage implementation using memory-mapped files"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "metrics", description: "Cache metrics and statistics collection"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Configuration {name: "hot_cache_size", description: "Maximum size of hot cache in bytes (default: 100MB)"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Configuration {name: "warm_store_path", description: "Path to warm store directory (default: data/cache/warm)"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Configuration {name: "cold_store_path", description: "Path to cold store directory (default: data/cache/cold)"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Configuration {name: "compression_level", description: "Compression level for cold storage (1-22, default: 3)"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Configuration {name: "enable_metrics", description: "Enable cache metrics collection (default: true)"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "CacheManager::new", description: "Public constructor API for creating cache instances"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "CacheManager::get_normalized", description: "Public API for retrieving cached content"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:API {name: "CacheManager::put_normalized", description: "Public API for storing content in cache"})
CREATE (doc)-[:MENTIONS]->(e17)

MATCH (doc:Document {title: "Multi-tier Cache Manager Architecture"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/cache/metrics.rs
CREATE (doc:Document {
      id: "Cache Metrics and Observability Module",
      title: "Cache Metrics and Observability Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "observability", description: "Provides cache metrics collection and latency tracking functionality"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheMetrics", description: "Thread-safe metrics collector for cache operations with tier-based tracking"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "CacheStats", description: "Snapshot structure containing aggregated cache statistics"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "LatencyTracker", properties: "[object Object]"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", description: "Constructor for CacheMetrics with optional enabling"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "record_hit", description: "Records cache hit for specified tier (hot/warm/cold)"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "record_miss", description: "Records cache miss event"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "record_write", description: "Records cache write operation"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "record_eviction", description: "Records cache eviction event"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "record_error", description: "Records cache error event"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "record_latency", description: "Records latency duration for specified tier"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "stats", description: "Generates comprehensive cache statistics snapshot"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "reset", description: "Resets all metrics counters to zero"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "std::sync::atomic", description: "Atomic operations for thread-safe counters"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::time", description: "Duration and Instant for timing operations"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "parking_lot::RwLock", description: "Reader-writer lock for latency tracker access"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "Cache Metrics and Observability Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/cache/hot_cache.rs
CREATE (doc:Document {
      id: "Hot LFU (Least Frequently Used) Cache Implementation",
      title: "Hot LFU (Least Frequently Used) Cache Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "lfu_cache", language: "Rust", description: "Hot LFU (Least Frequently Used) cache implementation with size-based eviction"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "CacheEntry", visibility: "public", description: "Represents a cache entry with value, frequency, and size tracking"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "LfuCache", visibility: "public", description: "Main LFU cache implementation with thread-safe operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "LfuStats", visibility: "public", description: "Statistics structure for cache metrics"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", visibility: "public", description: "Create a new LFU cache with maximum size in bytes"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get", visibility: "public", description: "Retrieve value and increment frequency"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "put", visibility: "public", description: "Insert or update cache entry with size-based eviction"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "remove", visibility: "public", description: "Remove entry from cache"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "clear", visibility: "public", description: "Clear all entries from cache"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "size", visibility: "public", description: "Get current cache size in bytes"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "len", visibility: "public", description: "Get number of entries in cache"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "is_empty", visibility: "public", description: "Check if cache is empty"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "evict", visibility: "public", description: "Evict least frequently used entries"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "stats", visibility: "public", description: "Get cache statistics"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Test {name: "test_lfu_basic", description: "Basic functionality test for LFU cache"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Test {name: "test_lfu_update", description: "Test for cache update functionality"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Hash map for key-value storage"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::hash::Hash", type: "standard_library", description: "Hash trait for key hashing"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "parking_lot::RwLock", type: "external_crate", description: "Reader-writer lock for thread safety"})
CREATE (doc)-[:MENTIONS]->(e18)

MATCH (doc:Document {title: "Hot LFU (Least Frequently Used) Cache Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/normalization/cache/blob_store.rs
CREATE (doc:Document {
      id: "Zstandard BlobStore Implementation",
      title: "Zstandard BlobStore Implementation",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "zstandard", description: "Zstandard compression-based blob storage system"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "BlobEntry", description: "Metadata structure for blob entries", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "BlobStore", description: "Cold storage blob store with compression", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "CompressionStats", description: "Statistics about compression performance", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "new", description: "Create a new blob store", visibility: "public", return_type: "Result<Self>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "get", description: "Retrieve blob data by hash", visibility: "public", return_type: "Result<Option<Vec<u8>>>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "put", description: "Store blob data with compression", visibility: "public", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "clear", description: "Clear all stored blobs", visibility: "public", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "load_index", description: "Load index from disk", visibility: "private", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "save_index", description: "Save index to disk", visibility: "private", return_type: "Result<()>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "len", description: "Get number of stored blobs", visibility: "public", return_type: "usize"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Function {name: "is_empty", description: "Check if store is empty", visibility: "public", return_type: "bool"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "compression_stats", description: "Get compression statistics", visibility: "public", return_type: "CompressionStats"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Test {name: "test_blob_store_basic", description: "Basic functionality test for blob store", framework: "tokio"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashMap", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::fs", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "std::io", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Dependency {name: "std::path", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Dependency {name: "std::sync::Arc", type: "standard_library"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Dependency {name: "anyhow", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "parking_lot::RwLock", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "serde", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Dependency {name: "zstd", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Dependency {name: "bincode", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Dependency {name: "tempfile", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Dependency {name: "tokio", type: "external_crate"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Configuration {name: "compression_level", type: "i32", range: "1-22"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Configuration {name: "base_path", type: "PathBuf", description: "Base directory for blob files"})
CREATE (doc)-[:MENTIONS]->(e27)

MATCH (doc:Document {title: "Zstandard BlobStore Implementation"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/search.rs
CREATE (doc:Document {
      id: "Qdrant Search Models and Structures",
      title: "Qdrant Search Models and Structures",
      domain: "software",
      doc_type: "Rust Module Documentation"
    })
CREATE (e0:Module {name: "models", language: "Rust", description: "Data structures for Qdrant search operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantSearchRequest", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", description: "Request structure for Qdrant search operations"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantSearchResponse", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Response structure for Qdrant search operations"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QdrantScoredPoint", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Scored point result from Qdrant search"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QdrantLookupLocation", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Location specification for Qdrant lookup operations"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QdrantRecommendRequest", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Request structure for Qdrant recommendation operations"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QdrantRecommendStrategy", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Strategy enum for Qdrant recommendation operations"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "QdrantRecommendResponse", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Response structure for Qdrant recommendation operations"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "QdrantScrollRequest", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", description: "Request structure for Qdrant scroll operations"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Dependency {name: "serde", version: "latest", type: "external_crate", usage: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Dependency {name: "std::collections::HashMap", type: "standard_library", usage: "Key-value storage for payload data"})
CREATE (doc)-[:MENTIONS]->(e10)

MATCH (doc:Document {title: "Qdrant Search Models and Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/point.rs
CREATE (doc:Document {
      id: "Qdrant Rust Models and Structures",
      title: "Qdrant Rust Models and Structures",
      domain: "software",
      doc_type: "Rust source code - data models and API structures"
    })
CREATE (e0:Module {name: "models", description: "Data structures and models for Qdrant vector database operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantPointStruct", description: "Main structure representing a point in Qdrant with ID, vector, and payload", fields: "id,vector,payload,points,wait,points,wait,ids,with_payload,with_vector,filter,limit,offset,with_payload,with_vector,filter,exact,text,type,any,except,key,key,operation_id,status,operation_id,status,result"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantPointId", description: "Point identifier supporting numeric and UUID formats", variants: "Numeric,Uuid,Dense,Named,String,Integer,Float,Boolean,Array,Object,Null,Value,Text,Any,Except,exact,word,prefix"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QdrantVector", description: "Vector representation supporting dense and named vectors", variants: "Dense,Named"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QdrantValue", description: "Flexible value type supporting multiple data types", variants: "String,Integer,Float,Boolean,Array,Object,Null"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QdrantUpsertPointsRequest", description: "Request structure for upserting points", fields: "points,wait"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QdrantDeletePointsRequest", description: "Request structure for deleting points", fields: "points,wait"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "QdrantRetrievePointsRequest", description: "Request structure for retrieving points", fields: "ids,with_payload,with_vector"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "QdrantScrollPointsRequest", description: "Request structure for scrolling through points", fields: "filter,limit,offset,with_payload,with_vector"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "QdrantCountPointsRequest", description: "Request structure for counting points", fields: "filter,exact"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "QdrantMatch", description: "Matching condition for filtering", variants: "Value,Text,Any,Except"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "QdrantTextMatch", description: "Text matching condition", fields: "text,type"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "QdrantTextMatchType", description: "Type of text matching", variants: "exact,word,prefix"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "QdrantAnyMatch", description: "Match any of the provided values", fields: "any"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "QdrantExceptMatch", description: "Exclude specified values", fields: "except"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Class {name: "QdrantIsNull", description: "Check if field is null", fields: "key"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Class {name: "QdrantIsEmpty", description: "Check if field is empty", fields: "key"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Class {name: "QdrantUpsertPointsResponse", description: "Response for upsert operations", fields: "operation_id,status"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Class {name: "QdrantDeletePointsResponse", description: "Response for delete operations", fields: "operation_id,status"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Class {name: "QdrantRetrievePointsResponse", description: "Response for retrieve operations", fields: "result"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Dependency {name: "std::collections::HashMap", version: "standard", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:API {name: "Qdrant Vector Database API", description: "REST API for vector database operations", operations: "upsert,delete,retrieve,scroll,count"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "Qdrant Rust Models and Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/mod.rs
CREATE (doc:Document {
      id: "Qdrant API compatibility models",
      title: "Qdrant API compatibility models",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "qdrant_api_compatibility", description: "Provides data structures compatible with Qdrant's API for seamless integration migration to Qdrant Vectorizer"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Module {name: "collection", description: "Collection-related functionality"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Module {name: "filter_processor", description: "Filter processing functionality"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Module {name: "search", description: "Search-related functionality"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Module {name: "point", description: "Point operations and data structures"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Type {name: "QdrantOperationStatus", description: "Operation status type from point module"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Type {name: "PointOperationStatus", description: "Alias for QdrantOperationStatus"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Type {name: "PointCountResult", description: "Count result type from point module"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Type {name: "SearchOperationStatus", description: "Search operation status type from point module"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Type {name: "PointScrollResult", description: "Scroll result type from point module"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Type {name: "SearchCountResult", description: "Count result type from search module"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Type {name: "SearchScrollResult", description: "Scroll result type from search module"})
CREATE (doc)-[:MENTIONS]->(e11)

MATCH (doc:Document {title: "Qdrant API compatibility models"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/filter_processor.rs
CREATE (doc:Document {
      id: "FilterProcessor Rust Module",
      title: "FilterProcessor Rust Module",
      domain: "software",
      doc_type: "rust_module"
    })
CREATE (e0:Module {name: "FilterProcessor", language: "Rust", description: "Handles Qdrant filter operations on payload data"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Struct {name: "FilterProcessor", visibility: "public", description: "Main struct for processing Qdrant filters"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Function {name: "apply_filter", visibility: "public", parameters: "filter: &QdrantFilter,payload: &Payload,condition: &QdrantCondition,payload: &Payload,key: &str,match_value: &QdrantMatchValue,payload: &Payload,key: &str,range: &QdrantRange,payload: &Payload,key: &str,geo_bounding_box: &QdrantGeoBoundingBox,payload: &Payload,key: &str,geo_radius: &QdrantGeoRadius,payload: &Payload,key: &str,values_count: &QdrantValuesCount,payload: &Payload,key: &str,payload: &Payload", return_type: "FilterResult", description: "Apply filter to a payload with AND/OR/NOT logic"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "evaluate_condition", visibility: "private", parameters: "condition: &QdrantCondition,payload: &Payload", return_type: "bool", description: "Evaluate a single condition against payload"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "evaluate_match", visibility: "private", parameters: "key: &str,match_value: &QdrantMatchValue,payload: &Payload", return_type: "bool", description: "Evaluate match conditions (string, integer, bool, text)"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "evaluate_range", visibility: "private", parameters: "key: &str,range: &QdrantRange,payload: &Payload", return_type: "bool", description: "Evaluate numeric range conditions"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "evaluate_geo_bounding_box", visibility: "private", parameters: "key: &str,geo_bounding_box: &QdrantGeoBoundingBox,payload: &Payload", return_type: "bool", description: "Evaluate geographic bounding box conditions"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "evaluate_geo_radius", visibility: "private", parameters: "key: &str,geo_radius: &QdrantGeoRadius,payload: &Payload", return_type: "bool", description: "Evaluate geographic radius conditions"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "evaluate_values_count", visibility: "private", parameters: "key: &str,values_count: &QdrantValuesCount,payload: &Payload", return_type: "bool", description: "Evaluate array/object count conditions"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "get_nested_value", visibility: "private", parameters: "key: &str,payload: &Payload", return_type: "Option<&Value>", description: "Extract nested values from payload using dot notation"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Type {name: "QdrantFilter", description: "Filter structure with must, must_not, should conditions"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Type {name: "QdrantCondition", description: "Enum of different condition types (Match, Range, Geo, etc.)"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Type {name: "Payload", description: "Data structure containing the payload to filter"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Type {name: "FilterResult", description: "Result of filter application"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "serde_json", type: "external", description: "JSON serialization/deserialization"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::collections::HashMap", type: "standard", description: "Standard library HashMap"})
CREATE (doc)-[:MENTIONS]->(e15)

MATCH (doc:Document {title: "FilterProcessor Rust Module"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/filter.rs
CREATE (doc:Document {
      id: "Qdrant Filter System",
      title: "Qdrant Filter System",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "qdrant_filter", language: "Rust", purpose: "Vector database filtering system"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantFilter", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone", fields: "must,should,must_not,text,match_type,gt,gte,lt,lte,top_right,bottom_left,center,radius,lat,lon,gt,gte,lt,lte,must,should,must_not"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantCondition", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", enum_type: "true", variants: "Match,Range,GeoBoundingBox,GeoRadius,ValuesCount,Nested,String,Integer,Bool,Any,Text,Exact,Prefix,Suffix,Contains"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QdrantMatchValue", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", enum_type: "true", variants: "String,Integer,Bool,Any,Text"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QdrantTextMatch", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", fields: "text,match_type"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QdrantTextMatchType", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", enum_type: "true", variants: "Exact,Prefix,Suffix,Contains"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QdrantRange", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", fields: "gt,gte,lt,lte"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "QdrantGeoBoundingBox", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", fields: "top_right,bottom_left"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "QdrantGeoRadius", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", fields: "center,radius"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "QdrantGeoPoint", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", fields: "lat,lon"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "QdrantValuesCount", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", fields: "gt,gte,lt,lte"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "QdrantFilterBuilder", visibility: "public", derives: "Debug,Clone", fields: "must,should,must_not", builder_pattern: "true"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Function {name: "new", visibility: "public", return_type: "Self", purpose: "Create new filter builder"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Function {name: "must", visibility: "public", return_type: "Self", purpose: "Add must condition"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Function {name: "should", visibility: "public", return_type: "Self", purpose: "Add should condition"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Function {name: "must_not", visibility: "public", return_type: "Self", purpose: "Add must_not condition"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Function {name: "build", visibility: "public", return_type: "QdrantFilter", purpose: "Build final filter"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Function {name: "match_string", visibility: "public", return_type: "Self", purpose: "Create string match condition"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Function {name: "match_integer", visibility: "public", return_type: "Self", purpose: "Create integer match condition"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Function {name: "match_bool", visibility: "public", return_type: "Self", purpose: "Create boolean match condition"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Function {name: "match_any", visibility: "public", return_type: "Self", purpose: "Create any match condition"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Function {name: "match_text", visibility: "public", return_type: "Self", purpose: "Create text match condition"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Function {name: "range", visibility: "public", return_type: "Self", purpose: "Create range condition"})
CREATE (doc)-[:MENTIONS]->(e22)
CREATE (e23:Function {name: "geo_bounding_box", visibility: "public", return_type: "Self", purpose: "Create geo bounding box condition"})
CREATE (doc)-[:MENTIONS]->(e23)
CREATE (e24:Function {name: "geo_radius", visibility: "public", return_type: "Self", purpose: "Create geo radius condition"})
CREATE (doc)-[:MENTIONS]->(e24)
CREATE (e25:Function {name: "values_count", visibility: "public", return_type: "Self", purpose: "Create values count condition"})
CREATE (doc)-[:MENTIONS]->(e25)
CREATE (e26:Function {name: "nested", visibility: "public", return_type: "Self", purpose: "Create nested filter condition"})
CREATE (doc)-[:MENTIONS]->(e26)
CREATE (e27:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e27)
CREATE (e28:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e28)

MATCH (doc:Document {title: "Qdrant Filter System"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/error.rs
CREATE (doc:Document {
      id: "Qdrant Error Models and Response Structures",
      title: "Qdrant Error Models and Response Structures",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "models", description: "Error handling structures for Qdrant vector database", language: "Rust"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantErrorResponse", description: "Response structure for Qdrant errors", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantErrorStatus", description: "Error status information", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QdrantErrorCode", description: "Enumeration of Qdrant error codes with HTTP status mapping", visibility: "public", traits: "Debug,Clone,Serialize,Deserialize"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "http_status_code", description: "Get HTTP status code for error", visibility: "public", return_type: "u16"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization"})
CREATE (doc)-[:MENTIONS]->(e5)

MATCH (doc:Document {title: "Qdrant Error Models and Response Structures"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/config.rs
CREATE (doc:Document {
      id: "Qdrant Configuration Models",
      title: "Qdrant Configuration Models",
      domain: "software",
      doc_type: "Rust Configuration Module"
    })
CREATE (e0:Module {name: "qdrant_config", language: "Rust", purpose: "Configuration structures for Qdrant vector database"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantServerConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize,Debug,Clone,Serialize,Deserialize", purpose: "Main server configuration"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantStorageConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Storage configuration"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QdrantPerformanceConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Performance tuning configuration"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QdrantServiceConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Service configuration"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QdrantClusterConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Cluster configuration"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QdrantClusterConfigDetails", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Detailed cluster configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "QdrantP2PConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "P2P communication configuration"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "QdrantConsensusConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Consensus algorithm configuration"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "QdrantCollectionConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Collection configuration"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "QdrantCollectionParams", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Collection parameters"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "QdrantVectorsConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", attributes: "serde(untagged),serde(rename_all = \"snake_case\")", purpose: "Vector configuration enum"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "QdrantVectorParams", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "Vector parameters"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Class {name: "QdrantDistance", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", attributes: "serde(rename_all = \"snake_case\")", purpose: "Distance metric enum"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Class {name: "QdrantHnswConfig", visibility: "public", derives: "Debug,Clone,Serialize,Deserialize", purpose: "HNSW index configuration"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Dependency {name: "std::collections::HashMap", type: "standard_library", purpose: "Hash map data structure"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:Dependency {name: "serde", type: "external_crate", features: "Deserialize,Serialize", purpose: "Serialization framework"})
CREATE (doc)-[:MENTIONS]->(e16)
CREATE (e17:Configuration {name: "server_config", type: "server", fields: "host,port,grpc_port,enable_cors,max_request_size_mb,max_batch_size,storage,service,cluster,storage_path,temp_path,snapshots_path,performance,wal,optimizers,quantization,max_segment_size,memmap_threshold,indexing_threshold,payload_indexing_threshold,flush_interval_sec,max_optimization_threads,enable_telemetry,telemetry_host,telemetry_port,telemetry_grpc_port,max_request_size_mb,max_batch_size,max_workers,enabled,config,params,hnsw_config,optimizer_config,wal_config,quantization_config"})
CREATE (doc)-[:MENTIONS]->(e17)
CREATE (e18:Configuration {name: "storage_config", type: "storage", fields: "storage_path,temp_path,snapshots_path,performance,wal,optimizers,quantization"})
CREATE (doc)-[:MENTIONS]->(e18)
CREATE (e19:Configuration {name: "performance_config", type: "performance", fields: "max_segment_size,memmap_threshold,indexing_threshold,payload_indexing_threshold,flush_interval_sec,max_optimization_threads"})
CREATE (doc)-[:MENTIONS]->(e19)
CREATE (e20:Configuration {name: "service_config", type: "service", fields: "enable_telemetry,telemetry_host,telemetry_port,telemetry_grpc_port,max_request_size_mb,max_batch_size,max_workers"})
CREATE (doc)-[:MENTIONS]->(e20)
CREATE (e21:Configuration {name: "cluster_config", type: "cluster", fields: "enabled,config"})
CREATE (doc)-[:MENTIONS]->(e21)
CREATE (e22:Configuration {name: "collection_config", type: "collection", fields: "params,hnsw_config,optimizer_config,wal_config,quantization_config"})
CREATE (doc)-[:MENTIONS]->(e22)

MATCH (doc:Document {title: "Qdrant Configuration Models"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/collection.rs
CREATE (doc:Document {
      id: "Qdrant Collection Models and Configuration",
      title: "Qdrant Collection Models and Configuration",
      domain: "software",
      doc_type: "Rust Data Models"
    })
CREATE (e0:Module {name: "models", description: "Data structures and configuration models for Qdrant vector database"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantCollectionInfo", description: "Main collection information structure containing name, status, config, stats, optimizer status, and payload schema"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantCollectionStatus", description: "Collection status enumeration with creating, ready, optimized, and issues states"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Class {name: "QdrantCollectionConfig", description: "Collection configuration containing vector parameters, shard settings, replication, and various optimization settings"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Class {name: "QdrantVectorsConfig", description: "Vector configuration specifying size and distance metric"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Class {name: "QdrantDistance", description: "Distance metric enumeration supporting Cosine, Euclid, and Dot similarity measures"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Class {name: "QdrantHnswConfig", description: "HNSW (Hierarchical Navigable Small World) index configuration"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Class {name: "QdrantOptimizerConfig", description: "Collection optimizer configuration for vector indexing and memory management"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Class {name: "QdrantWalConfig", description: "Write-Ahead Log configuration for data persistence"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Class {name: "QdrantQuantizationConfig", description: "Vector quantization configuration for memory optimization"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Class {name: "QdrantQuantizationType", description: "Quantization type enumeration supporting int8 scalar quantization"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Class {name: "QdrantScalarQuantization", description: "Scalar quantization configuration with type, quantile, and memory settings"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Class {name: "QdrantCollectionStats", description: "Collection statistics including points count and indexed vectors count"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:Dependency {name: "serde", version: "latest", purpose: "Serialization and deserialization support"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:Dependency {name: "std::collections::HashMap", version: "standard", purpose: "Key-value storage for payload schema mapping"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:Configuration {name: "Collection Configuration", description: "Comprehensive configuration system for Qdrant vector collections including indexing, optimization, and persistence settings"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "Qdrant Collection API", description: "Rust API for interacting with Qdrant vector database collections"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Qdrant Collection Models and Configuration"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File: /mnt/f/Node/hivellm/vectorizer/src/models/qdrant/batch.rs
CREATE (doc:Document {
      id: "Qdrant Batch Operations Model",
      title: "Qdrant Batch Operations Model",
      domain: "software",
      doc_type: "Rust Module"
    })
CREATE (e0:Module {name: "models", language: "Rust", description: "Data structures and models for Qdrant batch operations"})
CREATE (doc)-[:MENTIONS]->(e0)
CREATE (e1:Class {name: "QdrantBatchOperation", type: "enum", description: "Enum representing different batch operations for Qdrant vector database", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e1)
CREATE (e2:Class {name: "QdrantBatchRequest", type: "struct", description: "Request structure for batch operations", visibility: "public"})
CREATE (doc)-[:MENTIONS]->(e2)
CREATE (e3:Function {name: "Upsert", description: "Upsert points operation variant", parameters: "collection: String,points: Vec<QdrantPointStruct>,collection: String,points: Vec<QdrantPointId>,collection: String,payload: QdrantPayload,points: Vec<QdrantPointId>,collection: String,payload: QdrantPayload,points: Vec<QdrantPointId>,collection: String,keys: Vec<String>,points: Vec<QdrantPointId>,collection: String,points: Vec<QdrantPointId>,collection: String,points: Vec<QdrantPointStruct>,collection: String,points: Vec<QdrantPointId>,vector: Option<String>"})
CREATE (doc)-[:MENTIONS]->(e3)
CREATE (e4:Function {name: "Delete", description: "Delete points operation variant", parameters: "collection: String,points: Vec<QdrantPointId>"})
CREATE (doc)-[:MENTIONS]->(e4)
CREATE (e5:Function {name: "SetPayload", description: "Set payload operation variant", parameters: "collection: String,payload: QdrantPayload,points: Vec<QdrantPointId>"})
CREATE (doc)-[:MENTIONS]->(e5)
CREATE (e6:Function {name: "OverwritePayload", description: "Overwrite payload operation variant", parameters: "collection: String,payload: QdrantPayload,points: Vec<QdrantPointId>"})
CREATE (doc)-[:MENTIONS]->(e6)
CREATE (e7:Function {name: "DeletePayload", description: "Delete payload operation variant", parameters: "collection: String,keys: Vec<String>,points: Vec<QdrantPointId>"})
CREATE (doc)-[:MENTIONS]->(e7)
CREATE (e8:Function {name: "ClearPayload", description: "Clear payload operation variant", parameters: "collection: String,points: Vec<QdrantPointId>"})
CREATE (doc)-[:MENTIONS]->(e8)
CREATE (e9:Function {name: "UpdateVectors", description: "Update vectors operation variant", parameters: "collection: String,points: Vec<QdrantPointStruct>"})
CREATE (doc)-[:MENTIONS]->(e9)
CREATE (e10:Function {name: "DeleteVectors", description: "Delete vectors operation variant", parameters: "collection: String,points: Vec<QdrantPointId>,vector: Option<String>"})
CREATE (doc)-[:MENTIONS]->(e10)
CREATE (e11:Dependency {name: "serde", type: "crate", description: "Serialization/deserialization framework"})
CREATE (doc)-[:MENTIONS]->(e11)
CREATE (e12:Dependency {name: "std::collections::HashMap", type: "standard_library", description: "Standard library hash map collection"})
CREATE (doc)-[:MENTIONS]->(e12)
CREATE (e13:API {name: "QdrantPointId", description: "Point ID type re-exported from point module"})
CREATE (doc)-[:MENTIONS]->(e13)
CREATE (e14:API {name: "QdrantPointStruct", description: "Point structure type re-exported from point module"})
CREATE (doc)-[:MENTIONS]->(e14)
CREATE (e15:API {name: "QdrantValue", description: "Value type re-exported from point module"})
CREATE (doc)-[:MENTIONS]->(e15)
CREATE (e16:API {name: "QdrantPayload", description: "Payload type alias for HashMap<String, QdrantValue>"})
CREATE (doc)-[:MENTIONS]->(e16)

MATCH (doc:Document {title: "Qdrant Batch Operations Model"}), (project:Project {name: "vectorizer"})
CREATE (project)-[:CONTAINS_FILE]->(doc)

// File Import Relationships

