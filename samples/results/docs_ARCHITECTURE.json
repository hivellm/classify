{
  "file": "docs/ARCHITECTURE.md",
  "classification": {
    "template": "software_project",
    "confidence": 1,
    "domain": "software",
    "docType": "architecture_document"
  },
  "graphStructure": {
    "cypher": "CREATE (doc:Document {\n      id: \"System Architecture\",\n      title: \"System Architecture\",\n      domain: \"software\",\n      doc_type: \"architecture_document\"\n    })\nCREATE (e0:Module {name: \"React App\", description: \"Frontend application built with React\"})\nCREATE (doc)-[:MENTIONS]->(e0)\nCREATE (e1:Module {name: \"Express.js Server\", description: \"API server built with Express.js\"})\nCREATE (doc)-[:MENTIONS]->(e1)\nCREATE (e2:Module {name: \"TypeScript Services\", description: \"Service layer containing business logic\"})\nCREATE (doc)-[:MENTIONS]->(e2)\nCREATE (e3:Module {name: \"Rust Vector DB\", description: \"Vector database service built in Rust\"})\nCREATE (doc)-[:MENTIONS]->(e3)\nCREATE (e4:Module {name: \"Python Pipeline\", description: \"Data processing pipeline in Python\"})\nCREATE (doc)-[:MENTIONS]->(e4)\nCREATE (e5:Function {name: \"register\", description: \"Handles user registration\"})\nCREATE (doc)-[:MENTIONS]->(e5)\nCREATE (e6:Function {name: \"login\", description: \"Handles user login\"})\nCREATE (doc)-[:MENTIONS]->(e6)\nCREATE (e7:Function {name: \"verifyToken\", description: \"Verifies JWT tokens\"})\nCREATE (doc)-[:MENTIONS]->(e7)\nCREATE (e8:Function {name: \"changePassword\", description: \"Changes user password\"})\nCREATE (doc)-[:MENTIONS]->(e8)\nCREATE (e9:Function {name: \"getProfile\", description: \"Retrieves user profile\"})\nCREATE (doc)-[:MENTIONS]->(e9)\nCREATE (e10:Function {name: \"updateProfile\", description: \"Updates user profile\"})\nCREATE (doc)-[:MENTIONS]->(e10)\nCREATE (e11:Function {name: \"deleteUser\", description: \"Deletes a user\"})\nCREATE (doc)-[:MENTIONS]->(e11)\nCREATE (e12:Class {name: \"UserController\", description: \"Controller for user-related operations\"})\nCREATE (doc)-[:MENTIONS]->(e12)\nCREATE (e13:Dependency {name: \"bcrypt\", description: \"Library for password hashing\"})\nCREATE (doc)-[:MENTIONS]->(e13)\nCREATE (e14:Dependency {name: \"JWT\", description: \"Library for JSON Web Tokens\"})\nCREATE (doc)-[:MENTIONS]->(e14)\nCREATE (e15:Dependency {name: \"SentenceTransformers\", description: \"Library for generating embeddings\"})\nCREATE (doc)-[:MENTIONS]->(e15)\nCREATE (e16:Dependency {name: \"HNSW\", description: \"Index for efficient vector search\"})\nCREATE (doc)-[:MENTIONS]->(e16)\nCREATE (e17:Configuration {name: \"Rate Limiting\", description: \"100 requests per 15 minutes per IP\"})\nCREATE (doc)-[:MENTIONS]->(e17)\nCREATE (e18:Configuration {name: \"JWT Expiry\", description: \"24-hour token expiry\"})\nCREATE (doc)-[:MENTIONS]->(e18)\nCREATE (e19:Configuration {name: \"Connection Pooling\", description: \"Max 20 connections\"})\nCREATE (doc)-[:MENTIONS]->(e19)\nCREATE (e20:API {name: \"POST /api/register\", description: \"Endpoint for user registration\"})\nCREATE (doc)-[:MENTIONS]->(e20)\nCREATE (e21:API {name: \"POST /api/login\", description: \"Endpoint for user login\"})\nCREATE (doc)-[:MENTIONS]->(e21)\nCREATE (e22:API {name: \"GET /api/profile\", description: \"Endpoint for retrieving user profile\"})\nCREATE (doc)-[:MENTIONS]->(e22)\nCREATE (e23:API {name: \"GET /api/users\", description: \"Endpoint for retrieving user list\"})\nCREATE (doc)-[:MENTIONS]->(e23)\nCREATE (e24:API {name: \"POST /vectors\", description: \"Endpoint for inserting vectors\"})\nCREATE (doc)-[:MENTIONS]->(e24)\nCREATE (e25:API {name: \"POST /search\", description: \"Endpoint for vector similarity search\"})\nCREATE (doc)-[:MENTIONS]->(e25)\nCREATE (e26:API {name: \"DELETE /vectors/:id\", description: \"Endpoint for deleting vectors\"})\nCREATE (doc)-[:MENTIONS]->(e26)\nCREATE (e27:Database {name: \"PostgreSQL\", description: \"Relational database for user data\"})\nCREATE (doc)-[:MENTIONS]->(e27)\nCREATE (e28:Database {name: \"Rust Vector DB\", description: \"Vector database for semantic search\"})\nCREATE (doc)-[:MENTIONS]->(e28)\nCREATE (e29:Test {name: \"Authentication Tests\", description: \"Tests for authentication flows\"})\nCREATE (doc)-[:MENTIONS]->(e29)\nCREATE (e30:Script {name: \"process_data.py\", description: \"Python script for data processing\"})\nCREATE (doc)-[:MENTIONS]->(e30)\nCREATE (e31:Documentation {name: \"System Architecture Document\", description: \"Document describing the system architecture\"})\nCREATE (doc)-[:MENTIONS]->(e31)",
    "entities": [
      {
        "type": "Module",
        "properties": {
          "name": "React App",
          "description": "Frontend application built with React"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Express.js Server",
          "description": "API server built with Express.js"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "TypeScript Services",
          "description": "Service layer containing business logic"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Rust Vector DB",
          "description": "Vector database service built in Rust"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Python Pipeline",
          "description": "Data processing pipeline in Python"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "register",
          "description": "Handles user registration"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "login",
          "description": "Handles user login"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "verifyToken",
          "description": "Verifies JWT tokens"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "changePassword",
          "description": "Changes user password"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "getProfile",
          "description": "Retrieves user profile"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "updateProfile",
          "description": "Updates user profile"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "deleteUser",
          "description": "Deletes a user"
        }
      },
      {
        "type": "Class",
        "properties": {
          "name": "UserController",
          "description": "Controller for user-related operations"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "bcrypt",
          "description": "Library for password hashing"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "JWT",
          "description": "Library for JSON Web Tokens"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "SentenceTransformers",
          "description": "Library for generating embeddings"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "HNSW",
          "description": "Index for efficient vector search"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Rate Limiting",
          "description": "100 requests per 15 minutes per IP"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "JWT Expiry",
          "description": "24-hour token expiry"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Connection Pooling",
          "description": "Max 20 connections"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/register",
          "description": "Endpoint for user registration"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/login",
          "description": "Endpoint for user login"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/profile",
          "description": "Endpoint for retrieving user profile"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/users",
          "description": "Endpoint for retrieving user list"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /vectors",
          "description": "Endpoint for inserting vectors"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /search",
          "description": "Endpoint for vector similarity search"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "DELETE /vectors/:id",
          "description": "Endpoint for deleting vectors"
        }
      },
      {
        "type": "Database",
        "properties": {
          "name": "PostgreSQL",
          "description": "Relational database for user data"
        }
      },
      {
        "type": "Database",
        "properties": {
          "name": "Rust Vector DB",
          "description": "Vector database for semantic search"
        }
      },
      {
        "type": "Test",
        "properties": {
          "name": "Authentication Tests",
          "description": "Tests for authentication flows"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "process_data.py",
          "description": "Python script for data processing"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "System Architecture Document",
          "description": "Document describing the system architecture"
        }
      }
    ],
    "relationships": [
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "Authentication",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "User Interface Components",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "API Client",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "Routes",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "Middleware",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "Controllers",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "TypeScript Services",
        "target": "AuthService.ts",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "TypeScript Services",
        "target": "UserService.ts",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "TypeScript Services",
        "target": "Database.ts",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "Storage",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "HTTP Handler",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "Models",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Python Pipeline",
        "target": "Load Data",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Python Pipeline",
        "target": "Generate Embeddings",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Python Pipeline",
        "target": "Upload to Vector DB",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "React App",
        "target": "Express.js Server",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Express.js Server",
        "target": "TypeScript Services",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "TypeScript Services",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Python Pipeline",
        "target": "Rust Vector DB",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "AuthService.ts",
        "target": "bcrypt",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "AuthService.ts",
        "target": "JWT",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Python Pipeline",
        "target": "SentenceTransformers",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Rust Vector DB",
        "target": "HNSW",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "register",
        "target": "bcrypt",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "login",
        "target": "bcrypt",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "verifyToken",
        "target": "JWT",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "POST /api/register",
        "target": "register",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "POST /api/login",
        "target": "login",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "GET /api/profile",
        "target": "getProfile",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "GET /api/users",
        "target": "UserController",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "POST /vectors",
        "target": "Storage",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "POST /search",
        "target": "HNSW",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "DELETE /vectors/:id",
        "target": "Storage",
        "properties": {}
      },
      {
        "type": "IMPLEMENTS",
        "source": "UserController",
        "target": "UserService.ts",
        "properties": {}
      },
      {
        "type": "ACCESSES",
        "source": "TypeScript Services",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "ACCESSES",
        "source": "Python Pipeline",
        "target": "Rust Vector DB",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "POST /api/register",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "POST /api/login",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "GET /api/profile",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "GET /api/users",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Rust Vector DB",
        "target": "POST /vectors",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Rust Vector DB",
        "target": "POST /search",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Rust Vector DB",
        "target": "DELETE /vectors/:id",
        "properties": {}
      },
      {
        "type": "BUILDS",
        "source": "process_data.py",
        "target": "Rust Vector DB",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "React App",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "Express.js Server",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "TypeScript Services",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "Rust Vector DB",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "Python Pipeline",
        "properties": {}
      }
    ]
  },
  "fulltextMetadata": {
    "title": "System Architecture",
    "domain": "software",
    "docType": "architecture_document",
    "extractedFields": {
      "module_name": [
        "React App",
        "Express.js Server",
        "TypeScript Services",
        "Rust Vector DB",
        "Python Pipeline"
      ],
      "module_description": [
        "Frontend application built with React",
        "API server built with Express.js",
        "Service layer containing business logic",
        "Vector database service built in Rust",
        "Data processing pipeline in Python"
      ],
      "function_name": [
        "register",
        "login",
        "verifyToken",
        "changePassword",
        "getProfile",
        "updateProfile",
        "deleteUser"
      ],
      "function_description": [
        "Handles user registration",
        "Handles user login",
        "Verifies JWT tokens",
        "Changes user password",
        "Retrieves user profile",
        "Updates user profile",
        "Deletes a user"
      ],
      "class_name": "UserController",
      "class_description": "Controller for user-related operations",
      "dependency_name": [
        "bcrypt",
        "JWT",
        "SentenceTransformers",
        "HNSW"
      ],
      "dependency_description": [
        "Library for password hashing",
        "Library for JSON Web Tokens",
        "Library for generating embeddings",
        "Index for efficient vector search"
      ],
      "configuration_name": [
        "Rate Limiting",
        "JWT Expiry",
        "Connection Pooling"
      ],
      "configuration_description": [
        "100 requests per 15 minutes per IP",
        "24-hour token expiry",
        "Max 20 connections"
      ],
      "api_name": [
        "POST /api/register",
        "POST /api/login",
        "GET /api/profile",
        "GET /api/users",
        "POST /vectors",
        "POST /search",
        "DELETE /vectors/:id"
      ],
      "api_description": [
        "Endpoint for user registration",
        "Endpoint for user login",
        "Endpoint for retrieving user profile",
        "Endpoint for retrieving user list",
        "Endpoint for inserting vectors",
        "Endpoint for vector similarity search",
        "Endpoint for deleting vectors"
      ],
      "database_name": [
        "PostgreSQL",
        "Rust Vector DB"
      ],
      "database_description": [
        "Relational database for user data",
        "Vector database for semantic search"
      ],
      "test_name": "Authentication Tests",
      "test_description": "Tests for authentication flows",
      "script_name": "process_data.py",
      "script_description": "Python script for data processing",
      "documentation_name": "System Architecture Document",
      "documentation_description": "Document describing the system architecture"
    },
    "keywords": [
      "user",
      "vector",
      "data",
      "database",
      "client",
      "post",
      "token",
      "react",
      "layer",
      "search",
      "bcrypt",
      "postgresql",
      "rust",
      "server",
      "architecture",
      "python",
      "authentication",
      "password",
      "storage",
      "hnsw"
    ],
    "summary": "This document outlines a multi-tier system architecture featuring a React frontend, Node.js/Python backend, PostgreSQL database, and Rust vector database. The system handles user authentication, profile management, and vector search operations through clearly defined API endpoints and services. Data flows through structured layers from client requests to backend processing, with Python handling data pipeline operations and Rust managing vector storage and similarity search."
  },
  "cacheInfo": {
    "cached": false,
    "hash": "fe09c549b5906a5a1f79c98e09558a0df7dfc382a2b87cedcbe7d8971048bd66"
  },
  "performance": {
    "totalTimeMs": 94742,
    "tokens": {
      "input": 1700,
      "output": 3014,
      "total": 4714
    },
    "costUsd": 0.00108192
  }
}