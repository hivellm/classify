{
  "file": "docs/ARCHITECTURE.md",
  "classification": {
    "template": "software_project",
    "confidence": 0.95,
    "domain": "software",
    "docType": "architecture_document"
  },
  "graphStructure": {
    "cypher": "CREATE (doc:Document {\n      id: \"System Architecture\",\n      title: \"System Architecture\",\n      domain: \"software\",\n      doc_type: \"architecture_document\"\n    })\nCREATE (e0:Module {name: \"React App\", description: \"Frontend application built with React\"})\nCREATE (doc)-[:MENTIONS]->(e0)\nCREATE (e1:Function {name: \"useAuth\", description: \"Hook for authentication in React\"})\nCREATE (doc)-[:MENTIONS]->(e1)\nCREATE (e2:Module {name: \"LoginForm\", description: \"User interface component for login\"})\nCREATE (doc)-[:MENTIONS]->(e2)\nCREATE (e3:Module {name: \"Dashboard\", description: \"User interface component for dashboard\"})\nCREATE (doc)-[:MENTIONS]->(e3)\nCREATE (e4:Module {name: \"UserList\", description: \"User interface component for listing users\"})\nCREATE (doc)-[:MENTIONS]->(e4)\nCREATE (e5:Module {name: \"Express.js Server\", description: \"API server built with Express.js\"})\nCREATE (doc)-[:MENTIONS]->(e5)\nCREATE (e6:API {name: \"POST /api/register\", description: \"Endpoint for user registration\"})\nCREATE (doc)-[:MENTIONS]->(e6)\nCREATE (e7:API {name: \"POST /api/login\", description: \"Endpoint for user login\"})\nCREATE (doc)-[:MENTIONS]->(e7)\nCREATE (e8:API {name: \"GET /api/profile\", description: \"Endpoint for retrieving user profile\"})\nCREATE (doc)-[:MENTIONS]->(e8)\nCREATE (e9:API {name: \"GET /api/users\", description: \"Endpoint for retrieving user list\"})\nCREATE (doc)-[:MENTIONS]->(e9)\nCREATE (e10:Module {name: \"Authentication Middleware\", description: \"Middleware for JWT token verification\"})\nCREATE (doc)-[:MENTIONS]->(e10)\nCREATE (e11:Module {name: \"Rate Limiting Middleware\", description: \"Middleware for rate limiting requests\"})\nCREATE (doc)-[:MENTIONS]->(e11)\nCREATE (e12:Module {name: \"Error Handling Middleware\", description: \"Middleware for handling errors\"})\nCREATE (doc)-[:MENTIONS]->(e12)\nCREATE (e13:Module {name: \"UserController.ts\", description: \"Controller for user-related operations\"})\nCREATE (doc)-[:MENTIONS]->(e13)\nCREATE (e14:Module {name: \"AuthService.ts\", description: \"Service for authentication logic\"})\nCREATE (doc)-[:MENTIONS]->(e14)\nCREATE (e15:Function {name: \"register\", description: \"Function to register a new user\"})\nCREATE (doc)-[:MENTIONS]->(e15)\nCREATE (e16:Function {name: \"login\", description: \"Function to log in a user\"})\nCREATE (doc)-[:MENTIONS]->(e16)\nCREATE (e17:Function {name: \"verifyToken\", description: \"Function to verify JWT tokens\"})\nCREATE (doc)-[:MENTIONS]->(e17)\nCREATE (e18:Function {name: \"changePassword\", description: \"Function to change user password\"})\nCREATE (doc)-[:MENTIONS]->(e18)\nCREATE (e19:Module {name: \"UserService.ts\", description: \"Service for user management logic\"})\nCREATE (doc)-[:MENTIONS]->(e19)\nCREATE (e20:Function {name: \"getProfile\", description: \"Function to get user profile\"})\nCREATE (doc)-[:MENTIONS]->(e20)\nCREATE (e21:Function {name: \"updateProfile\", description: \"Function to update user profile\"})\nCREATE (doc)-[:MENTIONS]->(e21)\nCREATE (e22:Function {name: \"deleteUser\", description: \"Function to delete a user\"})\nCREATE (doc)-[:MENTIONS]->(e22)\nCREATE (e23:Module {name: \"Database.ts\", description: \"Module for database connection pool\"})\nCREATE (doc)-[:MENTIONS]->(e23)\nCREATE (e24:Database {name: \"PostgreSQL\", description: \"Relational database for user data\"})\nCREATE (doc)-[:MENTIONS]->(e24)\nCREATE (e25:Module {name: \"users table\", description: \"Database table storing user information\"})\nCREATE (doc)-[:MENTIONS]->(e25)\nCREATE (e26:Module {name: \"sessions table\", description: \"Database table storing session information\"})\nCREATE (doc)-[:MENTIONS]->(e26)\nCREATE (e27:Module {name: \"Rust Vector DB\", description: \"Vector database for semantic search\"})\nCREATE (doc)-[:MENTIONS]->(e27)\nCREATE (e28:Module {name: \"Storage\", description: \"Storage module in Rust vector database\"})\nCREATE (doc)-[:MENTIONS]->(e28)\nCREATE (e29:Module {name: \"HNSW Index\", description: \"Index for efficient vector search\"})\nCREATE (doc)-[:MENTIONS]->(e29)\nCREATE (e30:Module {name: \"HTTP Handler\", description: \"Handler for HTTP requests in vector database\"})\nCREATE (doc)-[:MENTIONS]->(e30)\nCREATE (e31:API {name: \"POST /vectors\", description: \"Endpoint for inserting vectors\"})\nCREATE (doc)-[:MENTIONS]->(e31)\nCREATE (e32:API {name: \"POST /search\", description: \"Endpoint for similarity search\"})\nCREATE (doc)-[:MENTIONS]->(e32)\nCREATE (e33:API {name: \"DELETE /vectors/:id\", description: \"Endpoint for deleting vectors\"})\nCREATE (doc)-[:MENTIONS]->(e33)\nCREATE (e34:Module {name: \"Models\", description: \"Models module in Rust vector database\"})\nCREATE (doc)-[:MENTIONS]->(e34)\nCREATE (e35:Script {name: \"process_data.py\", description: \"Python script for data processing pipeline\"})\nCREATE (doc)-[:MENTIONS]->(e35)\nCREATE (e36:Function {name: \"Load Data\", description: \"Function to load data from CSV/JSON\"})\nCREATE (doc)-[:MENTIONS]->(e36)\nCREATE (e37:Function {name: \"Generate Embeddings\", description: \"Function to generate embeddings using SentenceTransformers\"})\nCREATE (doc)-[:MENTIONS]->(e37)\nCREATE (e38:Function {name: \"Upload to Vector DB\", description: \"Function to upload embeddings to vector database\"})\nCREATE (doc)-[:MENTIONS]->(e38)\nCREATE (e39:Configuration {name: \"HTTPS\", description: \"Transport security configuration\"})\nCREATE (doc)-[:MENTIONS]->(e39)\nCREATE (e40:Configuration {name: \"Helmet.js\", description: \"Security headers configuration\"})\nCREATE (doc)-[:MENTIONS]->(e40)\nCREATE (e41:Configuration {name: \"Rate Limiting\", description: \"Rate limiting configuration (100 req/15min per IP)\"})\nCREATE (doc)-[:MENTIONS]->(e41)\nCREATE (e42:Configuration {name: \"bcrypt\", description: \"Password hashing configuration with 10 salt rounds\"})\nCREATE (doc)-[:MENTIONS]->(e42)\nCREATE (e43:Configuration {name: \"JWT\", description: \"Token configuration with 24h expiry\"})\nCREATE (doc)-[:MENTIONS]->(e43)\nCREATE (e44:Module {name: \"Nginx\", description: \"Reverse proxy for deployment\"})\nCREATE (doc)-[:MENTIONS]->(e44)\nCREATE (e45:Module {name: \"React (SPA)\", description: \"Static files served in deployment\"})\nCREATE (doc)-[:MENTIONS]->(e45)\nCREATE (e46:Module {name: \"Express API\", description: \"Node.js server in deployment\"})\nCREATE (doc)-[:MENTIONS]->(e46)\nCREATE (e47:Module {name: \"Vector DB\", description: \"Rust service running on port 8080 in deployment\"})\nCREATE (doc)-[:MENTIONS]->(e47)\nCREATE (e48:Configuration {name: \"Connection Pooling\", description: \"Performance configuration with max 20 connections\"})\nCREATE (doc)-[:MENTIONS]->(e48)\nCREATE (e49:Configuration {name: \"JWT Caching\", description: \"Performance configuration to avoid repeated DB lookups\"})\nCREATE (doc)-[:MENTIONS]->(e49)\nCREATE (e50:Configuration {name: \"Batch Embedding Generation\", description: \"Performance configuration for efficient processing\"})\nCREATE (doc)-[:MENTIONS]->(e50)\nCREATE (e51:Configuration {name: \"Async/Await\", description: \"Performance configuration for non-blocking I/O\"})\nCREATE (doc)-[:MENTIONS]->(e51)\nCREATE (e52:Documentation {name: \"System Architecture Document\", description: \"Document describing the overall system architecture\"})\nCREATE (doc)-[:MENTIONS]->(e52)",
    "entities": [
      {
        "type": "Module",
        "properties": {
          "name": "React App",
          "description": "Frontend application built with React"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "useAuth",
          "description": "Hook for authentication in React"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "LoginForm",
          "description": "User interface component for login"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Dashboard",
          "description": "User interface component for dashboard"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "UserList",
          "description": "User interface component for listing users"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Express.js Server",
          "description": "API server built with Express.js"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/register",
          "description": "Endpoint for user registration"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/login",
          "description": "Endpoint for user login"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/profile",
          "description": "Endpoint for retrieving user profile"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/users",
          "description": "Endpoint for retrieving user list"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Authentication Middleware",
          "description": "Middleware for JWT token verification"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Rate Limiting Middleware",
          "description": "Middleware for rate limiting requests"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Error Handling Middleware",
          "description": "Middleware for handling errors"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "UserController.ts",
          "description": "Controller for user-related operations"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "AuthService.ts",
          "description": "Service for authentication logic"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "register",
          "description": "Function to register a new user"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "login",
          "description": "Function to log in a user"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "verifyToken",
          "description": "Function to verify JWT tokens"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "changePassword",
          "description": "Function to change user password"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "UserService.ts",
          "description": "Service for user management logic"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "getProfile",
          "description": "Function to get user profile"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "updateProfile",
          "description": "Function to update user profile"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "deleteUser",
          "description": "Function to delete a user"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Database.ts",
          "description": "Module for database connection pool"
        }
      },
      {
        "type": "Database",
        "properties": {
          "name": "PostgreSQL",
          "description": "Relational database for user data"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "users table",
          "description": "Database table storing user information"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "sessions table",
          "description": "Database table storing session information"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Rust Vector DB",
          "description": "Vector database for semantic search"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Storage",
          "description": "Storage module in Rust vector database"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "HNSW Index",
          "description": "Index for efficient vector search"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "HTTP Handler",
          "description": "Handler for HTTP requests in vector database"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /vectors",
          "description": "Endpoint for inserting vectors"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /search",
          "description": "Endpoint for similarity search"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "DELETE /vectors/:id",
          "description": "Endpoint for deleting vectors"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Models",
          "description": "Models module in Rust vector database"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "process_data.py",
          "description": "Python script for data processing pipeline"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "Load Data",
          "description": "Function to load data from CSV/JSON"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "Generate Embeddings",
          "description": "Function to generate embeddings using SentenceTransformers"
        }
      },
      {
        "type": "Function",
        "properties": {
          "name": "Upload to Vector DB",
          "description": "Function to upload embeddings to vector database"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "HTTPS",
          "description": "Transport security configuration"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Helmet.js",
          "description": "Security headers configuration"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Rate Limiting",
          "description": "Rate limiting configuration (100 req/15min per IP)"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "bcrypt",
          "description": "Password hashing configuration with 10 salt rounds"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "JWT",
          "description": "Token configuration with 24h expiry"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Nginx",
          "description": "Reverse proxy for deployment"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "React (SPA)",
          "description": "Static files served in deployment"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Express API",
          "description": "Node.js server in deployment"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Vector DB",
          "description": "Rust service running on port 8080 in deployment"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Connection Pooling",
          "description": "Performance configuration with max 20 connections"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "JWT Caching",
          "description": "Performance configuration to avoid repeated DB lookups"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Batch Embedding Generation",
          "description": "Performance configuration for efficient processing"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "Async/Await",
          "description": "Performance configuration for non-blocking I/O"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "System Architecture Document",
          "description": "Document describing the overall system architecture"
        }
      }
    ],
    "relationships": [
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "useAuth",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "LoginForm",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "Dashboard",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "React App",
        "target": "UserList",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "React App",
        "target": "fetch",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "POST /api/register",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "POST /api/login",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "GET /api/profile",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "GET /api/users",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "Authentication Middleware",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "Rate Limiting Middleware",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "Error Handling Middleware",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Express.js Server",
        "target": "UserController.ts",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "AuthService.ts",
        "target": "register",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "AuthService.ts",
        "target": "login",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "AuthService.ts",
        "target": "verifyToken",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "AuthService.ts",
        "target": "changePassword",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "UserService.ts",
        "target": "getProfile",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "UserService.ts",
        "target": "updateProfile",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "UserService.ts",
        "target": "deleteUser",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "AuthService.ts",
        "target": "Database.ts",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "UserService.ts",
        "target": "Database.ts",
        "properties": {}
      },
      {
        "type": "ACCESSES",
        "source": "Database.ts",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "PostgreSQL",
        "target": "users table",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "PostgreSQL",
        "target": "sessions table",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "Storage",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "HNSW Index",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "HTTP Handler",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "HTTP Handler",
        "target": "POST /vectors",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "HTTP Handler",
        "target": "POST /search",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "HTTP Handler",
        "target": "DELETE /vectors/:id",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Rust Vector DB",
        "target": "Models",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "process_data.py",
        "target": "Load Data",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "process_data.py",
        "target": "Generate Embeddings",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "process_data.py",
        "target": "Upload to Vector DB",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "Generate Embeddings",
        "target": "SentenceTransformers",
        "properties": {}
      },
      {
        "type": "CALLS",
        "source": "Upload to Vector DB",
        "target": "Rust Vector DB",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "POST /api/register",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "POST /api/login",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "GET /api/profile",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Express.js Server",
        "target": "GET /api/users",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "HTTP Handler",
        "target": "POST /vectors",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "HTTP Handler",
        "target": "POST /search",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "HTTP Handler",
        "target": "DELETE /vectors/:id",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Authentication Middleware",
        "target": "JWT",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "AuthService.ts",
        "target": "bcrypt",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "System Architecture Document",
        "target": "React App",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "System Architecture Document",
        "target": "Express.js Server",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "System Architecture Document",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "System Architecture Document",
        "target": "Rust Vector DB",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "System Architecture Document",
        "target": "process_data.py",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "System Architecture Document",
        "target": "System Architecture Document",
        "properties": {}
      }
    ]
  },
  "fulltextMetadata": {
    "title": "System Architecture",
    "domain": "software",
    "docType": "architecture_document",
    "extractedFields": {
      "module_name": [
        "React App",
        "LoginForm",
        "Dashboard",
        "UserList",
        "Express.js Server",
        "Authentication Middleware",
        "Rate Limiting Middleware",
        "Error Handling Middleware",
        "UserController.ts",
        "AuthService.ts",
        "UserService.ts",
        "Database.ts",
        "users table",
        "sessions table",
        "Rust Vector DB",
        "Storage",
        "HNSW Index",
        "HTTP Handler",
        "Models",
        "Nginx",
        "React (SPA)",
        "Express API",
        "Vector DB"
      ],
      "module_description": [
        "Frontend application built with React",
        "User interface component for login",
        "User interface component for dashboard",
        "User interface component for listing users",
        "API server built with Express.js",
        "Middleware for JWT token verification",
        "Middleware for rate limiting requests",
        "Middleware for handling errors",
        "Controller for user-related operations",
        "Service for authentication logic",
        "Service for user management logic",
        "Module for database connection pool",
        "Database table storing user information",
        "Database table storing session information",
        "Vector database for semantic search",
        "Storage module in Rust vector database",
        "Index for efficient vector search",
        "Handler for HTTP requests in vector database",
        "Models module in Rust vector database",
        "Reverse proxy for deployment",
        "Static files served in deployment",
        "Node.js server in deployment",
        "Rust service running on port 8080 in deployment"
      ],
      "function_name": [
        "useAuth",
        "register",
        "login",
        "verifyToken",
        "changePassword",
        "getProfile",
        "updateProfile",
        "deleteUser",
        "Load Data",
        "Generate Embeddings",
        "Upload to Vector DB"
      ],
      "function_description": [
        "Hook for authentication in React",
        "Function to register a new user",
        "Function to log in a user",
        "Function to verify JWT tokens",
        "Function to change user password",
        "Function to get user profile",
        "Function to update user profile",
        "Function to delete a user",
        "Function to load data from CSV/JSON",
        "Function to generate embeddings using SentenceTransformers",
        "Function to upload embeddings to vector database"
      ],
      "api_name": [
        "POST /api/register",
        "POST /api/login",
        "GET /api/profile",
        "GET /api/users",
        "POST /vectors",
        "POST /search",
        "DELETE /vectors/:id"
      ],
      "api_description": [
        "Endpoint for user registration",
        "Endpoint for user login",
        "Endpoint for retrieving user profile",
        "Endpoint for retrieving user list",
        "Endpoint for inserting vectors",
        "Endpoint for similarity search",
        "Endpoint for deleting vectors"
      ],
      "database_name": "PostgreSQL",
      "database_description": "Relational database for user data",
      "script_name": "process_data.py",
      "script_description": "Python script for data processing pipeline",
      "configuration_name": [
        "HTTPS",
        "Helmet.js",
        "Rate Limiting",
        "bcrypt",
        "JWT",
        "Connection Pooling",
        "JWT Caching",
        "Batch Embedding Generation",
        "Async/Await"
      ],
      "configuration_description": [
        "Transport security configuration",
        "Security headers configuration",
        "Rate limiting configuration (100 req/15min per IP)",
        "Password hashing configuration with 10 salt rounds",
        "Token configuration with 24h expiry",
        "Performance configuration with max 20 connections",
        "Performance configuration to avoid repeated DB lookups",
        "Performance configuration for efficient processing",
        "Performance configuration for non-blocking I/O"
      ],
      "documentation_name": "System Architecture Document",
      "documentation_description": "Document describing the overall system architecture"
    },
    "keywords": [
      "user",
      "vector",
      "data",
      "database",
      "client",
      "post",
      "token",
      "react",
      "layer",
      "search",
      "bcrypt",
      "postgresql",
      "rust",
      "server",
      "architecture",
      "python",
      "authentication",
      "password",
      "storage",
      "hnsw"
    ],
    "summary": "This document describes a multi-tier system architecture featuring a React frontend, Node.js/Python backend, PostgreSQL database, and Rust vector database. The system handles user authentication through JWT tokens and password hashing, with data flowing through dedicated service layers for user management and vector operations. It supports user registration, login, profile management, and includes a specialized vector search layer for similarity-based queries."
  },
  "cacheInfo": {
    "cached": true,
    "hash": "fe09c549b5906a5a1f79c98e09558a0df7dfc382a2b87cedcbe7d8971048bd66"
  },
  "performance": {
    "totalTimeMs": 1,
    "tokens": {
      "input": 3170,
      "output": 4014,
      "total": 7184
    },
    "costUsd": 0.0015677200000000003
  }
}