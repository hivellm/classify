{
  "file": "docs/README.md",
  "classification": {
    "template": "software_project",
    "confidence": 1,
    "domain": "software",
    "docType": "software_architecture_document"
  },
  "graphStructure": {
    "cypher": "CREATE (doc:Document {\n      id: \"Management System A full-stack user management system REST API React frontend\",\n      title: \"Management System A full-stack user management system REST API React frontend\",\n      domain: \"software\",\n      doc_type: \"software_architecture_document\"\n    })\nCREATE (e0:Module {name: \"Backend\", description: \"Handles server-side logic including authentication and user management\"})\nCREATE (doc)-[:MENTIONS]->(e0)\nCREATE (e1:Module {name: \"Frontend\", description: \"React-based user interface for interacting with the system\"})\nCREATE (doc)-[:MENTIONS]->(e1)\nCREATE (e2:Module {name: \"Processing\", description: \"Python-based module for data processing and text embeddings\"})\nCREATE (doc)-[:MENTIONS]->(e2)\nCREATE (e3:Module {name: \"Vector Database\", description: \"Rust-based module for high-performance vector search\"})\nCREATE (doc)-[:MENTIONS]->(e3)\nCREATE (e4:Class {name: \"AuthService\", description: \"Handles authentication logic\"})\nCREATE (doc)-[:MENTIONS]->(e4)\nCREATE (e5:Class {name: \"UserController\", description: \"Manages user-related operations\"})\nCREATE (doc)-[:MENTIONS]->(e5)\nCREATE (e6:Dependency {name: \"TypeScript\", description: \"Programming language used for backend\"})\nCREATE (doc)-[:MENTIONS]->(e6)\nCREATE (e7:Dependency {name: \"Node.js\", description: \"Runtime environment for backend\"})\nCREATE (doc)-[:MENTIONS]->(e7)\nCREATE (e8:Dependency {name: \"Express.js\", description: \"Web framework for backend\"})\nCREATE (doc)-[:MENTIONS]->(e8)\nCREATE (e9:Dependency {name: \"PostgreSQL\", description: \"Database for storage\"})\nCREATE (doc)-[:MENTIONS]->(e9)\nCREATE (e10:Dependency {name: \"bcrypt\", description: \"Library for password hashing\"})\nCREATE (doc)-[:MENTIONS]->(e10)\nCREATE (e11:Dependency {name: \"JWT\", description: \"Token-based authentication\"})\nCREATE (doc)-[:MENTIONS]->(e11)\nCREATE (e12:Dependency {name: \"React\", description: \"UI library for frontend\"})\nCREATE (doc)-[:MENTIONS]->(e12)\nCREATE (e13:Dependency {name: \"JavaScript\", description: \"Programming language for frontend\"})\nCREATE (doc)-[:MENTIONS]->(e13)\nCREATE (e14:Dependency {name: \"Python\", description: \"Programming language for processing\"})\nCREATE (doc)-[:MENTIONS]->(e14)\nCREATE (e15:Dependency {name: \"FastAPI\", description: \"Web framework for processing\"})\nCREATE (doc)-[:MENTIONS]->(e15)\nCREATE (e16:Dependency {name: \"Pandas\", description: \"Library for data manipulation\"})\nCREATE (doc)-[:MENTIONS]->(e16)\nCREATE (e17:Dependency {name: \"SentenceTransformers\", description: \"Library for text embeddings\"})\nCREATE (doc)-[:MENTIONS]->(e17)\nCREATE (e18:Dependency {name: \"Rust\", description: \"Programming language for vector database\"})\nCREATE (doc)-[:MENTIONS]->(e18)\nCREATE (e19:Dependency {name: \"HNSW\", description: \"Algorithm for approximate nearest neighbor search\"})\nCREATE (doc)-[:MENTIONS]->(e19)\nCREATE (e20:Dependency {name: \"Axum\", description: \"HTTP framework for vector database\"})\nCREATE (doc)-[:MENTIONS]->(e20)\nCREATE (e21:API {name: \"POST /api/register\", description: \"Register new user\"})\nCREATE (doc)-[:MENTIONS]->(e21)\nCREATE (e22:API {name: \"POST /api/login\", description: \"Login and get JWT token\"})\nCREATE (doc)-[:MENTIONS]->(e22)\nCREATE (e23:API {name: \"GET /api/profile\", description: \"Get user profile (auth required)\"})\nCREATE (doc)-[:MENTIONS]->(e23)\nCREATE (e24:API {name: \"PUT /api/profile\", description: \"Update profile (auth required)\"})\nCREATE (doc)-[:MENTIONS]->(e24)\nCREATE (e25:API {name: \"POST /api/change-password\", description: \"Change password (auth required)\"})\nCREATE (doc)-[:MENTIONS]->(e25)\nCREATE (e26:API {name: \"GET /api/users\", description: \"List users (paginated)\"})\nCREATE (doc)-[:MENTIONS]->(e26)\nCREATE (e27:API {name: \"DELETE /api/users/:id\", description: \"Delete user (admin only)\"})\nCREATE (doc)-[:MENTIONS]->(e27)\nCREATE (e28:API {name: \"GET /api/health\", description: \"Service health check\"})\nCREATE (doc)-[:MENTIONS]->(e28)\nCREATE (e29:Database {name: \"PostgreSQL\", description: \"Primary database for user data storage\"})\nCREATE (doc)-[:MENTIONS]->(e29)\nCREATE (e30:Configuration {name: \"bcrypt rounds\", description: \"10 rounds for password hashing\"})\nCREATE (doc)-[:MENTIONS]->(e30)\nCREATE (e31:Configuration {name: \"JWT expiration\", description: \"Tokens expire in 24 hours\"})\nCREATE (doc)-[:MENTIONS]->(e31)\nCREATE (e32:Script {name: \"npm install\", description: \"Install dependencies\"})\nCREATE (doc)-[:MENTIONS]->(e32)\nCREATE (e33:Script {name: \"createdb users\", description: \"Setup database\"})\nCREATE (doc)-[:MENTIONS]->(e33)\nCREATE (e34:Script {name: \"psql users < schema.sql\", description: \"Initialize database schema\"})\nCREATE (doc)-[:MENTIONS]->(e34)\nCREATE (e35:Script {name: \"npm run dev\", description: \"Start server\"})\nCREATE (doc)-[:MENTIONS]->(e35)\nCREATE (e36:Script {name: \"npm run dev:client\", description: \"Start frontend\"})\nCREATE (doc)-[:MENTIONS]->(e36)\nCREATE (e37:Documentation {name: \"Quick Start\", description: \"Instructions for setting up and running the system\"})\nCREATE (doc)-[:MENTIONS]->(e37)\nCREATE (e38:Documentation {name: \"API Endpoints\", description: \"List of available API endpoints\"})\nCREATE (doc)-[:MENTIONS]->(e38)\nCREATE (e39:Documentation {name: \"Architecture\", description: \"Diagram and description of system architecture\"})\nCREATE (doc)-[:MENTIONS]->(e39)\nCREATE (e40:Documentation {name: \"Security\", description: \"Details on security measures\"})\nCREATE (doc)-[:MENTIONS]->(e40)\nCREATE (e41:Documentation {name: \"License\", description: \"MIT license information\"})\nCREATE (doc)-[:MENTIONS]->(e41)",
    "entities": [
      {
        "type": "Module",
        "properties": {
          "name": "Backend",
          "description": "Handles server-side logic including authentication and user management"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Frontend",
          "description": "React-based user interface for interacting with the system"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Processing",
          "description": "Python-based module for data processing and text embeddings"
        }
      },
      {
        "type": "Module",
        "properties": {
          "name": "Vector Database",
          "description": "Rust-based module for high-performance vector search"
        }
      },
      {
        "type": "Class",
        "properties": {
          "name": "AuthService",
          "description": "Handles authentication logic"
        }
      },
      {
        "type": "Class",
        "properties": {
          "name": "UserController",
          "description": "Manages user-related operations"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "TypeScript",
          "description": "Programming language used for backend"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "Node.js",
          "description": "Runtime environment for backend"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "Express.js",
          "description": "Web framework for backend"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "PostgreSQL",
          "description": "Database for storage"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "bcrypt",
          "description": "Library for password hashing"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "JWT",
          "description": "Token-based authentication"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "React",
          "description": "UI library for frontend"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "JavaScript",
          "description": "Programming language for frontend"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "Python",
          "description": "Programming language for processing"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "FastAPI",
          "description": "Web framework for processing"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "Pandas",
          "description": "Library for data manipulation"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "SentenceTransformers",
          "description": "Library for text embeddings"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "Rust",
          "description": "Programming language for vector database"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "HNSW",
          "description": "Algorithm for approximate nearest neighbor search"
        }
      },
      {
        "type": "Dependency",
        "properties": {
          "name": "Axum",
          "description": "HTTP framework for vector database"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/register",
          "description": "Register new user"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/login",
          "description": "Login and get JWT token"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/profile",
          "description": "Get user profile (auth required)"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "PUT /api/profile",
          "description": "Update profile (auth required)"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "POST /api/change-password",
          "description": "Change password (auth required)"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/users",
          "description": "List users (paginated)"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "DELETE /api/users/:id",
          "description": "Delete user (admin only)"
        }
      },
      {
        "type": "API",
        "properties": {
          "name": "GET /api/health",
          "description": "Service health check"
        }
      },
      {
        "type": "Database",
        "properties": {
          "name": "PostgreSQL",
          "description": "Primary database for user data storage"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "bcrypt rounds",
          "description": "10 rounds for password hashing"
        }
      },
      {
        "type": "Configuration",
        "properties": {
          "name": "JWT expiration",
          "description": "Tokens expire in 24 hours"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "npm install",
          "description": "Install dependencies"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "createdb users",
          "description": "Setup database"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "psql users < schema.sql",
          "description": "Initialize database schema"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "npm run dev",
          "description": "Start server"
        }
      },
      {
        "type": "Script",
        "properties": {
          "name": "npm run dev:client",
          "description": "Start frontend"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "Quick Start",
          "description": "Instructions for setting up and running the system"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "API Endpoints",
          "description": "List of available API endpoints"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "Architecture",
          "description": "Diagram and description of system architecture"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "Security",
          "description": "Details on security measures"
        }
      },
      {
        "type": "Documentation",
        "properties": {
          "name": "License",
          "description": "MIT license information"
        }
      }
    ],
    "relationships": [
      {
        "type": "DEPENDS_ON",
        "source": "Backend",
        "target": "TypeScript",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Backend",
        "target": "Node.js",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Backend",
        "target": "Express.js",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Backend",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Backend",
        "target": "bcrypt",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Backend",
        "target": "JWT",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Frontend",
        "target": "React",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Frontend",
        "target": "JavaScript",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Processing",
        "target": "Python",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Processing",
        "target": "FastAPI",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Processing",
        "target": "Pandas",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Processing",
        "target": "SentenceTransformers",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Vector Database",
        "target": "Rust",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Vector Database",
        "target": "HNSW",
        "properties": {}
      },
      {
        "type": "DEPENDS_ON",
        "source": "Vector Database",
        "target": "Axum",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Backend",
        "target": "AuthService",
        "properties": {}
      },
      {
        "type": "CONTAINS",
        "source": "Backend",
        "target": "UserController",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "POST /api/register",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "POST /api/login",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "GET /api/profile",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "PUT /api/profile",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "POST /api/change-password",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "GET /api/users",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "DELETE /api/users/:id",
        "properties": {}
      },
      {
        "type": "EXPOSES",
        "source": "Backend",
        "target": "GET /api/health",
        "properties": {}
      },
      {
        "type": "ACCESSES",
        "source": "Backend",
        "target": "PostgreSQL",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Quick Start",
        "target": "npm install",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Quick Start",
        "target": "createdb users",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Quick Start",
        "target": "psql users < schema.sql",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Quick Start",
        "target": "npm run dev",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Quick Start",
        "target": "npm run dev:client",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "POST /api/register",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "POST /api/login",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "GET /api/profile",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "PUT /api/profile",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "POST /api/change-password",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "GET /api/users",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "DELETE /api/users/:id",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "API Endpoints",
        "target": "GET /api/health",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Security",
        "target": "bcrypt rounds",
        "properties": {}
      },
      {
        "type": "DOCUMENTS",
        "source": "Security",
        "target": "JWT expiration",
        "properties": {}
      }
    ]
  },
  "fulltextMetadata": {
    "title": "Management System A full-stack user management system REST API React frontend",
    "domain": "software",
    "docType": "software_architecture_document",
    "extractedFields": {
      "module_name": [
        "Backend",
        "Frontend",
        "Processing",
        "Vector Database"
      ],
      "module_description": [
        "Handles server-side logic including authentication and user management",
        "React-based user interface for interacting with the system",
        "Python-based module for data processing and text embeddings",
        "Rust-based module for high-performance vector search"
      ],
      "class_name": [
        "AuthService",
        "UserController"
      ],
      "class_description": [
        "Handles authentication logic",
        "Manages user-related operations"
      ],
      "dependency_name": [
        "TypeScript",
        "Node.js",
        "Express.js",
        "PostgreSQL",
        "bcrypt",
        "JWT",
        "React",
        "JavaScript",
        "Python",
        "FastAPI",
        "Pandas",
        "SentenceTransformers",
        "Rust",
        "HNSW",
        "Axum"
      ],
      "dependency_description": [
        "Programming language used for backend",
        "Runtime environment for backend",
        "Web framework for backend",
        "Database for storage",
        "Library for password hashing",
        "Token-based authentication",
        "UI library for frontend",
        "Programming language for frontend",
        "Programming language for processing",
        "Web framework for processing",
        "Library for data manipulation",
        "Library for text embeddings",
        "Programming language for vector database",
        "Algorithm for approximate nearest neighbor search",
        "HTTP framework for vector database"
      ],
      "api_name": [
        "POST /api/register",
        "POST /api/login",
        "GET /api/profile",
        "PUT /api/profile",
        "POST /api/change-password",
        "GET /api/users",
        "DELETE /api/users/:id",
        "GET /api/health"
      ],
      "api_description": [
        "Register new user",
        "Login and get JWT token",
        "Get user profile (auth required)",
        "Update profile (auth required)",
        "Change password (auth required)",
        "List users (paginated)",
        "Delete user (admin only)",
        "Service health check"
      ],
      "database_name": "PostgreSQL",
      "database_description": "Primary database for user data storage",
      "configuration_name": [
        "bcrypt rounds",
        "JWT expiration"
      ],
      "configuration_description": [
        "10 rounds for password hashing",
        "Tokens expire in 24 hours"
      ],
      "script_name": [
        "npm install",
        "createdb users",
        "psql users < schema.sql",
        "npm run dev",
        "npm run dev:client"
      ],
      "script_description": [
        "Install dependencies",
        "Setup database",
        "Initialize database schema",
        "Start server",
        "Start frontend"
      ],
      "documentation_name": [
        "Quick Start",
        "API Endpoints",
        "Architecture",
        "Security",
        "License"
      ],
      "documentation_description": [
        "Instructions for setting up and running the system",
        "List of available API endpoints",
        "Diagram and description of system architecture",
        "Details on security measures",
        "MIT license information"
      ]
    },
    "keywords": [
      "user",
      "users",
      "database",
      "data",
      "authentication",
      "react",
      "frontend",
      "password",
      "profile",
      "bcrypt",
      "postgresql",
      "express",
      "vector",
      "processing",
      "server",
      "start",
      "post",
      "auth",
      "required",
      "health"
    ],
    "summary": "This document describes a full-stack user management system featuring user authentication with JWT tokens, password hashing, and a PostgreSQL database. The system includes an Express.js backend with TypeScript, a React frontend, and additional data processing capabilities using Python and a Rust-based vector database. It provides complete user registration, login, profile management, and administrative functions through a REST API."
  },
  "cacheInfo": {
    "cached": false,
    "hash": "2d377c08d36e07b4f7833d90ba5f7fae5d53b50b54810356f6aad9c2fa1a0a08"
  },
  "performance": {
    "totalTimeMs": 97552,
    "tokens": {
      "input": 791,
      "output": 3100,
      "total": 3891
    },
    "costUsd": 0.00097874
  }
}